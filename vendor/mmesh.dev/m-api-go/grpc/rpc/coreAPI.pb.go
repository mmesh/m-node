// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.1
// source: mmesh/protobuf/rpc/v1/coreAPI.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	status "mmesh.dev/m-api-go/grpc/common/status"
	routing "mmesh.dev/m-api-go/grpc/network/mmnp/routing"
	account "mmesh.dev/m-api-go/grpc/resources/account"
	iam "mmesh.dev/m-api-go/grpc/resources/iam"
	network "mmesh.dev/m-api-go/grpc/resources/network"
	object "mmesh.dev/m-api-go/grpc/resources/ops/object"
	project "mmesh.dev/m-api-go/grpc/resources/ops/project"
	workflow "mmesh.dev/m-api-go/grpc/resources/ops/workflow"
	resource "mmesh.dev/m-api-go/grpc/resources/resource"
	tenant "mmesh.dev/m-api-go/grpc/resources/tenant"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_mmesh_protobuf_rpc_v1_coreAPI_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_rpc_v1_coreAPI_proto_rawDesc = []byte{
	0x0a, 0x23, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x41, 0x50, 0x49, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76,
	0x31, 0x2f, 0x6d, 0x6d, 0x6e, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6d, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2d, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x37, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x2d, 0x6c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x69, 0x61, 0x6d, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x35,
	0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x73, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f,
	0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b,
	0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x73, 0x2f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x32, 0xf2, 0x26, 0x0a, 0x07,
	0x43, 0x6f, 0x72, 0x65, 0x41, 0x50, 0x49, 0x12, 0x3a, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x1a, 0x13, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x15, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0a, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x22, 0x00, 0x12, 0x21, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x09, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x11, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x15, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x73, 0x53, 0x53, 0x48, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a,
	0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x16,
	0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x73, 0x54, 0x4f, 0x54, 0x50, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4b,
	0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x1e, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x12, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x12, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x10, 0x53, 0x65, 0x74,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x1a, 0x12, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x15, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x0a, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x12, 0x21,
	0x0a, 0x07, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x22,
	0x00, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x16, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x43, 0x4c, 0x73, 0x12, 0x14, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43,
	0x4c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e,
	0x41, 0x43, 0x4c, 0x73, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x43, 0x4c,
	0x12, 0x08, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x1a, 0x08, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x41, 0x43, 0x4c, 0x22, 0x00, 0x12, 0x1e, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x41, 0x43, 0x4c,
	0x12, 0x08, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x1a, 0x08, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x41, 0x43, 0x4c, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x43, 0x4c, 0x12, 0x08, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x1a, 0x16, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x22, 0x2f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x22, 0x24, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x3a, 0x01, 0x2a, 0x12, 0x64, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x12, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x1a, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x12, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x12, 0x67, 0x0a, 0x09, 0x53, 0x65,
	0x74, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x3a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x34, 0x22,
	0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x3a, 0x01, 0x2a, 0x12, 0x6f, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x31, 0x2a, 0x2f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x12, 0x92, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x1c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x22, 0x46,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7a, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x48, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x42, 0x12, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e,
	0x65, 0x74, 0x49, 0x44, 0x7d, 0x12, 0x7d, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x22,
	0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44,
	0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x42, 0x2a, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x12, 0xa0, 0x01, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x52, 0x46, 0x73, 0x12, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x52, 0x46, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x73,
	0x22, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x65, 0x22, 0x60, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x6e, 0x65, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x7e, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x56, 0x52, 0x46, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x56, 0x52, 0x46, 0x1a, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x56, 0x52, 0x46, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x12, 0x50, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x49, 0x44, 0x7d, 0x12, 0x81, 0x01,
	0x0a, 0x06, 0x53, 0x65, 0x74, 0x56, 0x52, 0x46, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x1a, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x56, 0x52, 0x46, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x22, 0x50, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x49, 0x44, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x8b, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x52, 0x46, 0x12,
	0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x1a, 0x16, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x58, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x52, 0x2a, 0x50, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x49, 0x44, 0x7d, 0x12,
	0x94, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x56, 0x52, 0x46, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x1a, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x56, 0x52, 0x46, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x22, 0x54, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x49, 0x44, 0x7d, 0x3a,
	0x6d, 0x72, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x92, 0x01, 0x0a, 0x16, 0x44, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x56, 0x52, 0x46, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x1a,
	0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x22, 0x5c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x56, 0x2a, 0x54, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f,
	0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f,
	0x7b, 0x56, 0x52, 0x46, 0x49, 0x44, 0x7d, 0x3a, 0x6d, 0x72, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x1a, 0x0f,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x12, 0x57, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x49, 0x44, 0x7d, 0x3a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x49, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x95, 0x01, 0x0a, 0x13,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52,
	0x46, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x2a, 0x57, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x49, 0x44, 0x7d, 0x3a, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x92, 0x01, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46,
	0x1a, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x12,
	0x57, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44,
	0x7d, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x49, 0x44,
	0x7d, 0x3a, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12, 0x51, 0x0a, 0x12, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1c,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0d, 0x4c,
	0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x4d, 0x49, 0x44, 0x73, 0x12, 0x10, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0e,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4d, 0x4d, 0x49, 0x44, 0x73, 0x22, 0x00,
	0x12, 0xa9, 0x01, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x71, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x6b, 0x22, 0x66, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46,
	0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x2e, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x2e, 0x56, 0x52, 0x46,
	0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x90, 0x01, 0x0a,
	0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x61, 0x12, 0x5f,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x49, 0x44, 0x7d,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x7d, 0x12,
	0x9c, 0x01, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x61, 0x2a, 0x5f, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x2f, 0x7b, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x2f, 0x7b, 0x56, 0x52, 0x46, 0x49, 0x44, 0x7d, 0x2f,
	0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x7d, 0x12, 0x39,
	0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x15, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x41, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x16, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x1e, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x00, 0x12,
	0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x12,
	0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x12, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22,
	0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x44, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x12, 0x18, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x2e, 0x77, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x40,
	0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x1d, 0x5a, 0x1b, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x2d,
	0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_mmesh_protobuf_rpc_v1_coreAPI_proto_goTypes = []interface{}{
	(*resource.Resource)(nil),                 // 0: resource.Resource
	(*iam.User)(nil),                          // 1: iam.User
	(*iam.ListUsersRequest)(nil),              // 2: iam.ListUsersRequest
	(*iam.ListSecurityGroupsRequest)(nil),     // 3: iam.ListSecurityGroupsRequest
	(*iam.SecurityGroup)(nil),                 // 4: iam.SecurityGroup
	(*iam.ListRolesRequest)(nil),              // 5: iam.ListRolesRequest
	(*iam.Role)(nil),                          // 6: iam.Role
	(*iam.ListACLsRequest)(nil),               // 7: iam.ListACLsRequest
	(*iam.ACL)(nil),                           // 8: iam.ACL
	(*tenant.ListTenantsRequest)(nil),         // 9: tenant.ListTenantsRequest
	(*tenant.Tenant)(nil),                     // 10: tenant.Tenant
	(*network.ListNetworksRequest)(nil),       // 11: network.ListNetworksRequest
	(*network.Network)(nil),                   // 12: network.Network
	(*network.ListVRFsRequest)(nil),           // 13: network.ListVRFsRequest
	(*network.VRF)(nil),                       // 14: network.VRF
	(*object.NetworkPolicyConfigRequest)(nil), // 15: object.NetworkPolicyConfigRequest
	(*network.NodeInstanceRequest)(nil),       // 16: network.NodeInstanceRequest
	(*account.Account)(nil),                   // 17: account.Account
	(*network.ListNodesRequest)(nil),          // 18: network.ListNodesRequest
	(*network.Node)(nil),                      // 19: network.Node
	(*network.Endpoint)(nil),                  // 20: network.Endpoint
	(*project.ListProjectsRequest)(nil),       // 21: project.ListProjectsRequest
	(*project.Project)(nil),                   // 22: project.Project
	(*workflow.ListWorkflowsRequest)(nil),     // 23: workflow.ListWorkflowsRequest
	(*workflow.Workflow)(nil),                 // 24: workflow.Workflow
	(*workflow.WorkflowAction)(nil),           // 25: workflow.WorkflowAction
	(*workflow.ListOperationsRequest)(nil),    // 26: workflow.ListOperationsRequest
	(*workflow.Operation)(nil),                // 27: workflow.Operation
	(*resource.Resources)(nil),                // 28: resource.Resources
	(*iam.Users)(nil),                         // 29: iam.Users
	(*status.StatusResponse)(nil),             // 30: status.StatusResponse
	(*iam.SecurityGroups)(nil),                // 31: iam.SecurityGroups
	(*iam.Roles)(nil),                         // 32: iam.Roles
	(*iam.ACLs)(nil),                          // 33: iam.ACLs
	(*tenant.Tenants)(nil),                    // 34: tenant.Tenants
	(*network.Networks)(nil),                  // 35: network.Networks
	(*network.VRFs)(nil),                      // 36: network.VRFs
	(*network.Policy)(nil),                    // 37: network.Policy
	(*routing.RoutingTable)(nil),              // 38: routing.RoutingTable
	(*network.NodeInstanceConfig)(nil),        // 39: network.NodeInstanceConfig
	(*network.MMIDs)(nil),                     // 40: network.MMIDs
	(*network.Nodes)(nil),                     // 41: network.Nodes
	(*project.Projects)(nil),                  // 42: project.Projects
	(*workflow.Workflows)(nil),                // 43: workflow.Workflows
	(*workflow.Operations)(nil),               // 44: workflow.Operations
}
var file_mmesh_protobuf_rpc_v1_coreAPI_proto_depIdxs = []int32{
	0,  // 0: api.CoreAPI.ListResources:input_type -> resource.Resource
	1,  // 1: api.CoreAPI.EnableUser:input_type -> iam.User
	1,  // 2: api.CoreAPI.DisableUser:input_type -> iam.User
	2,  // 3: api.CoreAPI.ListUsers:input_type -> iam.ListUsersRequest
	1,  // 4: api.CoreAPI.GetUser:input_type -> iam.User
	1,  // 5: api.CoreAPI.SetUser:input_type -> iam.User
	1,  // 6: api.CoreAPI.DeleteUser:input_type -> iam.User
	1,  // 7: api.CoreAPI.ResetUserPassword:input_type -> iam.User
	1,  // 8: api.CoreAPI.SetUserCredentialsPassword:input_type -> iam.User
	1,  // 9: api.CoreAPI.SetUserCredentialsSSH:input_type -> iam.User
	1,  // 10: api.CoreAPI.SetUserCredentialsTOTP:input_type -> iam.User
	3,  // 11: api.CoreAPI.ListSecurityGroups:input_type -> iam.ListSecurityGroupsRequest
	4,  // 12: api.CoreAPI.GetSecurityGroup:input_type -> iam.SecurityGroup
	4,  // 13: api.CoreAPI.SetSecurityGroup:input_type -> iam.SecurityGroup
	4,  // 14: api.CoreAPI.DeleteSecurityGroup:input_type -> iam.SecurityGroup
	5,  // 15: api.CoreAPI.ListRoles:input_type -> iam.ListRolesRequest
	6,  // 16: api.CoreAPI.GetRole:input_type -> iam.Role
	6,  // 17: api.CoreAPI.SetRole:input_type -> iam.Role
	6,  // 18: api.CoreAPI.DeleteRole:input_type -> iam.Role
	7,  // 19: api.CoreAPI.ListACLs:input_type -> iam.ListACLsRequest
	8,  // 20: api.CoreAPI.GetACL:input_type -> iam.ACL
	8,  // 21: api.CoreAPI.SetACL:input_type -> iam.ACL
	8,  // 22: api.CoreAPI.DeleteACL:input_type -> iam.ACL
	9,  // 23: api.CoreAPI.ListTenants:input_type -> tenant.ListTenantsRequest
	10, // 24: api.CoreAPI.GetTenant:input_type -> tenant.Tenant
	10, // 25: api.CoreAPI.SetTenant:input_type -> tenant.Tenant
	10, // 26: api.CoreAPI.DeleteTenant:input_type -> tenant.Tenant
	11, // 27: api.CoreAPI.ListNetworks:input_type -> network.ListNetworksRequest
	12, // 28: api.CoreAPI.GetNetwork:input_type -> network.Network
	12, // 29: api.CoreAPI.SetNetwork:input_type -> network.Network
	12, // 30: api.CoreAPI.DeleteNetwork:input_type -> network.Network
	13, // 31: api.CoreAPI.ListVRFs:input_type -> network.ListVRFsRequest
	14, // 32: api.CoreAPI.GetVRF:input_type -> network.VRF
	14, // 33: api.CoreAPI.SetVRF:input_type -> network.VRF
	14, // 34: api.CoreAPI.DeleteVRF:input_type -> network.VRF
	14, // 35: api.CoreAPI.EnableVRFRelayService:input_type -> network.VRF
	14, // 36: api.CoreAPI.DisableVRFRelayService:input_type -> network.VRF
	14, // 37: api.CoreAPI.GetNetworkPolicy:input_type -> network.VRF
	15, // 38: api.CoreAPI.SetNetworkPolicy:input_type -> object.NetworkPolicyConfigRequest
	14, // 39: api.CoreAPI.DeleteNetworkPolicy:input_type -> network.VRF
	14, // 40: api.CoreAPI.ListRoutes:input_type -> network.VRF
	16, // 41: api.CoreAPI.GenerateNodeConfig:input_type -> network.NodeInstanceRequest
	17, // 42: api.CoreAPI.ListNodeMMIDs:input_type -> account.Account
	18, // 43: api.CoreAPI.ListNodes:input_type -> network.ListNodesRequest
	19, // 44: api.CoreAPI.GetNode:input_type -> network.Node
	19, // 45: api.CoreAPI.DeleteNode:input_type -> network.Node
	19, // 46: api.CoreAPI.ResetNodeNetworkTraffic:input_type -> network.Node
	20, // 47: api.CoreAPI.DeleteNetworkEndpoint:input_type -> network.Endpoint
	21, // 48: api.CoreAPI.ListProjects:input_type -> project.ListProjectsRequest
	22, // 49: api.CoreAPI.GetProject:input_type -> project.Project
	22, // 50: api.CoreAPI.SetProject:input_type -> project.Project
	22, // 51: api.CoreAPI.DeleteProject:input_type -> project.Project
	23, // 52: api.CoreAPI.ListWorkflows:input_type -> workflow.ListWorkflowsRequest
	24, // 53: api.CoreAPI.GetWorkflow:input_type -> workflow.Workflow
	24, // 54: api.CoreAPI.SetWorkflow:input_type -> workflow.Workflow
	24, // 55: api.CoreAPI.DeleteWorkflow:input_type -> workflow.Workflow
	25, // 56: api.CoreAPI.ActionWorkflow:input_type -> workflow.WorkflowAction
	26, // 57: api.CoreAPI.ListOperations:input_type -> workflow.ListOperationsRequest
	27, // 58: api.CoreAPI.GetOperation:input_type -> workflow.Operation
	27, // 59: api.CoreAPI.DeleteOperation:input_type -> workflow.Operation
	28, // 60: api.CoreAPI.ListResources:output_type -> resource.Resources
	1,  // 61: api.CoreAPI.EnableUser:output_type -> iam.User
	1,  // 62: api.CoreAPI.DisableUser:output_type -> iam.User
	29, // 63: api.CoreAPI.ListUsers:output_type -> iam.Users
	1,  // 64: api.CoreAPI.GetUser:output_type -> iam.User
	1,  // 65: api.CoreAPI.SetUser:output_type -> iam.User
	30, // 66: api.CoreAPI.DeleteUser:output_type -> status.StatusResponse
	30, // 67: api.CoreAPI.ResetUserPassword:output_type -> status.StatusResponse
	1,  // 68: api.CoreAPI.SetUserCredentialsPassword:output_type -> iam.User
	1,  // 69: api.CoreAPI.SetUserCredentialsSSH:output_type -> iam.User
	1,  // 70: api.CoreAPI.SetUserCredentialsTOTP:output_type -> iam.User
	31, // 71: api.CoreAPI.ListSecurityGroups:output_type -> iam.SecurityGroups
	4,  // 72: api.CoreAPI.GetSecurityGroup:output_type -> iam.SecurityGroup
	4,  // 73: api.CoreAPI.SetSecurityGroup:output_type -> iam.SecurityGroup
	30, // 74: api.CoreAPI.DeleteSecurityGroup:output_type -> status.StatusResponse
	32, // 75: api.CoreAPI.ListRoles:output_type -> iam.Roles
	6,  // 76: api.CoreAPI.GetRole:output_type -> iam.Role
	6,  // 77: api.CoreAPI.SetRole:output_type -> iam.Role
	30, // 78: api.CoreAPI.DeleteRole:output_type -> status.StatusResponse
	33, // 79: api.CoreAPI.ListACLs:output_type -> iam.ACLs
	8,  // 80: api.CoreAPI.GetACL:output_type -> iam.ACL
	8,  // 81: api.CoreAPI.SetACL:output_type -> iam.ACL
	30, // 82: api.CoreAPI.DeleteACL:output_type -> status.StatusResponse
	34, // 83: api.CoreAPI.ListTenants:output_type -> tenant.Tenants
	10, // 84: api.CoreAPI.GetTenant:output_type -> tenant.Tenant
	10, // 85: api.CoreAPI.SetTenant:output_type -> tenant.Tenant
	30, // 86: api.CoreAPI.DeleteTenant:output_type -> status.StatusResponse
	35, // 87: api.CoreAPI.ListNetworks:output_type -> network.Networks
	12, // 88: api.CoreAPI.GetNetwork:output_type -> network.Network
	12, // 89: api.CoreAPI.SetNetwork:output_type -> network.Network
	30, // 90: api.CoreAPI.DeleteNetwork:output_type -> status.StatusResponse
	36, // 91: api.CoreAPI.ListVRFs:output_type -> network.VRFs
	14, // 92: api.CoreAPI.GetVRF:output_type -> network.VRF
	14, // 93: api.CoreAPI.SetVRF:output_type -> network.VRF
	30, // 94: api.CoreAPI.DeleteVRF:output_type -> status.StatusResponse
	14, // 95: api.CoreAPI.EnableVRFRelayService:output_type -> network.VRF
	14, // 96: api.CoreAPI.DisableVRFRelayService:output_type -> network.VRF
	37, // 97: api.CoreAPI.GetNetworkPolicy:output_type -> network.Policy
	37, // 98: api.CoreAPI.SetNetworkPolicy:output_type -> network.Policy
	37, // 99: api.CoreAPI.DeleteNetworkPolicy:output_type -> network.Policy
	38, // 100: api.CoreAPI.ListRoutes:output_type -> routing.RoutingTable
	39, // 101: api.CoreAPI.GenerateNodeConfig:output_type -> network.NodeInstanceConfig
	40, // 102: api.CoreAPI.ListNodeMMIDs:output_type -> network.MMIDs
	41, // 103: api.CoreAPI.ListNodes:output_type -> network.Nodes
	19, // 104: api.CoreAPI.GetNode:output_type -> network.Node
	30, // 105: api.CoreAPI.DeleteNode:output_type -> status.StatusResponse
	19, // 106: api.CoreAPI.ResetNodeNetworkTraffic:output_type -> network.Node
	30, // 107: api.CoreAPI.DeleteNetworkEndpoint:output_type -> status.StatusResponse
	42, // 108: api.CoreAPI.ListProjects:output_type -> project.Projects
	22, // 109: api.CoreAPI.GetProject:output_type -> project.Project
	22, // 110: api.CoreAPI.SetProject:output_type -> project.Project
	30, // 111: api.CoreAPI.DeleteProject:output_type -> status.StatusResponse
	43, // 112: api.CoreAPI.ListWorkflows:output_type -> workflow.Workflows
	24, // 113: api.CoreAPI.GetWorkflow:output_type -> workflow.Workflow
	24, // 114: api.CoreAPI.SetWorkflow:output_type -> workflow.Workflow
	30, // 115: api.CoreAPI.DeleteWorkflow:output_type -> status.StatusResponse
	30, // 116: api.CoreAPI.ActionWorkflow:output_type -> status.StatusResponse
	44, // 117: api.CoreAPI.ListOperations:output_type -> workflow.Operations
	27, // 118: api.CoreAPI.GetOperation:output_type -> workflow.Operation
	30, // 119: api.CoreAPI.DeleteOperation:output_type -> status.StatusResponse
	60, // [60:120] is the sub-list for method output_type
	0,  // [0:60] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_rpc_v1_coreAPI_proto_init() }
func file_mmesh_protobuf_rpc_v1_coreAPI_proto_init() {
	if File_mmesh_protobuf_rpc_v1_coreAPI_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_rpc_v1_coreAPI_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mmesh_protobuf_rpc_v1_coreAPI_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_rpc_v1_coreAPI_proto_depIdxs,
	}.Build()
	File_mmesh_protobuf_rpc_v1_coreAPI_proto = out.File
	file_mmesh_protobuf_rpc_v1_coreAPI_proto_rawDesc = nil
	file_mmesh_protobuf_rpc_v1_coreAPI_proto_goTypes = nil
	file_mmesh_protobuf_rpc_v1_coreAPI_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CoreAPIClient is the client API for CoreAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CoreAPIClient interface {
	ListResources(ctx context.Context, in *resource.Resource, opts ...grpc.CallOption) (*resource.Resources, error)
	EnableUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	DisableUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	ListUsers(ctx context.Context, in *iam.ListUsersRequest, opts ...grpc.CallOption) (*iam.Users, error)
	GetUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	SetUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	DeleteUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ResetUserPassword(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error)
	SetUserCredentialsPassword(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	SetUserCredentialsSSH(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	SetUserCredentialsTOTP(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	ListSecurityGroups(ctx context.Context, in *iam.ListSecurityGroupsRequest, opts ...grpc.CallOption) (*iam.SecurityGroups, error)
	GetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error)
	SetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error)
	DeleteSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListRoles(ctx context.Context, in *iam.ListRolesRequest, opts ...grpc.CallOption) (*iam.Roles, error)
	GetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error)
	SetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error)
	DeleteRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListACLs(ctx context.Context, in *iam.ListACLsRequest, opts ...grpc.CallOption) (*iam.ACLs, error)
	GetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error)
	SetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error)
	DeleteACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// tenants
	ListTenants(ctx context.Context, in *tenant.ListTenantsRequest, opts ...grpc.CallOption) (*tenant.Tenants, error)
	GetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error)
	SetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error)
	DeleteTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// networks
	ListNetworks(ctx context.Context, in *network.ListNetworksRequest, opts ...grpc.CallOption) (*network.Networks, error)
	GetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error)
	SetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error)
	DeleteNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// VRFs (subnets)
	ListVRFs(ctx context.Context, in *network.ListVRFsRequest, opts ...grpc.CallOption) (*network.VRFs, error)
	GetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error)
	SetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error)
	DeleteVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*status.StatusResponse, error)
	EnableVRFRelayService(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error)
	DisableVRFRelayService(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error)
	// network policies
	GetNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error)
	SetNetworkPolicy(ctx context.Context, in *object.NetworkPolicyConfigRequest, opts ...grpc.CallOption) (*network.Policy, error)
	DeleteNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error)
	// routes
	ListRoutes(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*routing.RoutingTable, error)
	// nodes
	GenerateNodeConfig(ctx context.Context, in *network.NodeInstanceRequest, opts ...grpc.CallOption) (*network.NodeInstanceConfig, error)
	ListNodeMMIDs(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*network.MMIDs, error)
	ListNodes(ctx context.Context, in *network.ListNodesRequest, opts ...grpc.CallOption) (*network.Nodes, error)
	GetNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error)
	// rpc SetNode (network.Node) returns (network.Node) {}
	DeleteNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ResetNodeNetworkTraffic(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error)
	// rpc GetNetworkEndpoint(network.Endpoint) returns (blob.Blob) {}
	DeleteNetworkEndpoint(ctx context.Context, in *network.Endpoint, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListProjects(ctx context.Context, in *project.ListProjectsRequest, opts ...grpc.CallOption) (*project.Projects, error)
	GetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error)
	SetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error)
	DeleteProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListWorkflows(ctx context.Context, in *workflow.ListWorkflowsRequest, opts ...grpc.CallOption) (*workflow.Workflows, error)
	GetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error)
	SetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error)
	DeleteWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ActionWorkflow(ctx context.Context, in *workflow.WorkflowAction, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListOperations(ctx context.Context, in *workflow.ListOperationsRequest, opts ...grpc.CallOption) (*workflow.Operations, error)
	GetOperation(ctx context.Context, in *workflow.Operation, opts ...grpc.CallOption) (*workflow.Operation, error)
	// rpc SetOperation (operation.Operation) returns (status.StatusResponse) {}
	DeleteOperation(ctx context.Context, in *workflow.Operation, opts ...grpc.CallOption) (*status.StatusResponse, error)
}

type coreAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreAPIClient(cc grpc.ClientConnInterface) CoreAPIClient {
	return &coreAPIClient{cc}
}

func (c *coreAPIClient) ListResources(ctx context.Context, in *resource.Resource, opts ...grpc.CallOption) (*resource.Resources, error) {
	out := new(resource.Resources)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) EnableUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/EnableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DisableUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DisableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListUsers(ctx context.Context, in *iam.ListUsersRequest, opts ...grpc.CallOption) (*iam.Users, error) {
	out := new(iam.Users)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ResetUserPassword(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ResetUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUserCredentialsPassword(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUserCredentialsPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUserCredentialsSSH(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUserCredentialsSSH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUserCredentialsTOTP(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUserCredentialsTOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListSecurityGroups(ctx context.Context, in *iam.ListSecurityGroupsRequest, opts ...grpc.CallOption) (*iam.SecurityGroups, error) {
	out := new(iam.SecurityGroups)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListSecurityGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error) {
	out := new(iam.SecurityGroup)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error) {
	out := new(iam.SecurityGroup)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListRoles(ctx context.Context, in *iam.ListRolesRequest, opts ...grpc.CallOption) (*iam.Roles, error) {
	out := new(iam.Roles)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error) {
	out := new(iam.Role)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error) {
	out := new(iam.Role)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListACLs(ctx context.Context, in *iam.ListACLsRequest, opts ...grpc.CallOption) (*iam.ACLs, error) {
	out := new(iam.ACLs)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListACLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error) {
	out := new(iam.ACL)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error) {
	out := new(iam.ACL)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListTenants(ctx context.Context, in *tenant.ListTenantsRequest, opts ...grpc.CallOption) (*tenant.Tenants, error) {
	out := new(tenant.Tenants)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error) {
	out := new(tenant.Tenant)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error) {
	out := new(tenant.Tenant)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListNetworks(ctx context.Context, in *network.ListNetworksRequest, opts ...grpc.CallOption) (*network.Networks, error) {
	out := new(network.Networks)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error) {
	out := new(network.Network)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error) {
	out := new(network.Network)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListVRFs(ctx context.Context, in *network.ListVRFsRequest, opts ...grpc.CallOption) (*network.VRFs, error) {
	out := new(network.VRFs)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListVRFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error) {
	out := new(network.VRF)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetVRF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error) {
	out := new(network.VRF)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetVRF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteVRF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) EnableVRFRelayService(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error) {
	out := new(network.VRF)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/EnableVRFRelayService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DisableVRFRelayService(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error) {
	out := new(network.VRF)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DisableVRFRelayService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error) {
	out := new(network.Policy)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetNetworkPolicy(ctx context.Context, in *object.NetworkPolicyConfigRequest, opts ...grpc.CallOption) (*network.Policy, error) {
	out := new(network.Policy)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error) {
	out := new(network.Policy)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListRoutes(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*routing.RoutingTable, error) {
	out := new(routing.RoutingTable)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GenerateNodeConfig(ctx context.Context, in *network.NodeInstanceRequest, opts ...grpc.CallOption) (*network.NodeInstanceConfig, error) {
	out := new(network.NodeInstanceConfig)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GenerateNodeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListNodeMMIDs(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*network.MMIDs, error) {
	out := new(network.MMIDs)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListNodeMMIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListNodes(ctx context.Context, in *network.ListNodesRequest, opts ...grpc.CallOption) (*network.Nodes, error) {
	out := new(network.Nodes)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error) {
	out := new(network.Node)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ResetNodeNetworkTraffic(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error) {
	out := new(network.Node)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ResetNodeNetworkTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteNetworkEndpoint(ctx context.Context, in *network.Endpoint, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteNetworkEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListProjects(ctx context.Context, in *project.ListProjectsRequest, opts ...grpc.CallOption) (*project.Projects, error) {
	out := new(project.Projects)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error) {
	out := new(project.Project)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error) {
	out := new(project.Project)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListWorkflows(ctx context.Context, in *workflow.ListWorkflowsRequest, opts ...grpc.CallOption) (*workflow.Workflows, error) {
	out := new(workflow.Workflows)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error) {
	out := new(workflow.Workflow)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error) {
	out := new(workflow.Workflow)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ActionWorkflow(ctx context.Context, in *workflow.WorkflowAction, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ActionWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListOperations(ctx context.Context, in *workflow.ListOperationsRequest, opts ...grpc.CallOption) (*workflow.Operations, error) {
	out := new(workflow.Operations)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetOperation(ctx context.Context, in *workflow.Operation, opts ...grpc.CallOption) (*workflow.Operation, error) {
	out := new(workflow.Operation)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteOperation(ctx context.Context, in *workflow.Operation, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreAPIServer is the server API for CoreAPI service.
type CoreAPIServer interface {
	ListResources(context.Context, *resource.Resource) (*resource.Resources, error)
	EnableUser(context.Context, *iam.User) (*iam.User, error)
	DisableUser(context.Context, *iam.User) (*iam.User, error)
	ListUsers(context.Context, *iam.ListUsersRequest) (*iam.Users, error)
	GetUser(context.Context, *iam.User) (*iam.User, error)
	SetUser(context.Context, *iam.User) (*iam.User, error)
	DeleteUser(context.Context, *iam.User) (*status.StatusResponse, error)
	ResetUserPassword(context.Context, *iam.User) (*status.StatusResponse, error)
	SetUserCredentialsPassword(context.Context, *iam.User) (*iam.User, error)
	SetUserCredentialsSSH(context.Context, *iam.User) (*iam.User, error)
	SetUserCredentialsTOTP(context.Context, *iam.User) (*iam.User, error)
	ListSecurityGroups(context.Context, *iam.ListSecurityGroupsRequest) (*iam.SecurityGroups, error)
	GetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error)
	SetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error)
	DeleteSecurityGroup(context.Context, *iam.SecurityGroup) (*status.StatusResponse, error)
	ListRoles(context.Context, *iam.ListRolesRequest) (*iam.Roles, error)
	GetRole(context.Context, *iam.Role) (*iam.Role, error)
	SetRole(context.Context, *iam.Role) (*iam.Role, error)
	DeleteRole(context.Context, *iam.Role) (*status.StatusResponse, error)
	ListACLs(context.Context, *iam.ListACLsRequest) (*iam.ACLs, error)
	GetACL(context.Context, *iam.ACL) (*iam.ACL, error)
	SetACL(context.Context, *iam.ACL) (*iam.ACL, error)
	DeleteACL(context.Context, *iam.ACL) (*status.StatusResponse, error)
	// tenants
	ListTenants(context.Context, *tenant.ListTenantsRequest) (*tenant.Tenants, error)
	GetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error)
	SetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error)
	DeleteTenant(context.Context, *tenant.Tenant) (*status.StatusResponse, error)
	// networks
	ListNetworks(context.Context, *network.ListNetworksRequest) (*network.Networks, error)
	GetNetwork(context.Context, *network.Network) (*network.Network, error)
	SetNetwork(context.Context, *network.Network) (*network.Network, error)
	DeleteNetwork(context.Context, *network.Network) (*status.StatusResponse, error)
	// VRFs (subnets)
	ListVRFs(context.Context, *network.ListVRFsRequest) (*network.VRFs, error)
	GetVRF(context.Context, *network.VRF) (*network.VRF, error)
	SetVRF(context.Context, *network.VRF) (*network.VRF, error)
	DeleteVRF(context.Context, *network.VRF) (*status.StatusResponse, error)
	EnableVRFRelayService(context.Context, *network.VRF) (*network.VRF, error)
	DisableVRFRelayService(context.Context, *network.VRF) (*network.VRF, error)
	// network policies
	GetNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error)
	SetNetworkPolicy(context.Context, *object.NetworkPolicyConfigRequest) (*network.Policy, error)
	DeleteNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error)
	// routes
	ListRoutes(context.Context, *network.VRF) (*routing.RoutingTable, error)
	// nodes
	GenerateNodeConfig(context.Context, *network.NodeInstanceRequest) (*network.NodeInstanceConfig, error)
	ListNodeMMIDs(context.Context, *account.Account) (*network.MMIDs, error)
	ListNodes(context.Context, *network.ListNodesRequest) (*network.Nodes, error)
	GetNode(context.Context, *network.Node) (*network.Node, error)
	// rpc SetNode (network.Node) returns (network.Node) {}
	DeleteNode(context.Context, *network.Node) (*status.StatusResponse, error)
	ResetNodeNetworkTraffic(context.Context, *network.Node) (*network.Node, error)
	// rpc GetNetworkEndpoint(network.Endpoint) returns (blob.Blob) {}
	DeleteNetworkEndpoint(context.Context, *network.Endpoint) (*status.StatusResponse, error)
	ListProjects(context.Context, *project.ListProjectsRequest) (*project.Projects, error)
	GetProject(context.Context, *project.Project) (*project.Project, error)
	SetProject(context.Context, *project.Project) (*project.Project, error)
	DeleteProject(context.Context, *project.Project) (*status.StatusResponse, error)
	ListWorkflows(context.Context, *workflow.ListWorkflowsRequest) (*workflow.Workflows, error)
	GetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error)
	SetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error)
	DeleteWorkflow(context.Context, *workflow.Workflow) (*status.StatusResponse, error)
	ActionWorkflow(context.Context, *workflow.WorkflowAction) (*status.StatusResponse, error)
	ListOperations(context.Context, *workflow.ListOperationsRequest) (*workflow.Operations, error)
	GetOperation(context.Context, *workflow.Operation) (*workflow.Operation, error)
	// rpc SetOperation (operation.Operation) returns (status.StatusResponse) {}
	DeleteOperation(context.Context, *workflow.Operation) (*status.StatusResponse, error)
}

// UnimplementedCoreAPIServer can be embedded to have forward compatible implementations.
type UnimplementedCoreAPIServer struct {
}

func (*UnimplementedCoreAPIServer) ListResources(context.Context, *resource.Resource) (*resource.Resources, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (*UnimplementedCoreAPIServer) EnableUser(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (*UnimplementedCoreAPIServer) DisableUser(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (*UnimplementedCoreAPIServer) ListUsers(context.Context, *iam.ListUsersRequest) (*iam.Users, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedCoreAPIServer) GetUser(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedCoreAPIServer) SetUser(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUser not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteUser(context.Context, *iam.User) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedCoreAPIServer) ResetUserPassword(context.Context, *iam.User) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ResetUserPassword not implemented")
}
func (*UnimplementedCoreAPIServer) SetUserCredentialsPassword(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserCredentialsPassword not implemented")
}
func (*UnimplementedCoreAPIServer) SetUserCredentialsSSH(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserCredentialsSSH not implemented")
}
func (*UnimplementedCoreAPIServer) SetUserCredentialsTOTP(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserCredentialsTOTP not implemented")
}
func (*UnimplementedCoreAPIServer) ListSecurityGroups(context.Context, *iam.ListSecurityGroupsRequest) (*iam.SecurityGroups, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSecurityGroups not implemented")
}
func (*UnimplementedCoreAPIServer) GetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSecurityGroup not implemented")
}
func (*UnimplementedCoreAPIServer) SetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetSecurityGroup not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteSecurityGroup(context.Context, *iam.SecurityGroup) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSecurityGroup not implemented")
}
func (*UnimplementedCoreAPIServer) ListRoles(context.Context, *iam.ListRolesRequest) (*iam.Roles, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedCoreAPIServer) GetRole(context.Context, *iam.Role) (*iam.Role, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedCoreAPIServer) SetRole(context.Context, *iam.Role) (*iam.Role, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteRole(context.Context, *iam.Role) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedCoreAPIServer) ListACLs(context.Context, *iam.ListACLsRequest) (*iam.ACLs, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListACLs not implemented")
}
func (*UnimplementedCoreAPIServer) GetACL(context.Context, *iam.ACL) (*iam.ACL, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetACL not implemented")
}
func (*UnimplementedCoreAPIServer) SetACL(context.Context, *iam.ACL) (*iam.ACL, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetACL not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteACL(context.Context, *iam.ACL) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteACL not implemented")
}
func (*UnimplementedCoreAPIServer) ListTenants(context.Context, *tenant.ListTenantsRequest) (*tenant.Tenants, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (*UnimplementedCoreAPIServer) GetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (*UnimplementedCoreAPIServer) SetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetTenant not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteTenant(context.Context, *tenant.Tenant) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (*UnimplementedCoreAPIServer) ListNetworks(context.Context, *network.ListNetworksRequest) (*network.Networks, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (*UnimplementedCoreAPIServer) GetNetwork(context.Context, *network.Network) (*network.Network, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (*UnimplementedCoreAPIServer) SetNetwork(context.Context, *network.Network) (*network.Network, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetNetwork not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteNetwork(context.Context, *network.Network) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (*UnimplementedCoreAPIServer) ListVRFs(context.Context, *network.ListVRFsRequest) (*network.VRFs, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListVRFs not implemented")
}
func (*UnimplementedCoreAPIServer) GetVRF(context.Context, *network.VRF) (*network.VRF, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetVRF not implemented")
}
func (*UnimplementedCoreAPIServer) SetVRF(context.Context, *network.VRF) (*network.VRF, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetVRF not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteVRF(context.Context, *network.VRF) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVRF not implemented")
}
func (*UnimplementedCoreAPIServer) EnableVRFRelayService(context.Context, *network.VRF) (*network.VRF, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method EnableVRFRelayService not implemented")
}
func (*UnimplementedCoreAPIServer) DisableVRFRelayService(context.Context, *network.VRF) (*network.VRF, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DisableVRFRelayService not implemented")
}
func (*UnimplementedCoreAPIServer) GetNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNetworkPolicy not implemented")
}
func (*UnimplementedCoreAPIServer) SetNetworkPolicy(context.Context, *object.NetworkPolicyConfigRequest) (*network.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetNetworkPolicy not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetworkPolicy not implemented")
}
func (*UnimplementedCoreAPIServer) ListRoutes(context.Context, *network.VRF) (*routing.RoutingTable, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (*UnimplementedCoreAPIServer) GenerateNodeConfig(context.Context, *network.NodeInstanceRequest) (*network.NodeInstanceConfig, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GenerateNodeConfig not implemented")
}
func (*UnimplementedCoreAPIServer) ListNodeMMIDs(context.Context, *account.Account) (*network.MMIDs, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodeMMIDs not implemented")
}
func (*UnimplementedCoreAPIServer) ListNodes(context.Context, *network.ListNodesRequest) (*network.Nodes, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedCoreAPIServer) GetNode(context.Context, *network.Node) (*network.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteNode(context.Context, *network.Node) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedCoreAPIServer) ResetNodeNetworkTraffic(context.Context, *network.Node) (*network.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ResetNodeNetworkTraffic not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteNetworkEndpoint(context.Context, *network.Endpoint) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetworkEndpoint not implemented")
}
func (*UnimplementedCoreAPIServer) ListProjects(context.Context, *project.ListProjectsRequest) (*project.Projects, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedCoreAPIServer) GetProject(context.Context, *project.Project) (*project.Project, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedCoreAPIServer) SetProject(context.Context, *project.Project) (*project.Project, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetProject not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteProject(context.Context, *project.Project) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedCoreAPIServer) ListWorkflows(context.Context, *workflow.ListWorkflowsRequest) (*workflow.Workflows, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (*UnimplementedCoreAPIServer) GetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedCoreAPIServer) SetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetWorkflow not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteWorkflow(context.Context, *workflow.Workflow) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (*UnimplementedCoreAPIServer) ActionWorkflow(context.Context, *workflow.WorkflowAction) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ActionWorkflow not implemented")
}
func (*UnimplementedCoreAPIServer) ListOperations(context.Context, *workflow.ListOperationsRequest) (*workflow.Operations, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (*UnimplementedCoreAPIServer) GetOperation(context.Context, *workflow.Operation) (*workflow.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (*UnimplementedCoreAPIServer) DeleteOperation(context.Context, *workflow.Operation) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteOperation not implemented")
}

func RegisterCoreAPIServer(s *grpc.Server, srv CoreAPIServer) {
	s.RegisterService(&_CoreAPI_serviceDesc, srv)
}

func _CoreAPI_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListResources(ctx, req.(*resource.Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/EnableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).EnableUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DisableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DisableUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListUsers(ctx, req.(*iam.ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ResetUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ResetUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ResetUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ResetUserPassword(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUserCredentialsPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUserCredentialsPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUserCredentialsPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUserCredentialsPassword(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUserCredentialsSSH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUserCredentialsSSH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUserCredentialsSSH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUserCredentialsSSH(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUserCredentialsTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUserCredentialsTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUserCredentialsTOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUserCredentialsTOTP(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ListSecurityGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListSecurityGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListSecurityGroups(ctx, req.(*iam.ListSecurityGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetSecurityGroup(ctx, req.(*iam.SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetSecurityGroup(ctx, req.(*iam.SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteSecurityGroup(ctx, req.(*iam.SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListRoles(ctx, req.(*iam.ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetRole(ctx, req.(*iam.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetRole(ctx, req.(*iam.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteRole(ctx, req.(*iam.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListACLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ListACLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListACLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListACLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListACLs(ctx, req.(*iam.ListACLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetACL(ctx, req.(*iam.ACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetACL(ctx, req.(*iam.ACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteACL(ctx, req.(*iam.ACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListTenants(ctx, req.(*tenant.ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetTenant(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetTenant(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteTenant(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListNetworks(ctx, req.(*network.ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetNetwork(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetNetwork(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteNetwork(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListVRFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.ListVRFsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListVRFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListVRFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListVRFs(ctx, req.(*network.ListVRFsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetVRF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetVRF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetVRF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetVRF(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetVRF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetVRF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetVRF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetVRF(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteVRF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteVRF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteVRF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteVRF(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_EnableVRFRelayService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).EnableVRFRelayService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/EnableVRFRelayService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).EnableVRFRelayService(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DisableVRFRelayService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DisableVRFRelayService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DisableVRFRelayService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DisableVRFRelayService(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetNetworkPolicy(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(object.NetworkPolicyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetNetworkPolicy(ctx, req.(*object.NetworkPolicyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteNetworkPolicy(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListRoutes(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GenerateNodeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.NodeInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GenerateNodeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GenerateNodeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GenerateNodeConfig(ctx, req.(*network.NodeInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListNodeMMIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListNodeMMIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListNodeMMIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListNodeMMIDs(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListNodes(ctx, req.(*network.ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetNode(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteNode(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ResetNodeNetworkTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ResetNodeNetworkTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ResetNodeNetworkTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ResetNodeNetworkTraffic(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteNetworkEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteNetworkEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteNetworkEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteNetworkEndpoint(ctx, req.(*network.Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListProjects(ctx, req.(*project.ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetProject(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetProject(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteProject(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListWorkflows(ctx, req.(*workflow.ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetWorkflow(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetWorkflow(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteWorkflow(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ActionWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.WorkflowAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ActionWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ActionWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ActionWorkflow(ctx, req.(*workflow.WorkflowAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.ListOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListOperations(ctx, req.(*workflow.ListOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetOperation(ctx, req.(*workflow.Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteOperation(ctx, req.(*workflow.Operation))
	}
	return interceptor(ctx, in, info, handler)
}

var _CoreAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CoreAPI",
	HandlerType: (*CoreAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResources",
			Handler:    _CoreAPI_ListResources_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _CoreAPI_EnableUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _CoreAPI_DisableUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _CoreAPI_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CoreAPI_GetUser_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _CoreAPI_SetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CoreAPI_DeleteUser_Handler,
		},
		{
			MethodName: "ResetUserPassword",
			Handler:    _CoreAPI_ResetUserPassword_Handler,
		},
		{
			MethodName: "SetUserCredentialsPassword",
			Handler:    _CoreAPI_SetUserCredentialsPassword_Handler,
		},
		{
			MethodName: "SetUserCredentialsSSH",
			Handler:    _CoreAPI_SetUserCredentialsSSH_Handler,
		},
		{
			MethodName: "SetUserCredentialsTOTP",
			Handler:    _CoreAPI_SetUserCredentialsTOTP_Handler,
		},
		{
			MethodName: "ListSecurityGroups",
			Handler:    _CoreAPI_ListSecurityGroups_Handler,
		},
		{
			MethodName: "GetSecurityGroup",
			Handler:    _CoreAPI_GetSecurityGroup_Handler,
		},
		{
			MethodName: "SetSecurityGroup",
			Handler:    _CoreAPI_SetSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteSecurityGroup",
			Handler:    _CoreAPI_DeleteSecurityGroup_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _CoreAPI_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _CoreAPI_GetRole_Handler,
		},
		{
			MethodName: "SetRole",
			Handler:    _CoreAPI_SetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _CoreAPI_DeleteRole_Handler,
		},
		{
			MethodName: "ListACLs",
			Handler:    _CoreAPI_ListACLs_Handler,
		},
		{
			MethodName: "GetACL",
			Handler:    _CoreAPI_GetACL_Handler,
		},
		{
			MethodName: "SetACL",
			Handler:    _CoreAPI_SetACL_Handler,
		},
		{
			MethodName: "DeleteACL",
			Handler:    _CoreAPI_DeleteACL_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _CoreAPI_ListTenants_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _CoreAPI_GetTenant_Handler,
		},
		{
			MethodName: "SetTenant",
			Handler:    _CoreAPI_SetTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _CoreAPI_DeleteTenant_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _CoreAPI_ListNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _CoreAPI_GetNetwork_Handler,
		},
		{
			MethodName: "SetNetwork",
			Handler:    _CoreAPI_SetNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _CoreAPI_DeleteNetwork_Handler,
		},
		{
			MethodName: "ListVRFs",
			Handler:    _CoreAPI_ListVRFs_Handler,
		},
		{
			MethodName: "GetVRF",
			Handler:    _CoreAPI_GetVRF_Handler,
		},
		{
			MethodName: "SetVRF",
			Handler:    _CoreAPI_SetVRF_Handler,
		},
		{
			MethodName: "DeleteVRF",
			Handler:    _CoreAPI_DeleteVRF_Handler,
		},
		{
			MethodName: "EnableVRFRelayService",
			Handler:    _CoreAPI_EnableVRFRelayService_Handler,
		},
		{
			MethodName: "DisableVRFRelayService",
			Handler:    _CoreAPI_DisableVRFRelayService_Handler,
		},
		{
			MethodName: "GetNetworkPolicy",
			Handler:    _CoreAPI_GetNetworkPolicy_Handler,
		},
		{
			MethodName: "SetNetworkPolicy",
			Handler:    _CoreAPI_SetNetworkPolicy_Handler,
		},
		{
			MethodName: "DeleteNetworkPolicy",
			Handler:    _CoreAPI_DeleteNetworkPolicy_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _CoreAPI_ListRoutes_Handler,
		},
		{
			MethodName: "GenerateNodeConfig",
			Handler:    _CoreAPI_GenerateNodeConfig_Handler,
		},
		{
			MethodName: "ListNodeMMIDs",
			Handler:    _CoreAPI_ListNodeMMIDs_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _CoreAPI_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _CoreAPI_GetNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _CoreAPI_DeleteNode_Handler,
		},
		{
			MethodName: "ResetNodeNetworkTraffic",
			Handler:    _CoreAPI_ResetNodeNetworkTraffic_Handler,
		},
		{
			MethodName: "DeleteNetworkEndpoint",
			Handler:    _CoreAPI_DeleteNetworkEndpoint_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _CoreAPI_ListProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _CoreAPI_GetProject_Handler,
		},
		{
			MethodName: "SetProject",
			Handler:    _CoreAPI_SetProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _CoreAPI_DeleteProject_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _CoreAPI_ListWorkflows_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _CoreAPI_GetWorkflow_Handler,
		},
		{
			MethodName: "SetWorkflow",
			Handler:    _CoreAPI_SetWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _CoreAPI_DeleteWorkflow_Handler,
		},
		{
			MethodName: "ActionWorkflow",
			Handler:    _CoreAPI_ActionWorkflow_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _CoreAPI_ListOperations_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _CoreAPI_GetOperation_Handler,
		},
		{
			MethodName: "DeleteOperation",
			Handler:    _CoreAPI_DeleteOperation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mmesh/protobuf/rpc/v1/coreAPI.proto",
}
