// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	status "mmesh.dev/m-api-go/grpc/common/status"
	dns "mmesh.dev/m-api-go/grpc/network/dns"
	natProbe "mmesh.dev/m-api-go/grpc/network/mmnp/natProbe"
	register "mmesh.dev/m-api-go/grpc/network/mmnp/register"
	routing "mmesh.dev/m-api-go/grpc/network/mmnp/routing"
	mmsp "mmesh.dev/m-api-go/grpc/network/mmsp"
	controller "mmesh.dev/m-api-go/grpc/resources/controller"
	metrics "mmesh.dev/m-api-go/grpc/resources/metrics"
	network "mmesh.dev/m-api-go/grpc/resources/network"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NetworkAPIClient is the client API for NetworkAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkAPIClient interface {
	NATProbe(ctx context.Context, in *natProbe.NATProbe, opts ...grpc.CallOption) (*natProbe.NATProbe, error)
	RegisterEndpoint(ctx context.Context, in *register.EndpointRegRequest, opts ...grpc.CallOption) (*register.EndpointRegResponse, error)
	RemoveEndpoint(ctx context.Context, in *register.EndpointRegRequest, opts ...grpc.CallOption) (*network.Node, error)
	RegisterNode(ctx context.Context, in *register.NodeRegRequest, opts ...grpc.CallOption) (*register.NodeRegResponse, error)
	DNS(ctx context.Context, in *dns.Host, opts ...grpc.CallOption) (*dns.IPv4, error)
	Routing(ctx context.Context, opts ...grpc.CallOption) (NetworkAPI_RoutingClient, error)
	// rpc RT(routing.RTRequest) returns (routing.RTResponse) {}
	Control(ctx context.Context, opts ...grpc.CallOption) (NetworkAPI_ControlClient, error)
	Metrics(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*status.StatusResponse, error)
	DataPointMetrics(ctx context.Context, in *metrics.DataPoints, opts ...grpc.CallOption) (*status.StatusResponse, error)
	FederationEndpoints(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*controller.FederationEndpoints, error)
}

type networkAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkAPIClient(cc grpc.ClientConnInterface) NetworkAPIClient {
	return &networkAPIClient{cc}
}

func (c *networkAPIClient) NATProbe(ctx context.Context, in *natProbe.NATProbe, opts ...grpc.CallOption) (*natProbe.NATProbe, error) {
	out := new(natProbe.NATProbe)
	err := c.cc.Invoke(ctx, "/network.NetworkAPI/NATProbe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIClient) RegisterEndpoint(ctx context.Context, in *register.EndpointRegRequest, opts ...grpc.CallOption) (*register.EndpointRegResponse, error) {
	out := new(register.EndpointRegResponse)
	err := c.cc.Invoke(ctx, "/network.NetworkAPI/RegisterEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIClient) RemoveEndpoint(ctx context.Context, in *register.EndpointRegRequest, opts ...grpc.CallOption) (*network.Node, error) {
	out := new(network.Node)
	err := c.cc.Invoke(ctx, "/network.NetworkAPI/RemoveEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIClient) RegisterNode(ctx context.Context, in *register.NodeRegRequest, opts ...grpc.CallOption) (*register.NodeRegResponse, error) {
	out := new(register.NodeRegResponse)
	err := c.cc.Invoke(ctx, "/network.NetworkAPI/RegisterNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIClient) DNS(ctx context.Context, in *dns.Host, opts ...grpc.CallOption) (*dns.IPv4, error) {
	out := new(dns.IPv4)
	err := c.cc.Invoke(ctx, "/network.NetworkAPI/DNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIClient) Routing(ctx context.Context, opts ...grpc.CallOption) (NetworkAPI_RoutingClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkAPI_ServiceDesc.Streams[0], "/network.NetworkAPI/Routing", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkAPIRoutingClient{stream}
	return x, nil
}

type NetworkAPI_RoutingClient interface {
	Send(*routing.RTRequest) error
	Recv() (*routing.RTResponse, error)
	grpc.ClientStream
}

type networkAPIRoutingClient struct {
	grpc.ClientStream
}

func (x *networkAPIRoutingClient) Send(m *routing.RTRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkAPIRoutingClient) Recv() (*routing.RTResponse, error) {
	m := new(routing.RTResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkAPIClient) Control(ctx context.Context, opts ...grpc.CallOption) (NetworkAPI_ControlClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkAPI_ServiceDesc.Streams[1], "/network.NetworkAPI/Control", opts...)
	if err != nil {
		return nil, err
	}
	x := &networkAPIControlClient{stream}
	return x, nil
}

type NetworkAPI_ControlClient interface {
	Send(*mmsp.Payload) error
	Recv() (*mmsp.Payload, error)
	grpc.ClientStream
}

type networkAPIControlClient struct {
	grpc.ClientStream
}

func (x *networkAPIControlClient) Send(m *mmsp.Payload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkAPIControlClient) Recv() (*mmsp.Payload, error) {
	m := new(mmsp.Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkAPIClient) Metrics(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/network.NetworkAPI/Metrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIClient) DataPointMetrics(ctx context.Context, in *metrics.DataPoints, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/network.NetworkAPI/DataPointMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkAPIClient) FederationEndpoints(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*controller.FederationEndpoints, error) {
	out := new(controller.FederationEndpoints)
	err := c.cc.Invoke(ctx, "/network.NetworkAPI/FederationEndpoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkAPIServer is the server API for NetworkAPI service.
// All implementations must embed UnimplementedNetworkAPIServer
// for forward compatibility
type NetworkAPIServer interface {
	NATProbe(context.Context, *natProbe.NATProbe) (*natProbe.NATProbe, error)
	RegisterEndpoint(context.Context, *register.EndpointRegRequest) (*register.EndpointRegResponse, error)
	RemoveEndpoint(context.Context, *register.EndpointRegRequest) (*network.Node, error)
	RegisterNode(context.Context, *register.NodeRegRequest) (*register.NodeRegResponse, error)
	DNS(context.Context, *dns.Host) (*dns.IPv4, error)
	Routing(NetworkAPI_RoutingServer) error
	// rpc RT(routing.RTRequest) returns (routing.RTResponse) {}
	Control(NetworkAPI_ControlServer) error
	Metrics(context.Context, *network.Node) (*status.StatusResponse, error)
	DataPointMetrics(context.Context, *metrics.DataPoints) (*status.StatusResponse, error)
	FederationEndpoints(context.Context, *network.Node) (*controller.FederationEndpoints, error)
	mustEmbedUnimplementedNetworkAPIServer()
}

// UnimplementedNetworkAPIServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkAPIServer struct {
}

func (UnimplementedNetworkAPIServer) NATProbe(context.Context, *natProbe.NATProbe) (*natProbe.NATProbe, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method NATProbe not implemented")
}
func (UnimplementedNetworkAPIServer) RegisterEndpoint(context.Context, *register.EndpointRegRequest) (*register.EndpointRegResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RegisterEndpoint not implemented")
}
func (UnimplementedNetworkAPIServer) RemoveEndpoint(context.Context, *register.EndpointRegRequest) (*network.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RemoveEndpoint not implemented")
}
func (UnimplementedNetworkAPIServer) RegisterNode(context.Context, *register.NodeRegRequest) (*register.NodeRegResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedNetworkAPIServer) DNS(context.Context, *dns.Host) (*dns.IPv4, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DNS not implemented")
}
func (UnimplementedNetworkAPIServer) Routing(NetworkAPI_RoutingServer) error {
	return status1.Errorf(codes.Unimplemented, "method Routing not implemented")
}
func (UnimplementedNetworkAPIServer) Control(NetworkAPI_ControlServer) error {
	return status1.Errorf(codes.Unimplemented, "method Control not implemented")
}
func (UnimplementedNetworkAPIServer) Metrics(context.Context, *network.Node) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Metrics not implemented")
}
func (UnimplementedNetworkAPIServer) DataPointMetrics(context.Context, *metrics.DataPoints) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DataPointMetrics not implemented")
}
func (UnimplementedNetworkAPIServer) FederationEndpoints(context.Context, *network.Node) (*controller.FederationEndpoints, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method FederationEndpoints not implemented")
}
func (UnimplementedNetworkAPIServer) mustEmbedUnimplementedNetworkAPIServer() {}

// UnsafeNetworkAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkAPIServer will
// result in compilation errors.
type UnsafeNetworkAPIServer interface {
	mustEmbedUnimplementedNetworkAPIServer()
}

func RegisterNetworkAPIServer(s grpc.ServiceRegistrar, srv NetworkAPIServer) {
	s.RegisterService(&NetworkAPI_ServiceDesc, srv)
}

func _NetworkAPI_NATProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(natProbe.NATProbe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIServer).NATProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkAPI/NATProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIServer).NATProbe(ctx, req.(*natProbe.NATProbe))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPI_RegisterEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(register.EndpointRegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIServer).RegisterEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkAPI/RegisterEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIServer).RegisterEndpoint(ctx, req.(*register.EndpointRegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPI_RemoveEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(register.EndpointRegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIServer).RemoveEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkAPI/RemoveEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIServer).RemoveEndpoint(ctx, req.(*register.EndpointRegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPI_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(register.NodeRegRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkAPI/RegisterNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIServer).RegisterNode(ctx, req.(*register.NodeRegRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPI_DNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dns.Host)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIServer).DNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkAPI/DNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIServer).DNS(ctx, req.(*dns.Host))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPI_Routing_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkAPIServer).Routing(&networkAPIRoutingServer{stream})
}

type NetworkAPI_RoutingServer interface {
	Send(*routing.RTResponse) error
	Recv() (*routing.RTRequest, error)
	grpc.ServerStream
}

type networkAPIRoutingServer struct {
	grpc.ServerStream
}

func (x *networkAPIRoutingServer) Send(m *routing.RTResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkAPIRoutingServer) Recv() (*routing.RTRequest, error) {
	m := new(routing.RTRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NetworkAPI_Control_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkAPIServer).Control(&networkAPIControlServer{stream})
}

type NetworkAPI_ControlServer interface {
	Send(*mmsp.Payload) error
	Recv() (*mmsp.Payload, error)
	grpc.ServerStream
}

type networkAPIControlServer struct {
	grpc.ServerStream
}

func (x *networkAPIControlServer) Send(m *mmsp.Payload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkAPIControlServer) Recv() (*mmsp.Payload, error) {
	m := new(mmsp.Payload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NetworkAPI_Metrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIServer).Metrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkAPI/Metrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIServer).Metrics(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPI_DataPointMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.DataPoints)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIServer).DataPointMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkAPI/DataPointMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIServer).DataPointMetrics(ctx, req.(*metrics.DataPoints))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkAPI_FederationEndpoints_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkAPIServer).FederationEndpoints(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.NetworkAPI/FederationEndpoints",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkAPIServer).FederationEndpoints(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkAPI_ServiceDesc is the grpc.ServiceDesc for NetworkAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.NetworkAPI",
	HandlerType: (*NetworkAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NATProbe",
			Handler:    _NetworkAPI_NATProbe_Handler,
		},
		{
			MethodName: "RegisterEndpoint",
			Handler:    _NetworkAPI_RegisterEndpoint_Handler,
		},
		{
			MethodName: "RemoveEndpoint",
			Handler:    _NetworkAPI_RemoveEndpoint_Handler,
		},
		{
			MethodName: "RegisterNode",
			Handler:    _NetworkAPI_RegisterNode_Handler,
		},
		{
			MethodName: "DNS",
			Handler:    _NetworkAPI_DNS_Handler,
		},
		{
			MethodName: "Metrics",
			Handler:    _NetworkAPI_Metrics_Handler,
		},
		{
			MethodName: "DataPointMetrics",
			Handler:    _NetworkAPI_DataPointMetrics_Handler,
		},
		{
			MethodName: "FederationEndpoints",
			Handler:    _NetworkAPI_FederationEndpoints_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Routing",
			Handler:       _NetworkAPI_Routing_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Control",
			Handler:       _NetworkAPI_Control_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mmesh/protobuf/rpc/v1/networkAPI.proto",
}
