// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	status "mmesh.dev/m-api-go/grpc/common/status"
	account "mmesh.dev/m-api-go/grpc/resources/account"
	billing "mmesh.dev/m-api-go/grpc/resources/billing"
	controller "mmesh.dev/m-api-go/grpc/resources/controller"
	iam "mmesh.dev/m-api-go/grpc/resources/iam"
	auth "mmesh.dev/m-api-go/grpc/resources/iam/auth"
	location "mmesh.dev/m-api-go/grpc/resources/location"
	webhook "mmesh.dev/m-api-go/grpc/resources/webhook"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProviderAPIClient is the client API for ProviderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProviderAPIClient interface {
	// login
	Login(ctx context.Context, in *auth.LoginRequest, opts ...grpc.CallOption) (*auth.LoginResponse, error)
	// webhook
	ListWebhooks(ctx context.Context, in *webhook.ListWebhooksRequest, opts ...grpc.CallOption) (*webhook.Webhooks, error)
	GetWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*webhook.Webhook, error)
	DeleteWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// location
	SelectLocation(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error)
	ListLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error)
	GetLocation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*location.Location, error)
	// controller federation
	SelectFederation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*controller.FederationSelected, error)
	ListFederations(ctx context.Context, in *controller.ListFederationsRequest, opts ...grpc.CallOption) (*controller.Federations, error)
	GetFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Federation, error)
	DeleteFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListControllers(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Controllers, error)
	GetController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*controller.Controller, error)
	DeleteController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// account
	SearchAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.SearchResponse, error)
	NewAccount(ctx context.Context, in *account.NewAccountRequest, opts ...grpc.CallOption) (*account.NewAccountResponse, error)
	SetupAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	ListAccounts(ctx context.Context, in *account.ListAccountsRequest, opts ...grpc.CallOption) (*account.Accounts, error)
	GetAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	GetAccountUsage(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Usage, error)
	GetAccountTraffic(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Traffic, error)
	UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	DeleteAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error)
	SetAccountIntegrations(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	EnableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	DisableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	SetAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	SuspendAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	UnsuspendAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	CancelAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	GetAccountCustomer(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*billing.Customer, error)
	SetAccountCustomer(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*billing.Customer, error)
	GetAccountAdmin(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.User, error)
	SetAccountAdmin(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	ResetAccountAdminPassword(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error)
}

type providerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderAPIClient(cc grpc.ClientConnInterface) ProviderAPIClient {
	return &providerAPIClient{cc}
}

func (c *providerAPIClient) Login(ctx context.Context, in *auth.LoginRequest, opts ...grpc.CallOption) (*auth.LoginResponse, error) {
	out := new(auth.LoginResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListWebhooks(ctx context.Context, in *webhook.ListWebhooksRequest, opts ...grpc.CallOption) (*webhook.Webhooks, error) {
	out := new(webhook.Webhooks)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*webhook.Webhook, error) {
	out := new(webhook.Webhook)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DeleteWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SelectLocation(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error) {
	out := new(location.Locations)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SelectLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error) {
	out := new(location.Locations)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetLocation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*location.Location, error) {
	out := new(location.Location)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SelectFederation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*controller.FederationSelected, error) {
	out := new(controller.FederationSelected)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SelectFederation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListFederations(ctx context.Context, in *controller.ListFederationsRequest, opts ...grpc.CallOption) (*controller.Federations, error) {
	out := new(controller.Federations)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListFederations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Federation, error) {
	out := new(controller.Federation)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetFederation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DeleteFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DeleteFederation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListControllers(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Controllers, error) {
	out := new(controller.Controllers)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*controller.Controller, error) {
	out := new(controller.Controller)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DeleteController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DeleteController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SearchAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.SearchResponse, error) {
	out := new(status.SearchResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SearchAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) NewAccount(ctx context.Context, in *account.NewAccountRequest, opts ...grpc.CallOption) (*account.NewAccountResponse, error) {
	out := new(account.NewAccountResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetupAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetupAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListAccounts(ctx context.Context, in *account.ListAccountsRequest, opts ...grpc.CallOption) (*account.Accounts, error) {
	out := new(account.Accounts)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetAccountUsage(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Usage, error) {
	out := new(account.Usage)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetAccountUsage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetAccountTraffic(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Traffic, error) {
	out := new(account.Traffic)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetAccountTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DeleteAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetAccountIntegrations(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetAccountIntegrations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) EnableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/EnableAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DisableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DisableAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SuspendAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SuspendAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) UnsuspendAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/UnsuspendAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) CancelAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/CancelAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetAccountCustomer(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*billing.Customer, error) {
	out := new(billing.Customer)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetAccountCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetAccountCustomer(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*billing.Customer, error) {
	out := new(billing.Customer)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetAccountCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetAccountAdmin(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetAccountAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetAccountAdmin(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetAccountAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ResetAccountAdminPassword(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ResetAccountAdminPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderAPIServer is the server API for ProviderAPI service.
// All implementations must embed UnimplementedProviderAPIServer
// for forward compatibility
type ProviderAPIServer interface {
	// login
	Login(context.Context, *auth.LoginRequest) (*auth.LoginResponse, error)
	// webhook
	ListWebhooks(context.Context, *webhook.ListWebhooksRequest) (*webhook.Webhooks, error)
	GetWebhook(context.Context, *webhook.Webhook) (*webhook.Webhook, error)
	DeleteWebhook(context.Context, *webhook.Webhook) (*status.StatusResponse, error)
	// location
	SelectLocation(context.Context, *location.ListLocationsRequest) (*location.Locations, error)
	ListLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error)
	GetLocation(context.Context, *location.Location) (*location.Location, error)
	// controller federation
	SelectFederation(context.Context, *location.Location) (*controller.FederationSelected, error)
	ListFederations(context.Context, *controller.ListFederationsRequest) (*controller.Federations, error)
	GetFederation(context.Context, *controller.Federation) (*controller.Federation, error)
	DeleteFederation(context.Context, *controller.Federation) (*status.StatusResponse, error)
	ListControllers(context.Context, *controller.Federation) (*controller.Controllers, error)
	GetController(context.Context, *controller.Controller) (*controller.Controller, error)
	DeleteController(context.Context, *controller.Controller) (*status.StatusResponse, error)
	// account
	SearchAccount(context.Context, *account.Account) (*status.SearchResponse, error)
	NewAccount(context.Context, *account.NewAccountRequest) (*account.NewAccountResponse, error)
	SetupAccount(context.Context, *account.Account) (*account.Account, error)
	ListAccounts(context.Context, *account.ListAccountsRequest) (*account.Accounts, error)
	GetAccount(context.Context, *account.Account) (*account.Account, error)
	GetAccountUsage(context.Context, *account.Account) (*account.Usage, error)
	GetAccountTraffic(context.Context, *account.Account) (*account.Traffic, error)
	UpdateAccount(context.Context, *account.Account) (*account.Account, error)
	DeleteAccount(context.Context, *account.Account) (*status.StatusResponse, error)
	SetAccountIntegrations(context.Context, *account.Account) (*account.Account, error)
	EnableAccount(context.Context, *account.Account) (*account.Account, error)
	DisableAccount(context.Context, *account.Account) (*account.Account, error)
	SetAccountService(context.Context, *account.Account) (*account.Account, error)
	SuspendAccountService(context.Context, *account.Account) (*account.Account, error)
	UnsuspendAccountService(context.Context, *account.Account) (*account.Account, error)
	CancelAccountService(context.Context, *account.Account) (*account.Account, error)
	GetAccountCustomer(context.Context, *account.Account) (*billing.Customer, error)
	SetAccountCustomer(context.Context, *account.Account) (*billing.Customer, error)
	GetAccountAdmin(context.Context, *account.Account) (*iam.User, error)
	SetAccountAdmin(context.Context, *iam.User) (*iam.User, error)
	ResetAccountAdminPassword(context.Context, *account.Account) (*status.StatusResponse, error)
	mustEmbedUnimplementedProviderAPIServer()
}

// UnimplementedProviderAPIServer must be embedded to have forward compatible implementations.
type UnimplementedProviderAPIServer struct {
}

func (UnimplementedProviderAPIServer) Login(context.Context, *auth.LoginRequest) (*auth.LoginResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedProviderAPIServer) ListWebhooks(context.Context, *webhook.ListWebhooksRequest) (*webhook.Webhooks, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (UnimplementedProviderAPIServer) GetWebhook(context.Context, *webhook.Webhook) (*webhook.Webhook, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWebhook not implemented")
}
func (UnimplementedProviderAPIServer) DeleteWebhook(context.Context, *webhook.Webhook) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (UnimplementedProviderAPIServer) SelectLocation(context.Context, *location.ListLocationsRequest) (*location.Locations, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SelectLocation not implemented")
}
func (UnimplementedProviderAPIServer) ListLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (UnimplementedProviderAPIServer) GetLocation(context.Context, *location.Location) (*location.Location, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (UnimplementedProviderAPIServer) SelectFederation(context.Context, *location.Location) (*controller.FederationSelected, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SelectFederation not implemented")
}
func (UnimplementedProviderAPIServer) ListFederations(context.Context, *controller.ListFederationsRequest) (*controller.Federations, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListFederations not implemented")
}
func (UnimplementedProviderAPIServer) GetFederation(context.Context, *controller.Federation) (*controller.Federation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetFederation not implemented")
}
func (UnimplementedProviderAPIServer) DeleteFederation(context.Context, *controller.Federation) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteFederation not implemented")
}
func (UnimplementedProviderAPIServer) ListControllers(context.Context, *controller.Federation) (*controller.Controllers, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllers not implemented")
}
func (UnimplementedProviderAPIServer) GetController(context.Context, *controller.Controller) (*controller.Controller, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetController not implemented")
}
func (UnimplementedProviderAPIServer) DeleteController(context.Context, *controller.Controller) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteController not implemented")
}
func (UnimplementedProviderAPIServer) SearchAccount(context.Context, *account.Account) (*status.SearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SearchAccount not implemented")
}
func (UnimplementedProviderAPIServer) NewAccount(context.Context, *account.NewAccountRequest) (*account.NewAccountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (UnimplementedProviderAPIServer) SetupAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetupAccount not implemented")
}
func (UnimplementedProviderAPIServer) ListAccounts(context.Context, *account.ListAccountsRequest) (*account.Accounts, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (UnimplementedProviderAPIServer) GetAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedProviderAPIServer) GetAccountUsage(context.Context, *account.Account) (*account.Usage, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAccountUsage not implemented")
}
func (UnimplementedProviderAPIServer) GetAccountTraffic(context.Context, *account.Account) (*account.Traffic, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAccountTraffic not implemented")
}
func (UnimplementedProviderAPIServer) UpdateAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedProviderAPIServer) DeleteAccount(context.Context, *account.Account) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (UnimplementedProviderAPIServer) SetAccountIntegrations(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetAccountIntegrations not implemented")
}
func (UnimplementedProviderAPIServer) EnableAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method EnableAccount not implemented")
}
func (UnimplementedProviderAPIServer) DisableAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DisableAccount not implemented")
}
func (UnimplementedProviderAPIServer) SetAccountService(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetAccountService not implemented")
}
func (UnimplementedProviderAPIServer) SuspendAccountService(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SuspendAccountService not implemented")
}
func (UnimplementedProviderAPIServer) UnsuspendAccountService(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UnsuspendAccountService not implemented")
}
func (UnimplementedProviderAPIServer) CancelAccountService(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelAccountService not implemented")
}
func (UnimplementedProviderAPIServer) GetAccountCustomer(context.Context, *account.Account) (*billing.Customer, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAccountCustomer not implemented")
}
func (UnimplementedProviderAPIServer) SetAccountCustomer(context.Context, *account.Account) (*billing.Customer, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetAccountCustomer not implemented")
}
func (UnimplementedProviderAPIServer) GetAccountAdmin(context.Context, *account.Account) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAccountAdmin not implemented")
}
func (UnimplementedProviderAPIServer) SetAccountAdmin(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetAccountAdmin not implemented")
}
func (UnimplementedProviderAPIServer) ResetAccountAdminPassword(context.Context, *account.Account) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ResetAccountAdminPassword not implemented")
}
func (UnimplementedProviderAPIServer) mustEmbedUnimplementedProviderAPIServer() {}

// UnsafeProviderAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProviderAPIServer will
// result in compilation errors.
type UnsafeProviderAPIServer interface {
	mustEmbedUnimplementedProviderAPIServer()
}

func RegisterProviderAPIServer(s grpc.ServiceRegistrar, srv ProviderAPIServer) {
	s.RegisterService(&ProviderAPI_ServiceDesc, srv)
}

func _ProviderAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).Login(ctx, req.(*auth.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(webhook.ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListWebhooks(ctx, req.(*webhook.ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(webhook.Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetWebhook(ctx, req.(*webhook.Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(webhook.Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DeleteWebhook(ctx, req.(*webhook.Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SelectLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SelectLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SelectLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SelectLocation(ctx, req.(*location.ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListLocations(ctx, req.(*location.ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetLocation(ctx, req.(*location.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SelectFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SelectFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SelectFederation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SelectFederation(ctx, req.(*location.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListFederations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.ListFederationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListFederations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListFederations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListFederations(ctx, req.(*controller.ListFederationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Federation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetFederation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetFederation(ctx, req.(*controller.Federation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DeleteFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Federation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DeleteFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DeleteFederation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DeleteFederation(ctx, req.(*controller.Federation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Federation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListControllers(ctx, req.(*controller.Federation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Controller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetController(ctx, req.(*controller.Controller))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DeleteController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Controller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DeleteController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DeleteController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DeleteController(ctx, req.(*controller.Controller))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SearchAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SearchAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SearchAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SearchAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.NewAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).NewAccount(ctx, req.(*account.NewAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetupAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetupAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetupAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetupAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListAccounts(ctx, req.(*account.ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetAccountUsage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetAccountUsage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetAccountUsage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetAccountUsage(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetAccountTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetAccountTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetAccountTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetAccountTraffic(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).UpdateAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DeleteAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetAccountIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetAccountIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetAccountIntegrations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetAccountIntegrations(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_EnableAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).EnableAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/EnableAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).EnableAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DisableAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DisableAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DisableAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DisableAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetAccountService(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SuspendAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SuspendAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SuspendAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SuspendAccountService(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_UnsuspendAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).UnsuspendAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/UnsuspendAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).UnsuspendAccountService(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_CancelAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).CancelAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/CancelAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).CancelAccountService(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetAccountCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetAccountCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetAccountCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetAccountCustomer(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetAccountCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetAccountCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetAccountCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetAccountCustomer(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetAccountAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetAccountAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetAccountAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetAccountAdmin(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetAccountAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetAccountAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetAccountAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetAccountAdmin(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ResetAccountAdminPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ResetAccountAdminPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ResetAccountAdminPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ResetAccountAdminPassword(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

// ProviderAPI_ServiceDesc is the grpc.ServiceDesc for ProviderAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProviderAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ProviderAPI",
	HandlerType: (*ProviderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ProviderAPI_Login_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _ProviderAPI_ListWebhooks_Handler,
		},
		{
			MethodName: "GetWebhook",
			Handler:    _ProviderAPI_GetWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _ProviderAPI_DeleteWebhook_Handler,
		},
		{
			MethodName: "SelectLocation",
			Handler:    _ProviderAPI_SelectLocation_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _ProviderAPI_ListLocations_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _ProviderAPI_GetLocation_Handler,
		},
		{
			MethodName: "SelectFederation",
			Handler:    _ProviderAPI_SelectFederation_Handler,
		},
		{
			MethodName: "ListFederations",
			Handler:    _ProviderAPI_ListFederations_Handler,
		},
		{
			MethodName: "GetFederation",
			Handler:    _ProviderAPI_GetFederation_Handler,
		},
		{
			MethodName: "DeleteFederation",
			Handler:    _ProviderAPI_DeleteFederation_Handler,
		},
		{
			MethodName: "ListControllers",
			Handler:    _ProviderAPI_ListControllers_Handler,
		},
		{
			MethodName: "GetController",
			Handler:    _ProviderAPI_GetController_Handler,
		},
		{
			MethodName: "DeleteController",
			Handler:    _ProviderAPI_DeleteController_Handler,
		},
		{
			MethodName: "SearchAccount",
			Handler:    _ProviderAPI_SearchAccount_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _ProviderAPI_NewAccount_Handler,
		},
		{
			MethodName: "SetupAccount",
			Handler:    _ProviderAPI_SetupAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _ProviderAPI_ListAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ProviderAPI_GetAccount_Handler,
		},
		{
			MethodName: "GetAccountUsage",
			Handler:    _ProviderAPI_GetAccountUsage_Handler,
		},
		{
			MethodName: "GetAccountTraffic",
			Handler:    _ProviderAPI_GetAccountTraffic_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _ProviderAPI_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _ProviderAPI_DeleteAccount_Handler,
		},
		{
			MethodName: "SetAccountIntegrations",
			Handler:    _ProviderAPI_SetAccountIntegrations_Handler,
		},
		{
			MethodName: "EnableAccount",
			Handler:    _ProviderAPI_EnableAccount_Handler,
		},
		{
			MethodName: "DisableAccount",
			Handler:    _ProviderAPI_DisableAccount_Handler,
		},
		{
			MethodName: "SetAccountService",
			Handler:    _ProviderAPI_SetAccountService_Handler,
		},
		{
			MethodName: "SuspendAccountService",
			Handler:    _ProviderAPI_SuspendAccountService_Handler,
		},
		{
			MethodName: "UnsuspendAccountService",
			Handler:    _ProviderAPI_UnsuspendAccountService_Handler,
		},
		{
			MethodName: "CancelAccountService",
			Handler:    _ProviderAPI_CancelAccountService_Handler,
		},
		{
			MethodName: "GetAccountCustomer",
			Handler:    _ProviderAPI_GetAccountCustomer_Handler,
		},
		{
			MethodName: "SetAccountCustomer",
			Handler:    _ProviderAPI_SetAccountCustomer_Handler,
		},
		{
			MethodName: "GetAccountAdmin",
			Handler:    _ProviderAPI_GetAccountAdmin_Handler,
		},
		{
			MethodName: "SetAccountAdmin",
			Handler:    _ProviderAPI_SetAccountAdmin_Handler,
		},
		{
			MethodName: "ResetAccountAdminPassword",
			Handler:    _ProviderAPI_ResetAccountAdminPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mmesh/protobuf/rpc/v1/providerAPI.proto",
}
