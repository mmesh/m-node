// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0--rc2
// source: mmesh/protobuf/rpc/v1/topologyAPI.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	status "mmesh.dev/m-api-go/grpc/common/status"
	topology "mmesh.dev/m-api-go/grpc/resources/topology"
	tss "mmesh.dev/m-api-go/grpc/resources/tss"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TopologyAPI_GetTopology_FullMethodName             = "/api.TopologyAPI/GetTopology"
	TopologyAPI_GetNodeSummaryMap_FullMethodName       = "/api.TopologyAPI/GetNodeSummaryMap"
	TopologyAPI_CreateNetwork_FullMethodName           = "/api.TopologyAPI/CreateNetwork"
	TopologyAPI_ListNetworks_FullMethodName            = "/api.TopologyAPI/ListNetworks"
	TopologyAPI_GetNetwork_FullMethodName              = "/api.TopologyAPI/GetNetwork"
	TopologyAPI_UpdateNetwork_FullMethodName           = "/api.TopologyAPI/UpdateNetwork"
	TopologyAPI_DeleteNetwork_FullMethodName           = "/api.TopologyAPI/DeleteNetwork"
	TopologyAPI_CreateSubnet_FullMethodName            = "/api.TopologyAPI/CreateSubnet"
	TopologyAPI_ListSubnets_FullMethodName             = "/api.TopologyAPI/ListSubnets"
	TopologyAPI_GetSubnet_FullMethodName               = "/api.TopologyAPI/GetSubnet"
	TopologyAPI_UpdateSubnet_FullMethodName            = "/api.TopologyAPI/UpdateSubnet"
	TopologyAPI_DeleteSubnet_FullMethodName            = "/api.TopologyAPI/DeleteSubnet"
	TopologyAPI_RemoveSubnetIPAMEntry_FullMethodName   = "/api.TopologyAPI/RemoveSubnetIPAMEntry"
	TopologyAPI_GetNetworkPolicy_FullMethodName        = "/api.TopologyAPI/GetNetworkPolicy"
	TopologyAPI_DeleteNetworkPolicy_FullMethodName     = "/api.TopologyAPI/DeleteNetworkPolicy"
	TopologyAPI_CreateNetworkFilter_FullMethodName     = "/api.TopologyAPI/CreateNetworkFilter"
	TopologyAPI_UpdateNetworkFilter_FullMethodName     = "/api.TopologyAPI/UpdateNetworkFilter"
	TopologyAPI_DeleteNetworkFilter_FullMethodName     = "/api.TopologyAPI/DeleteNetworkFilter"
	TopologyAPI_CreateGenericNode_FullMethodName       = "/api.TopologyAPI/CreateGenericNode"
	TopologyAPI_CreateKubernetesGateway_FullMethodName = "/api.TopologyAPI/CreateKubernetesGateway"
	TopologyAPI_CreateKubernetesPod_FullMethodName     = "/api.TopologyAPI/CreateKubernetesPod"
	TopologyAPI_ListNodesByTenant_FullMethodName       = "/api.TopologyAPI/ListNodesByTenant"
	TopologyAPI_ListNodesBySubnet_FullMethodName       = "/api.TopologyAPI/ListNodesBySubnet"
	TopologyAPI_GetNode_FullMethodName                 = "/api.TopologyAPI/GetNode"
	TopologyAPI_UpdateNodeMetadata_FullMethodName      = "/api.TopologyAPI/UpdateNodeMetadata"
	TopologyAPI_UpdateNodeNetworking_FullMethodName    = "/api.TopologyAPI/UpdateNodeNetworking"
	TopologyAPI_UpdateNodeManagement_FullMethodName    = "/api.TopologyAPI/UpdateNodeManagement"
	TopologyAPI_DeleteNode_FullMethodName              = "/api.TopologyAPI/DeleteNode"
	TopologyAPI_DeleteNetworkEndpoint_FullMethodName   = "/api.TopologyAPI/DeleteNetworkEndpoint"
	TopologyAPI_GetNodeMetrics_FullMethodName          = "/api.TopologyAPI/GetNodeMetrics"
)

// TopologyAPIClient is the client API for TopologyAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TopologyAPIClient interface {
	// topology
	GetTopology(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.Topology, error)
	GetNodeSummaryMap(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.NodeSummaryMap, error)
	// networks
	CreateNetwork(ctx context.Context, in *topology.NewNetworkRequest, opts ...grpc.CallOption) (*topology.Network, error)
	ListNetworks(ctx context.Context, in *topology.ListNetworksRequest, opts ...grpc.CallOption) (*topology.Networks, error)
	GetNetwork(ctx context.Context, in *topology.NetworkReq, opts ...grpc.CallOption) (*topology.Network, error)
	UpdateNetwork(ctx context.Context, in *topology.UpdateNetworkRequest, opts ...grpc.CallOption) (*topology.Network, error)
	DeleteNetwork(ctx context.Context, in *topology.NetworkReq, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// subnets
	CreateSubnet(ctx context.Context, in *topology.NewSubnetRequest, opts ...grpc.CallOption) (*topology.Subnet, error)
	ListSubnets(ctx context.Context, in *topology.ListSubnetsRequest, opts ...grpc.CallOption) (*topology.Subnets, error)
	GetSubnet(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Subnet, error)
	UpdateSubnet(ctx context.Context, in *topology.UpdateSubnetRequest, opts ...grpc.CallOption) (*topology.Subnet, error)
	DeleteSubnet(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*status.StatusResponse, error)
	RemoveSubnetIPAMEntry(ctx context.Context, in *topology.RemoveSubnetIPAMEntryRequest, opts ...grpc.CallOption) (*topology.Subnet, error)
	// network security policies
	GetNetworkPolicy(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Policy, error)
	DeleteNetworkPolicy(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Policy, error)
	// network security policies: network filters
	CreateNetworkFilter(ctx context.Context, in *topology.NewNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error)
	UpdateNetworkFilter(ctx context.Context, in *topology.UpdateNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error)
	DeleteNetworkFilter(ctx context.Context, in *topology.DeleteNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error)
	// nodes
	CreateGenericNode(ctx context.Context, in *topology.NewGenericNodeRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error)
	CreateKubernetesGateway(ctx context.Context, in *topology.NewK8SGatewayRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error)
	CreateKubernetesPod(ctx context.Context, in *topology.NewK8SPodRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error)
	ListNodesByTenant(ctx context.Context, in *topology.ListNodesByTenantRequest, opts ...grpc.CallOption) (*topology.Nodes, error)
	ListNodesBySubnet(ctx context.Context, in *topology.ListNodesBySubnetRequest, opts ...grpc.CallOption) (*topology.Nodes, error)
	GetNode(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*topology.Node, error)
	UpdateNodeMetadata(ctx context.Context, in *topology.UpdateNodeMetadataRequest, opts ...grpc.CallOption) (*topology.Node, error)
	UpdateNodeNetworking(ctx context.Context, in *topology.UpdateNodeNetworkingRequest, opts ...grpc.CallOption) (*topology.Node, error)
	UpdateNodeManagement(ctx context.Context, in *topology.UpdateNodeManagementRequest, opts ...grpc.CallOption) (*topology.Node, error)
	//	rpc UpdateNodeCfg (topology.UpdateNodeCfgRequest) returns (topology.Node) {
	//	  option (google.api.http) = {
	//	    patch: "/api/v1/accounts/{nodeReq.accountID}/tenants/{nodeReq.tenantID}/networks/{nodeReq.netID}/subnets/{nodeReq.subnetID}/nodes/{nodeReq.nodeID}:cfg"
	//	    body: "*"
	//	  };
	//	}
	DeleteNode(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*status.StatusResponse, error)
	DeleteNetworkEndpoint(ctx context.Context, in *topology.EndpointRequest, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// nodeMetrics
	GetNodeMetrics(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*tss.NodeMetrics, error)
}

type topologyAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewTopologyAPIClient(cc grpc.ClientConnInterface) TopologyAPIClient {
	return &topologyAPIClient{cc}
}

func (c *topologyAPIClient) GetTopology(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.Topology, error) {
	out := new(topology.Topology)
	err := c.cc.Invoke(ctx, TopologyAPI_GetTopology_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNodeSummaryMap(ctx context.Context, in *topology.TopologyRequest, opts ...grpc.CallOption) (*topology.NodeSummaryMap, error) {
	out := new(topology.NodeSummaryMap)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNodeSummaryMap_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateNetwork(ctx context.Context, in *topology.NewNetworkRequest, opts ...grpc.CallOption) (*topology.Network, error) {
	out := new(topology.Network)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) ListNetworks(ctx context.Context, in *topology.ListNetworksRequest, opts ...grpc.CallOption) (*topology.Networks, error) {
	out := new(topology.Networks)
	err := c.cc.Invoke(ctx, TopologyAPI_ListNetworks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNetwork(ctx context.Context, in *topology.NetworkReq, opts ...grpc.CallOption) (*topology.Network, error) {
	out := new(topology.Network)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNetwork(ctx context.Context, in *topology.UpdateNetworkRequest, opts ...grpc.CallOption) (*topology.Network, error) {
	out := new(topology.Network)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNetwork(ctx context.Context, in *topology.NetworkReq, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNetwork_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateSubnet(ctx context.Context, in *topology.NewSubnetRequest, opts ...grpc.CallOption) (*topology.Subnet, error) {
	out := new(topology.Subnet)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) ListSubnets(ctx context.Context, in *topology.ListSubnetsRequest, opts ...grpc.CallOption) (*topology.Subnets, error) {
	out := new(topology.Subnets)
	err := c.cc.Invoke(ctx, TopologyAPI_ListSubnets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetSubnet(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Subnet, error) {
	out := new(topology.Subnet)
	err := c.cc.Invoke(ctx, TopologyAPI_GetSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateSubnet(ctx context.Context, in *topology.UpdateSubnetRequest, opts ...grpc.CallOption) (*topology.Subnet, error) {
	out := new(topology.Subnet)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteSubnet(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteSubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) RemoveSubnetIPAMEntry(ctx context.Context, in *topology.RemoveSubnetIPAMEntryRequest, opts ...grpc.CallOption) (*topology.Subnet, error) {
	out := new(topology.Subnet)
	err := c.cc.Invoke(ctx, TopologyAPI_RemoveSubnetIPAMEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNetworkPolicy(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Policy, error) {
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNetworkPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNetworkPolicy(ctx context.Context, in *topology.SubnetReq, opts ...grpc.CallOption) (*topology.Policy, error) {
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNetworkPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateNetworkFilter(ctx context.Context, in *topology.NewNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error) {
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateNetworkFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNetworkFilter(ctx context.Context, in *topology.UpdateNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error) {
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNetworkFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNetworkFilter(ctx context.Context, in *topology.DeleteNetworkFilterRequest, opts ...grpc.CallOption) (*topology.Policy, error) {
	out := new(topology.Policy)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNetworkFilter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateGenericNode(ctx context.Context, in *topology.NewGenericNodeRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error) {
	out := new(topology.NodeInstance)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateGenericNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateKubernetesGateway(ctx context.Context, in *topology.NewK8SGatewayRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error) {
	out := new(topology.NodeInstance)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateKubernetesGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) CreateKubernetesPod(ctx context.Context, in *topology.NewK8SPodRequest, opts ...grpc.CallOption) (*topology.NodeInstance, error) {
	out := new(topology.NodeInstance)
	err := c.cc.Invoke(ctx, TopologyAPI_CreateKubernetesPod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) ListNodesByTenant(ctx context.Context, in *topology.ListNodesByTenantRequest, opts ...grpc.CallOption) (*topology.Nodes, error) {
	out := new(topology.Nodes)
	err := c.cc.Invoke(ctx, TopologyAPI_ListNodesByTenant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) ListNodesBySubnet(ctx context.Context, in *topology.ListNodesBySubnetRequest, opts ...grpc.CallOption) (*topology.Nodes, error) {
	out := new(topology.Nodes)
	err := c.cc.Invoke(ctx, TopologyAPI_ListNodesBySubnet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNode(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*topology.Node, error) {
	out := new(topology.Node)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNodeMetadata(ctx context.Context, in *topology.UpdateNodeMetadataRequest, opts ...grpc.CallOption) (*topology.Node, error) {
	out := new(topology.Node)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNodeMetadata_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNodeNetworking(ctx context.Context, in *topology.UpdateNodeNetworkingRequest, opts ...grpc.CallOption) (*topology.Node, error) {
	out := new(topology.Node)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNodeNetworking_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) UpdateNodeManagement(ctx context.Context, in *topology.UpdateNodeManagementRequest, opts ...grpc.CallOption) (*topology.Node, error) {
	out := new(topology.Node)
	err := c.cc.Invoke(ctx, TopologyAPI_UpdateNodeManagement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNode(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) DeleteNetworkEndpoint(ctx context.Context, in *topology.EndpointRequest, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, TopologyAPI_DeleteNetworkEndpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyAPIClient) GetNodeMetrics(ctx context.Context, in *topology.NodeReq, opts ...grpc.CallOption) (*tss.NodeMetrics, error) {
	out := new(tss.NodeMetrics)
	err := c.cc.Invoke(ctx, TopologyAPI_GetNodeMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TopologyAPIServer is the server API for TopologyAPI service.
// All implementations must embed UnimplementedTopologyAPIServer
// for forward compatibility
type TopologyAPIServer interface {
	// topology
	GetTopology(context.Context, *topology.TopologyRequest) (*topology.Topology, error)
	GetNodeSummaryMap(context.Context, *topology.TopologyRequest) (*topology.NodeSummaryMap, error)
	// networks
	CreateNetwork(context.Context, *topology.NewNetworkRequest) (*topology.Network, error)
	ListNetworks(context.Context, *topology.ListNetworksRequest) (*topology.Networks, error)
	GetNetwork(context.Context, *topology.NetworkReq) (*topology.Network, error)
	UpdateNetwork(context.Context, *topology.UpdateNetworkRequest) (*topology.Network, error)
	DeleteNetwork(context.Context, *topology.NetworkReq) (*status.StatusResponse, error)
	// subnets
	CreateSubnet(context.Context, *topology.NewSubnetRequest) (*topology.Subnet, error)
	ListSubnets(context.Context, *topology.ListSubnetsRequest) (*topology.Subnets, error)
	GetSubnet(context.Context, *topology.SubnetReq) (*topology.Subnet, error)
	UpdateSubnet(context.Context, *topology.UpdateSubnetRequest) (*topology.Subnet, error)
	DeleteSubnet(context.Context, *topology.SubnetReq) (*status.StatusResponse, error)
	RemoveSubnetIPAMEntry(context.Context, *topology.RemoveSubnetIPAMEntryRequest) (*topology.Subnet, error)
	// network security policies
	GetNetworkPolicy(context.Context, *topology.SubnetReq) (*topology.Policy, error)
	DeleteNetworkPolicy(context.Context, *topology.SubnetReq) (*topology.Policy, error)
	// network security policies: network filters
	CreateNetworkFilter(context.Context, *topology.NewNetworkFilterRequest) (*topology.Policy, error)
	UpdateNetworkFilter(context.Context, *topology.UpdateNetworkFilterRequest) (*topology.Policy, error)
	DeleteNetworkFilter(context.Context, *topology.DeleteNetworkFilterRequest) (*topology.Policy, error)
	// nodes
	CreateGenericNode(context.Context, *topology.NewGenericNodeRequest) (*topology.NodeInstance, error)
	CreateKubernetesGateway(context.Context, *topology.NewK8SGatewayRequest) (*topology.NodeInstance, error)
	CreateKubernetesPod(context.Context, *topology.NewK8SPodRequest) (*topology.NodeInstance, error)
	ListNodesByTenant(context.Context, *topology.ListNodesByTenantRequest) (*topology.Nodes, error)
	ListNodesBySubnet(context.Context, *topology.ListNodesBySubnetRequest) (*topology.Nodes, error)
	GetNode(context.Context, *topology.NodeReq) (*topology.Node, error)
	UpdateNodeMetadata(context.Context, *topology.UpdateNodeMetadataRequest) (*topology.Node, error)
	UpdateNodeNetworking(context.Context, *topology.UpdateNodeNetworkingRequest) (*topology.Node, error)
	UpdateNodeManagement(context.Context, *topology.UpdateNodeManagementRequest) (*topology.Node, error)
	//	rpc UpdateNodeCfg (topology.UpdateNodeCfgRequest) returns (topology.Node) {
	//	  option (google.api.http) = {
	//	    patch: "/api/v1/accounts/{nodeReq.accountID}/tenants/{nodeReq.tenantID}/networks/{nodeReq.netID}/subnets/{nodeReq.subnetID}/nodes/{nodeReq.nodeID}:cfg"
	//	    body: "*"
	//	  };
	//	}
	DeleteNode(context.Context, *topology.NodeReq) (*status.StatusResponse, error)
	DeleteNetworkEndpoint(context.Context, *topology.EndpointRequest) (*status.StatusResponse, error)
	// nodeMetrics
	GetNodeMetrics(context.Context, *topology.NodeReq) (*tss.NodeMetrics, error)
	mustEmbedUnimplementedTopologyAPIServer()
}

// UnimplementedTopologyAPIServer must be embedded to have forward compatible implementations.
type UnimplementedTopologyAPIServer struct {
}

func (UnimplementedTopologyAPIServer) GetTopology(context.Context, *topology.TopologyRequest) (*topology.Topology, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTopology not implemented")
}
func (UnimplementedTopologyAPIServer) GetNodeSummaryMap(context.Context, *topology.TopologyRequest) (*topology.NodeSummaryMap, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNodeSummaryMap not implemented")
}
func (UnimplementedTopologyAPIServer) CreateNetwork(context.Context, *topology.NewNetworkRequest) (*topology.Network, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNetwork not implemented")
}
func (UnimplementedTopologyAPIServer) ListNetworks(context.Context, *topology.ListNetworksRequest) (*topology.Networks, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedTopologyAPIServer) GetNetwork(context.Context, *topology.NetworkReq) (*topology.Network, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNetwork(context.Context, *topology.UpdateNetworkRequest) (*topology.Network, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNetwork not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNetwork(context.Context, *topology.NetworkReq) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedTopologyAPIServer) CreateSubnet(context.Context, *topology.NewSubnetRequest) (*topology.Subnet, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateSubnet not implemented")
}
func (UnimplementedTopologyAPIServer) ListSubnets(context.Context, *topology.ListSubnetsRequest) (*topology.Subnets, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSubnets not implemented")
}
func (UnimplementedTopologyAPIServer) GetSubnet(context.Context, *topology.SubnetReq) (*topology.Subnet, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateSubnet(context.Context, *topology.UpdateSubnetRequest) (*topology.Subnet, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteSubnet(context.Context, *topology.SubnetReq) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}
func (UnimplementedTopologyAPIServer) RemoveSubnetIPAMEntry(context.Context, *topology.RemoveSubnetIPAMEntryRequest) (*topology.Subnet, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RemoveSubnetIPAMEntry not implemented")
}
func (UnimplementedTopologyAPIServer) GetNetworkPolicy(context.Context, *topology.SubnetReq) (*topology.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNetworkPolicy not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNetworkPolicy(context.Context, *topology.SubnetReq) (*topology.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetworkPolicy not implemented")
}
func (UnimplementedTopologyAPIServer) CreateNetworkFilter(context.Context, *topology.NewNetworkFilterRequest) (*topology.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNetworkFilter not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNetworkFilter(context.Context, *topology.UpdateNetworkFilterRequest) (*topology.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNetworkFilter not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNetworkFilter(context.Context, *topology.DeleteNetworkFilterRequest) (*topology.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetworkFilter not implemented")
}
func (UnimplementedTopologyAPIServer) CreateGenericNode(context.Context, *topology.NewGenericNodeRequest) (*topology.NodeInstance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateGenericNode not implemented")
}
func (UnimplementedTopologyAPIServer) CreateKubernetesGateway(context.Context, *topology.NewK8SGatewayRequest) (*topology.NodeInstance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateKubernetesGateway not implemented")
}
func (UnimplementedTopologyAPIServer) CreateKubernetesPod(context.Context, *topology.NewK8SPodRequest) (*topology.NodeInstance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateKubernetesPod not implemented")
}
func (UnimplementedTopologyAPIServer) ListNodesByTenant(context.Context, *topology.ListNodesByTenantRequest) (*topology.Nodes, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodesByTenant not implemented")
}
func (UnimplementedTopologyAPIServer) ListNodesBySubnet(context.Context, *topology.ListNodesBySubnetRequest) (*topology.Nodes, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodesBySubnet not implemented")
}
func (UnimplementedTopologyAPIServer) GetNode(context.Context, *topology.NodeReq) (*topology.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNodeMetadata(context.Context, *topology.UpdateNodeMetadataRequest) (*topology.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNodeMetadata not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNodeNetworking(context.Context, *topology.UpdateNodeNetworkingRequest) (*topology.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNodeNetworking not implemented")
}
func (UnimplementedTopologyAPIServer) UpdateNodeManagement(context.Context, *topology.UpdateNodeManagementRequest) (*topology.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateNodeManagement not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNode(context.Context, *topology.NodeReq) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedTopologyAPIServer) DeleteNetworkEndpoint(context.Context, *topology.EndpointRequest) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetworkEndpoint not implemented")
}
func (UnimplementedTopologyAPIServer) GetNodeMetrics(context.Context, *topology.NodeReq) (*tss.NodeMetrics, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNodeMetrics not implemented")
}
func (UnimplementedTopologyAPIServer) mustEmbedUnimplementedTopologyAPIServer() {}

// UnsafeTopologyAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TopologyAPIServer will
// result in compilation errors.
type UnsafeTopologyAPIServer interface {
	mustEmbedUnimplementedTopologyAPIServer()
}

func RegisterTopologyAPIServer(s grpc.ServiceRegistrar, srv TopologyAPIServer) {
	s.RegisterService(&TopologyAPI_ServiceDesc, srv)
}

func _TopologyAPI_GetTopology_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetTopology(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetTopology_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetTopology(ctx, req.(*topology.TopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNodeSummaryMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.TopologyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNodeSummaryMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNodeSummaryMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNodeSummaryMap(ctx, req.(*topology.TopologyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateNetwork(ctx, req.(*topology.NewNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_ListNetworks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).ListNetworks(ctx, req.(*topology.ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NetworkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNetwork(ctx, req.(*topology.NetworkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNetworkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNetwork(ctx, req.(*topology.UpdateNetworkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NetworkReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNetwork(ctx, req.(*topology.NetworkReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateSubnet(ctx, req.(*topology.NewSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_ListSubnets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.ListSubnetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).ListSubnets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_ListSubnets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).ListSubnets(ctx, req.(*topology.ListSubnetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.SubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetSubnet(ctx, req.(*topology.SubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateSubnet(ctx, req.(*topology.UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.SubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteSubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteSubnet(ctx, req.(*topology.SubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_RemoveSubnetIPAMEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.RemoveSubnetIPAMEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).RemoveSubnetIPAMEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_RemoveSubnetIPAMEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).RemoveSubnetIPAMEntry(ctx, req.(*topology.RemoveSubnetIPAMEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.SubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNetworkPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNetworkPolicy(ctx, req.(*topology.SubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.SubnetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNetworkPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNetworkPolicy(ctx, req.(*topology.SubnetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateNetworkFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewNetworkFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateNetworkFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateNetworkFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateNetworkFilter(ctx, req.(*topology.NewNetworkFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNetworkFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNetworkFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNetworkFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNetworkFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNetworkFilter(ctx, req.(*topology.UpdateNetworkFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNetworkFilter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.DeleteNetworkFilterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNetworkFilter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNetworkFilter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNetworkFilter(ctx, req.(*topology.DeleteNetworkFilterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateGenericNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewGenericNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateGenericNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateGenericNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateGenericNode(ctx, req.(*topology.NewGenericNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateKubernetesGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewK8SGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateKubernetesGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateKubernetesGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateKubernetesGateway(ctx, req.(*topology.NewK8SGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_CreateKubernetesPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NewK8SPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).CreateKubernetesPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_CreateKubernetesPod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).CreateKubernetesPod(ctx, req.(*topology.NewK8SPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_ListNodesByTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.ListNodesByTenantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).ListNodesByTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_ListNodesByTenant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).ListNodesByTenant(ctx, req.(*topology.ListNodesByTenantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_ListNodesBySubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.ListNodesBySubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).ListNodesBySubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_ListNodesBySubnet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).ListNodesBySubnet(ctx, req.(*topology.ListNodesBySubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNode(ctx, req.(*topology.NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNodeMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNodeMetadataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNodeMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNodeMetadata_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNodeMetadata(ctx, req.(*topology.UpdateNodeMetadataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNodeNetworking_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNodeNetworkingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNodeNetworking(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNodeNetworking_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNodeNetworking(ctx, req.(*topology.UpdateNodeNetworkingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_UpdateNodeManagement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.UpdateNodeManagementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).UpdateNodeManagement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_UpdateNodeManagement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).UpdateNodeManagement(ctx, req.(*topology.UpdateNodeManagementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNode(ctx, req.(*topology.NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_DeleteNetworkEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.EndpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).DeleteNetworkEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_DeleteNetworkEndpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).DeleteNetworkEndpoint(ctx, req.(*topology.EndpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TopologyAPI_GetNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(topology.NodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyAPIServer).GetNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TopologyAPI_GetNodeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyAPIServer).GetNodeMetrics(ctx, req.(*topology.NodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TopologyAPI_ServiceDesc is the grpc.ServiceDesc for TopologyAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TopologyAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.TopologyAPI",
	HandlerType: (*TopologyAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTopology",
			Handler:    _TopologyAPI_GetTopology_Handler,
		},
		{
			MethodName: "GetNodeSummaryMap",
			Handler:    _TopologyAPI_GetNodeSummaryMap_Handler,
		},
		{
			MethodName: "CreateNetwork",
			Handler:    _TopologyAPI_CreateNetwork_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _TopologyAPI_ListNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _TopologyAPI_GetNetwork_Handler,
		},
		{
			MethodName: "UpdateNetwork",
			Handler:    _TopologyAPI_UpdateNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _TopologyAPI_DeleteNetwork_Handler,
		},
		{
			MethodName: "CreateSubnet",
			Handler:    _TopologyAPI_CreateSubnet_Handler,
		},
		{
			MethodName: "ListSubnets",
			Handler:    _TopologyAPI_ListSubnets_Handler,
		},
		{
			MethodName: "GetSubnet",
			Handler:    _TopologyAPI_GetSubnet_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _TopologyAPI_UpdateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _TopologyAPI_DeleteSubnet_Handler,
		},
		{
			MethodName: "RemoveSubnetIPAMEntry",
			Handler:    _TopologyAPI_RemoveSubnetIPAMEntry_Handler,
		},
		{
			MethodName: "GetNetworkPolicy",
			Handler:    _TopologyAPI_GetNetworkPolicy_Handler,
		},
		{
			MethodName: "DeleteNetworkPolicy",
			Handler:    _TopologyAPI_DeleteNetworkPolicy_Handler,
		},
		{
			MethodName: "CreateNetworkFilter",
			Handler:    _TopologyAPI_CreateNetworkFilter_Handler,
		},
		{
			MethodName: "UpdateNetworkFilter",
			Handler:    _TopologyAPI_UpdateNetworkFilter_Handler,
		},
		{
			MethodName: "DeleteNetworkFilter",
			Handler:    _TopologyAPI_DeleteNetworkFilter_Handler,
		},
		{
			MethodName: "CreateGenericNode",
			Handler:    _TopologyAPI_CreateGenericNode_Handler,
		},
		{
			MethodName: "CreateKubernetesGateway",
			Handler:    _TopologyAPI_CreateKubernetesGateway_Handler,
		},
		{
			MethodName: "CreateKubernetesPod",
			Handler:    _TopologyAPI_CreateKubernetesPod_Handler,
		},
		{
			MethodName: "ListNodesByTenant",
			Handler:    _TopologyAPI_ListNodesByTenant_Handler,
		},
		{
			MethodName: "ListNodesBySubnet",
			Handler:    _TopologyAPI_ListNodesBySubnet_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _TopologyAPI_GetNode_Handler,
		},
		{
			MethodName: "UpdateNodeMetadata",
			Handler:    _TopologyAPI_UpdateNodeMetadata_Handler,
		},
		{
			MethodName: "UpdateNodeNetworking",
			Handler:    _TopologyAPI_UpdateNodeNetworking_Handler,
		},
		{
			MethodName: "UpdateNodeManagement",
			Handler:    _TopologyAPI_UpdateNodeManagement_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _TopologyAPI_DeleteNode_Handler,
		},
		{
			MethodName: "DeleteNetworkEndpoint",
			Handler:    _TopologyAPI_DeleteNetworkEndpoint_Handler,
		},
		{
			MethodName: "GetNodeMetrics",
			Handler:    _TopologyAPI_GetNodeMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mmesh/protobuf/rpc/v1/topologyAPI.proto",
}
