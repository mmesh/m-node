// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	empty "mmesh.dev/m-api-go/grpc/common/empty"
	status "mmesh.dev/m-api-go/grpc/common/status"
	routing "mmesh.dev/m-api-go/grpc/network/mmnp/routing"
	account "mmesh.dev/m-api-go/grpc/resources/account"
	events "mmesh.dev/m-api-go/grpc/resources/events"
	iam "mmesh.dev/m-api-go/grpc/resources/iam"
	metrics "mmesh.dev/m-api-go/grpc/resources/metrics"
	network "mmesh.dev/m-api-go/grpc/resources/network"
	object "mmesh.dev/m-api-go/grpc/resources/ops/object"
	project "mmesh.dev/m-api-go/grpc/resources/ops/project"
	workflow "mmesh.dev/m-api-go/grpc/resources/ops/workflow"
	resource "mmesh.dev/m-api-go/grpc/resources/resource"
	tenant "mmesh.dev/m-api-go/grpc/resources/tenant"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoreAPIClient is the client API for CoreAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoreAPIClient interface {
	// iam
	ListIAMPermissions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*iam.Permissions, error)
	CreateUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	ListUsers(ctx context.Context, in *iam.ListUsersRequest, opts ...grpc.CallOption) (*iam.Users, error)
	GetUser(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.User, error)
	//   rpc SetUser(iam.User) returns (iam.User) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/iam/users/{email}"
	//       body: "*"
	//     };
	//   }
	DeleteUser(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*status.StatusResponse, error)
	EnableUser(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.User, error)
	DisableUser(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.User, error)
	SetUserEmail(ctx context.Context, in *iam.SetUserEmailRequest, opts ...grpc.CallOption) (*iam.User, error)
	//   rpc ResetUserPassword(iam.UserRequest) returns (status.StatusResponse) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/iam/users/{email}:password-reset"
	//       body: "*"
	//     };
	//   }
	SetUserCredentialsPassword(ctx context.Context, in *iam.SetUserCredentialsPasswordRequest, opts ...grpc.CallOption) (*iam.User, error)
	SetUserCredentialsSSH(ctx context.Context, in *iam.SetUserCredentialsSSHRequest, opts ...grpc.CallOption) (*iam.User, error)
	DeleteUserCredentialsSSH(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.User, error)
	SetUserCredentialsTOTP(ctx context.Context, in *iam.SetUserCredentialsTOTPRequest, opts ...grpc.CallOption) (*iam.User, error)
	SetUserSSHKeys(ctx context.Context, in *iam.SetUserSSHKeysRequest, opts ...grpc.CallOption) (*iam.User, error)
	GetUserSSHKeys(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.UserSSHKeys, error)
	SetUserPermissions(ctx context.Context, in *iam.SetUserPermissionsRequest, opts ...grpc.CallOption) (*iam.User, error)
	ListSecurityGroups(ctx context.Context, in *iam.ListSecurityGroupsRequest, opts ...grpc.CallOption) (*iam.SecurityGroups, error)
	GetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error)
	SetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error)
	DeleteSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListRoles(ctx context.Context, in *iam.ListRolesRequest, opts ...grpc.CallOption) (*iam.Roles, error)
	GetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error)
	SetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error)
	DeleteRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListACLs(ctx context.Context, in *iam.ListACLsRequest, opts ...grpc.CallOption) (*iam.ACLs, error)
	GetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error)
	SetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error)
	DeleteACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// tenants
	ListTenants(ctx context.Context, in *tenant.ListTenantsRequest, opts ...grpc.CallOption) (*tenant.Tenants, error)
	GetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error)
	SetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error)
	DeleteTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// networks
	ListNetworks(ctx context.Context, in *network.ListNetworksRequest, opts ...grpc.CallOption) (*network.Networks, error)
	GetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error)
	SetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error)
	DeleteNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// VRFs (subnets)
	ListVRFs(ctx context.Context, in *network.ListVRFsRequest, opts ...grpc.CallOption) (*network.VRFs, error)
	GetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error)
	SetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error)
	DeleteVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// network policies
	GetNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error)
	SetNetworkPolicy(ctx context.Context, in *object.NetworkPolicyConfigRequest, opts ...grpc.CallOption) (*network.Policy, error)
	DeleteNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error)
	// routes
	ListRoutes(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*routing.RoutingTable, error)
	// nodes
	CreateGenericNode(ctx context.Context, in *network.NodeInstanceRequest, opts ...grpc.CallOption) (*network.NodeInstance, error)
	CreateKubernetesGateway(ctx context.Context, in *network.NodeInstanceRequest, opts ...grpc.CallOption) (*network.NodeInstance, error)
	CreateNodeInstallLinuxWebhook(ctx context.Context, in *network.NodeInstanceRequest, opts ...grpc.CallOption) (*network.NodeInstance, error)
	ListNodeMMIDs(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*network.MMIDs, error)
	ListNodes(ctx context.Context, in *network.ListNodesRequest, opts ...grpc.CallOption) (*network.Nodes, error)
	GetNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error)
	// rpc SetNode (network.Node) returns (network.Node) {}
	DeleteNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// rpc ResetNodeNetworkTraffic(network.Node) returns (network.Node) {}
	// rpc GetNetworkEndpoint(network.Endpoint) returns (blob.Blob) {}
	DeleteNetworkEndpoint(ctx context.Context, in *network.Endpoint, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// projects
	ListProjects(ctx context.Context, in *project.ListProjectsRequest, opts ...grpc.CallOption) (*project.Projects, error)
	GetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error)
	SetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error)
	DeleteProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// workflows
	ListWorkflows(ctx context.Context, in *workflow.ListWorkflowsRequest, opts ...grpc.CallOption) (*workflow.Workflows, error)
	GetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error)
	SetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error)
	DeleteWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ActionWorkflow(ctx context.Context, in *workflow.WorkflowAction, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// operations
	ListOperations(ctx context.Context, in *workflow.ListOperationsRequest, opts ...grpc.CallOption) (*workflow.Operations, error)
	GetOperation(ctx context.Context, in *workflow.Operation, opts ...grpc.CallOption) (*workflow.Operation, error)
	// rpc SetOperation (operation.Operation) returns (status.StatusResponse) {}
	DeleteOperation(ctx context.Context, in *workflow.Operation, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// alerts
	ListAlerts(ctx context.Context, in *events.ListAlertsRequest, opts ...grpc.CallOption) (*events.Alerts, error)
	GetAlert(ctx context.Context, in *events.Alert, opts ...grpc.CallOption) (*events.Alert, error)
	// rpc SetAlert (events.Alert) returns (events.Alert) {}
	NewAlertComment(ctx context.Context, in *events.AlertNewCommentRequest, opts ...grpc.CallOption) (*events.Alert, error)
	DeleteAlert(ctx context.Context, in *events.Alert, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// metrics
	MetricsQuery(ctx context.Context, in *metrics.InfluxQuery, opts ...grpc.CallOption) (*metrics.InfluxQueryResult, error)
	// data queries
	DataQuery(ctx context.Context, in *resource.MongoQuery, opts ...grpc.CallOption) (*resource.MongoQueryResult, error)
}

type coreAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewCoreAPIClient(cc grpc.ClientConnInterface) CoreAPIClient {
	return &coreAPIClient{cc}
}

func (c *coreAPIClient) ListIAMPermissions(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*iam.Permissions, error) {
	out := new(iam.Permissions)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListIAMPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) CreateUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListUsers(ctx context.Context, in *iam.ListUsersRequest, opts ...grpc.CallOption) (*iam.Users, error) {
	out := new(iam.Users)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetUser(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteUser(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) EnableUser(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/EnableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DisableUser(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DisableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUserEmail(ctx context.Context, in *iam.SetUserEmailRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUserEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUserCredentialsPassword(ctx context.Context, in *iam.SetUserCredentialsPasswordRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUserCredentialsPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUserCredentialsSSH(ctx context.Context, in *iam.SetUserCredentialsSSHRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUserCredentialsSSH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteUserCredentialsSSH(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteUserCredentialsSSH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUserCredentialsTOTP(ctx context.Context, in *iam.SetUserCredentialsTOTPRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUserCredentialsTOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUserSSHKeys(ctx context.Context, in *iam.SetUserSSHKeysRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUserSSHKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetUserSSHKeys(ctx context.Context, in *iam.UserRequest, opts ...grpc.CallOption) (*iam.UserSSHKeys, error) {
	out := new(iam.UserSSHKeys)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetUserSSHKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetUserPermissions(ctx context.Context, in *iam.SetUserPermissionsRequest, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetUserPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListSecurityGroups(ctx context.Context, in *iam.ListSecurityGroupsRequest, opts ...grpc.CallOption) (*iam.SecurityGroups, error) {
	out := new(iam.SecurityGroups)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListSecurityGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error) {
	out := new(iam.SecurityGroup)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error) {
	out := new(iam.SecurityGroup)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListRoles(ctx context.Context, in *iam.ListRolesRequest, opts ...grpc.CallOption) (*iam.Roles, error) {
	out := new(iam.Roles)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error) {
	out := new(iam.Role)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error) {
	out := new(iam.Role)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListACLs(ctx context.Context, in *iam.ListACLsRequest, opts ...grpc.CallOption) (*iam.ACLs, error) {
	out := new(iam.ACLs)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListACLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error) {
	out := new(iam.ACL)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error) {
	out := new(iam.ACL)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListTenants(ctx context.Context, in *tenant.ListTenantsRequest, opts ...grpc.CallOption) (*tenant.Tenants, error) {
	out := new(tenant.Tenants)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error) {
	out := new(tenant.Tenant)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error) {
	out := new(tenant.Tenant)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListNetworks(ctx context.Context, in *network.ListNetworksRequest, opts ...grpc.CallOption) (*network.Networks, error) {
	out := new(network.Networks)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error) {
	out := new(network.Network)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error) {
	out := new(network.Network)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListVRFs(ctx context.Context, in *network.ListVRFsRequest, opts ...grpc.CallOption) (*network.VRFs, error) {
	out := new(network.VRFs)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListVRFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error) {
	out := new(network.VRF)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetVRF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error) {
	out := new(network.VRF)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetVRF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteVRF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error) {
	out := new(network.Policy)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetNetworkPolicy(ctx context.Context, in *object.NetworkPolicyConfigRequest, opts ...grpc.CallOption) (*network.Policy, error) {
	out := new(network.Policy)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error) {
	out := new(network.Policy)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListRoutes(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*routing.RoutingTable, error) {
	out := new(routing.RoutingTable)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) CreateGenericNode(ctx context.Context, in *network.NodeInstanceRequest, opts ...grpc.CallOption) (*network.NodeInstance, error) {
	out := new(network.NodeInstance)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/CreateGenericNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) CreateKubernetesGateway(ctx context.Context, in *network.NodeInstanceRequest, opts ...grpc.CallOption) (*network.NodeInstance, error) {
	out := new(network.NodeInstance)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/CreateKubernetesGateway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) CreateNodeInstallLinuxWebhook(ctx context.Context, in *network.NodeInstanceRequest, opts ...grpc.CallOption) (*network.NodeInstance, error) {
	out := new(network.NodeInstance)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/CreateNodeInstallLinuxWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListNodeMMIDs(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*network.MMIDs, error) {
	out := new(network.MMIDs)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListNodeMMIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListNodes(ctx context.Context, in *network.ListNodesRequest, opts ...grpc.CallOption) (*network.Nodes, error) {
	out := new(network.Nodes)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error) {
	out := new(network.Node)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteNetworkEndpoint(ctx context.Context, in *network.Endpoint, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteNetworkEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListProjects(ctx context.Context, in *project.ListProjectsRequest, opts ...grpc.CallOption) (*project.Projects, error) {
	out := new(project.Projects)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error) {
	out := new(project.Project)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error) {
	out := new(project.Project)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListWorkflows(ctx context.Context, in *workflow.ListWorkflowsRequest, opts ...grpc.CallOption) (*workflow.Workflows, error) {
	out := new(workflow.Workflows)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error) {
	out := new(workflow.Workflow)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) SetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error) {
	out := new(workflow.Workflow)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/SetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ActionWorkflow(ctx context.Context, in *workflow.WorkflowAction, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ActionWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListOperations(ctx context.Context, in *workflow.ListOperationsRequest, opts ...grpc.CallOption) (*workflow.Operations, error) {
	out := new(workflow.Operations)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetOperation(ctx context.Context, in *workflow.Operation, opts ...grpc.CallOption) (*workflow.Operation, error) {
	out := new(workflow.Operation)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteOperation(ctx context.Context, in *workflow.Operation, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) ListAlerts(ctx context.Context, in *events.ListAlertsRequest, opts ...grpc.CallOption) (*events.Alerts, error) {
	out := new(events.Alerts)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/ListAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) GetAlert(ctx context.Context, in *events.Alert, opts ...grpc.CallOption) (*events.Alert, error) {
	out := new(events.Alert)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) NewAlertComment(ctx context.Context, in *events.AlertNewCommentRequest, opts ...grpc.CallOption) (*events.Alert, error) {
	out := new(events.Alert)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/NewAlertComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DeleteAlert(ctx context.Context, in *events.Alert, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DeleteAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) MetricsQuery(ctx context.Context, in *metrics.InfluxQuery, opts ...grpc.CallOption) (*metrics.InfluxQueryResult, error) {
	out := new(metrics.InfluxQueryResult)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/MetricsQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreAPIClient) DataQuery(ctx context.Context, in *resource.MongoQuery, opts ...grpc.CallOption) (*resource.MongoQueryResult, error) {
	out := new(resource.MongoQueryResult)
	err := c.cc.Invoke(ctx, "/api.CoreAPI/DataQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoreAPIServer is the server API for CoreAPI service.
// All implementations must embed UnimplementedCoreAPIServer
// for forward compatibility
type CoreAPIServer interface {
	// iam
	ListIAMPermissions(context.Context, *empty.Empty) (*iam.Permissions, error)
	CreateUser(context.Context, *iam.User) (*iam.User, error)
	ListUsers(context.Context, *iam.ListUsersRequest) (*iam.Users, error)
	GetUser(context.Context, *iam.UserRequest) (*iam.User, error)
	//   rpc SetUser(iam.User) returns (iam.User) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/iam/users/{email}"
	//       body: "*"
	//     };
	//   }
	DeleteUser(context.Context, *iam.UserRequest) (*status.StatusResponse, error)
	EnableUser(context.Context, *iam.UserRequest) (*iam.User, error)
	DisableUser(context.Context, *iam.UserRequest) (*iam.User, error)
	SetUserEmail(context.Context, *iam.SetUserEmailRequest) (*iam.User, error)
	//   rpc ResetUserPassword(iam.UserRequest) returns (status.StatusResponse) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/iam/users/{email}:password-reset"
	//       body: "*"
	//     };
	//   }
	SetUserCredentialsPassword(context.Context, *iam.SetUserCredentialsPasswordRequest) (*iam.User, error)
	SetUserCredentialsSSH(context.Context, *iam.SetUserCredentialsSSHRequest) (*iam.User, error)
	DeleteUserCredentialsSSH(context.Context, *iam.UserRequest) (*iam.User, error)
	SetUserCredentialsTOTP(context.Context, *iam.SetUserCredentialsTOTPRequest) (*iam.User, error)
	SetUserSSHKeys(context.Context, *iam.SetUserSSHKeysRequest) (*iam.User, error)
	GetUserSSHKeys(context.Context, *iam.UserRequest) (*iam.UserSSHKeys, error)
	SetUserPermissions(context.Context, *iam.SetUserPermissionsRequest) (*iam.User, error)
	ListSecurityGroups(context.Context, *iam.ListSecurityGroupsRequest) (*iam.SecurityGroups, error)
	GetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error)
	SetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error)
	DeleteSecurityGroup(context.Context, *iam.SecurityGroup) (*status.StatusResponse, error)
	ListRoles(context.Context, *iam.ListRolesRequest) (*iam.Roles, error)
	GetRole(context.Context, *iam.Role) (*iam.Role, error)
	SetRole(context.Context, *iam.Role) (*iam.Role, error)
	DeleteRole(context.Context, *iam.Role) (*status.StatusResponse, error)
	ListACLs(context.Context, *iam.ListACLsRequest) (*iam.ACLs, error)
	GetACL(context.Context, *iam.ACL) (*iam.ACL, error)
	SetACL(context.Context, *iam.ACL) (*iam.ACL, error)
	DeleteACL(context.Context, *iam.ACL) (*status.StatusResponse, error)
	// tenants
	ListTenants(context.Context, *tenant.ListTenantsRequest) (*tenant.Tenants, error)
	GetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error)
	SetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error)
	DeleteTenant(context.Context, *tenant.Tenant) (*status.StatusResponse, error)
	// networks
	ListNetworks(context.Context, *network.ListNetworksRequest) (*network.Networks, error)
	GetNetwork(context.Context, *network.Network) (*network.Network, error)
	SetNetwork(context.Context, *network.Network) (*network.Network, error)
	DeleteNetwork(context.Context, *network.Network) (*status.StatusResponse, error)
	// VRFs (subnets)
	ListVRFs(context.Context, *network.ListVRFsRequest) (*network.VRFs, error)
	GetVRF(context.Context, *network.VRF) (*network.VRF, error)
	SetVRF(context.Context, *network.VRF) (*network.VRF, error)
	DeleteVRF(context.Context, *network.VRF) (*status.StatusResponse, error)
	// network policies
	GetNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error)
	SetNetworkPolicy(context.Context, *object.NetworkPolicyConfigRequest) (*network.Policy, error)
	DeleteNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error)
	// routes
	ListRoutes(context.Context, *network.VRF) (*routing.RoutingTable, error)
	// nodes
	CreateGenericNode(context.Context, *network.NodeInstanceRequest) (*network.NodeInstance, error)
	CreateKubernetesGateway(context.Context, *network.NodeInstanceRequest) (*network.NodeInstance, error)
	CreateNodeInstallLinuxWebhook(context.Context, *network.NodeInstanceRequest) (*network.NodeInstance, error)
	ListNodeMMIDs(context.Context, *account.Account) (*network.MMIDs, error)
	ListNodes(context.Context, *network.ListNodesRequest) (*network.Nodes, error)
	GetNode(context.Context, *network.Node) (*network.Node, error)
	// rpc SetNode (network.Node) returns (network.Node) {}
	DeleteNode(context.Context, *network.Node) (*status.StatusResponse, error)
	// rpc ResetNodeNetworkTraffic(network.Node) returns (network.Node) {}
	// rpc GetNetworkEndpoint(network.Endpoint) returns (blob.Blob) {}
	DeleteNetworkEndpoint(context.Context, *network.Endpoint) (*status.StatusResponse, error)
	// projects
	ListProjects(context.Context, *project.ListProjectsRequest) (*project.Projects, error)
	GetProject(context.Context, *project.Project) (*project.Project, error)
	SetProject(context.Context, *project.Project) (*project.Project, error)
	DeleteProject(context.Context, *project.Project) (*status.StatusResponse, error)
	// workflows
	ListWorkflows(context.Context, *workflow.ListWorkflowsRequest) (*workflow.Workflows, error)
	GetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error)
	SetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error)
	DeleteWorkflow(context.Context, *workflow.Workflow) (*status.StatusResponse, error)
	ActionWorkflow(context.Context, *workflow.WorkflowAction) (*status.StatusResponse, error)
	// operations
	ListOperations(context.Context, *workflow.ListOperationsRequest) (*workflow.Operations, error)
	GetOperation(context.Context, *workflow.Operation) (*workflow.Operation, error)
	// rpc SetOperation (operation.Operation) returns (status.StatusResponse) {}
	DeleteOperation(context.Context, *workflow.Operation) (*status.StatusResponse, error)
	// alerts
	ListAlerts(context.Context, *events.ListAlertsRequest) (*events.Alerts, error)
	GetAlert(context.Context, *events.Alert) (*events.Alert, error)
	// rpc SetAlert (events.Alert) returns (events.Alert) {}
	NewAlertComment(context.Context, *events.AlertNewCommentRequest) (*events.Alert, error)
	DeleteAlert(context.Context, *events.Alert) (*status.StatusResponse, error)
	// metrics
	MetricsQuery(context.Context, *metrics.InfluxQuery) (*metrics.InfluxQueryResult, error)
	// data queries
	DataQuery(context.Context, *resource.MongoQuery) (*resource.MongoQueryResult, error)
	mustEmbedUnimplementedCoreAPIServer()
}

// UnimplementedCoreAPIServer must be embedded to have forward compatible implementations.
type UnimplementedCoreAPIServer struct {
}

func (UnimplementedCoreAPIServer) ListIAMPermissions(context.Context, *empty.Empty) (*iam.Permissions, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListIAMPermissions not implemented")
}
func (UnimplementedCoreAPIServer) CreateUser(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedCoreAPIServer) ListUsers(context.Context, *iam.ListUsersRequest) (*iam.Users, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (UnimplementedCoreAPIServer) GetUser(context.Context, *iam.UserRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedCoreAPIServer) DeleteUser(context.Context, *iam.UserRequest) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedCoreAPIServer) EnableUser(context.Context, *iam.UserRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (UnimplementedCoreAPIServer) DisableUser(context.Context, *iam.UserRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedCoreAPIServer) SetUserEmail(context.Context, *iam.SetUserEmailRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserEmail not implemented")
}
func (UnimplementedCoreAPIServer) SetUserCredentialsPassword(context.Context, *iam.SetUserCredentialsPasswordRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserCredentialsPassword not implemented")
}
func (UnimplementedCoreAPIServer) SetUserCredentialsSSH(context.Context, *iam.SetUserCredentialsSSHRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserCredentialsSSH not implemented")
}
func (UnimplementedCoreAPIServer) DeleteUserCredentialsSSH(context.Context, *iam.UserRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteUserCredentialsSSH not implemented")
}
func (UnimplementedCoreAPIServer) SetUserCredentialsTOTP(context.Context, *iam.SetUserCredentialsTOTPRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserCredentialsTOTP not implemented")
}
func (UnimplementedCoreAPIServer) SetUserSSHKeys(context.Context, *iam.SetUserSSHKeysRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserSSHKeys not implemented")
}
func (UnimplementedCoreAPIServer) GetUserSSHKeys(context.Context, *iam.UserRequest) (*iam.UserSSHKeys, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUserSSHKeys not implemented")
}
func (UnimplementedCoreAPIServer) SetUserPermissions(context.Context, *iam.SetUserPermissionsRequest) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserPermissions not implemented")
}
func (UnimplementedCoreAPIServer) ListSecurityGroups(context.Context, *iam.ListSecurityGroupsRequest) (*iam.SecurityGroups, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSecurityGroups not implemented")
}
func (UnimplementedCoreAPIServer) GetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSecurityGroup not implemented")
}
func (UnimplementedCoreAPIServer) SetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetSecurityGroup not implemented")
}
func (UnimplementedCoreAPIServer) DeleteSecurityGroup(context.Context, *iam.SecurityGroup) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSecurityGroup not implemented")
}
func (UnimplementedCoreAPIServer) ListRoles(context.Context, *iam.ListRolesRequest) (*iam.Roles, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedCoreAPIServer) GetRole(context.Context, *iam.Role) (*iam.Role, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedCoreAPIServer) SetRole(context.Context, *iam.Role) (*iam.Role, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (UnimplementedCoreAPIServer) DeleteRole(context.Context, *iam.Role) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedCoreAPIServer) ListACLs(context.Context, *iam.ListACLsRequest) (*iam.ACLs, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListACLs not implemented")
}
func (UnimplementedCoreAPIServer) GetACL(context.Context, *iam.ACL) (*iam.ACL, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetACL not implemented")
}
func (UnimplementedCoreAPIServer) SetACL(context.Context, *iam.ACL) (*iam.ACL, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetACL not implemented")
}
func (UnimplementedCoreAPIServer) DeleteACL(context.Context, *iam.ACL) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteACL not implemented")
}
func (UnimplementedCoreAPIServer) ListTenants(context.Context, *tenant.ListTenantsRequest) (*tenant.Tenants, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (UnimplementedCoreAPIServer) GetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (UnimplementedCoreAPIServer) SetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetTenant not implemented")
}
func (UnimplementedCoreAPIServer) DeleteTenant(context.Context, *tenant.Tenant) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (UnimplementedCoreAPIServer) ListNetworks(context.Context, *network.ListNetworksRequest) (*network.Networks, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (UnimplementedCoreAPIServer) GetNetwork(context.Context, *network.Network) (*network.Network, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (UnimplementedCoreAPIServer) SetNetwork(context.Context, *network.Network) (*network.Network, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetNetwork not implemented")
}
func (UnimplementedCoreAPIServer) DeleteNetwork(context.Context, *network.Network) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (UnimplementedCoreAPIServer) ListVRFs(context.Context, *network.ListVRFsRequest) (*network.VRFs, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListVRFs not implemented")
}
func (UnimplementedCoreAPIServer) GetVRF(context.Context, *network.VRF) (*network.VRF, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetVRF not implemented")
}
func (UnimplementedCoreAPIServer) SetVRF(context.Context, *network.VRF) (*network.VRF, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetVRF not implemented")
}
func (UnimplementedCoreAPIServer) DeleteVRF(context.Context, *network.VRF) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVRF not implemented")
}
func (UnimplementedCoreAPIServer) GetNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNetworkPolicy not implemented")
}
func (UnimplementedCoreAPIServer) SetNetworkPolicy(context.Context, *object.NetworkPolicyConfigRequest) (*network.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetNetworkPolicy not implemented")
}
func (UnimplementedCoreAPIServer) DeleteNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetworkPolicy not implemented")
}
func (UnimplementedCoreAPIServer) ListRoutes(context.Context, *network.VRF) (*routing.RoutingTable, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (UnimplementedCoreAPIServer) CreateGenericNode(context.Context, *network.NodeInstanceRequest) (*network.NodeInstance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateGenericNode not implemented")
}
func (UnimplementedCoreAPIServer) CreateKubernetesGateway(context.Context, *network.NodeInstanceRequest) (*network.NodeInstance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateKubernetesGateway not implemented")
}
func (UnimplementedCoreAPIServer) CreateNodeInstallLinuxWebhook(context.Context, *network.NodeInstanceRequest) (*network.NodeInstance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodeInstallLinuxWebhook not implemented")
}
func (UnimplementedCoreAPIServer) ListNodeMMIDs(context.Context, *account.Account) (*network.MMIDs, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodeMMIDs not implemented")
}
func (UnimplementedCoreAPIServer) ListNodes(context.Context, *network.ListNodesRequest) (*network.Nodes, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedCoreAPIServer) GetNode(context.Context, *network.Node) (*network.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedCoreAPIServer) DeleteNode(context.Context, *network.Node) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedCoreAPIServer) DeleteNetworkEndpoint(context.Context, *network.Endpoint) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetworkEndpoint not implemented")
}
func (UnimplementedCoreAPIServer) ListProjects(context.Context, *project.ListProjectsRequest) (*project.Projects, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedCoreAPIServer) GetProject(context.Context, *project.Project) (*project.Project, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedCoreAPIServer) SetProject(context.Context, *project.Project) (*project.Project, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetProject not implemented")
}
func (UnimplementedCoreAPIServer) DeleteProject(context.Context, *project.Project) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedCoreAPIServer) ListWorkflows(context.Context, *workflow.ListWorkflowsRequest) (*workflow.Workflows, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (UnimplementedCoreAPIServer) GetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (UnimplementedCoreAPIServer) SetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetWorkflow not implemented")
}
func (UnimplementedCoreAPIServer) DeleteWorkflow(context.Context, *workflow.Workflow) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (UnimplementedCoreAPIServer) ActionWorkflow(context.Context, *workflow.WorkflowAction) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ActionWorkflow not implemented")
}
func (UnimplementedCoreAPIServer) ListOperations(context.Context, *workflow.ListOperationsRequest) (*workflow.Operations, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (UnimplementedCoreAPIServer) GetOperation(context.Context, *workflow.Operation) (*workflow.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (UnimplementedCoreAPIServer) DeleteOperation(context.Context, *workflow.Operation) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteOperation not implemented")
}
func (UnimplementedCoreAPIServer) ListAlerts(context.Context, *events.ListAlertsRequest) (*events.Alerts, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAlerts not implemented")
}
func (UnimplementedCoreAPIServer) GetAlert(context.Context, *events.Alert) (*events.Alert, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (UnimplementedCoreAPIServer) NewAlertComment(context.Context, *events.AlertNewCommentRequest) (*events.Alert, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method NewAlertComment not implemented")
}
func (UnimplementedCoreAPIServer) DeleteAlert(context.Context, *events.Alert) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAlert not implemented")
}
func (UnimplementedCoreAPIServer) MetricsQuery(context.Context, *metrics.InfluxQuery) (*metrics.InfluxQueryResult, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method MetricsQuery not implemented")
}
func (UnimplementedCoreAPIServer) DataQuery(context.Context, *resource.MongoQuery) (*resource.MongoQueryResult, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DataQuery not implemented")
}
func (UnimplementedCoreAPIServer) mustEmbedUnimplementedCoreAPIServer() {}

// UnsafeCoreAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoreAPIServer will
// result in compilation errors.
type UnsafeCoreAPIServer interface {
	mustEmbedUnimplementedCoreAPIServer()
}

func RegisterCoreAPIServer(s grpc.ServiceRegistrar, srv CoreAPIServer) {
	s.RegisterService(&CoreAPI_ServiceDesc, srv)
}

func _CoreAPI_ListIAMPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListIAMPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListIAMPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListIAMPermissions(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ListUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListUsers(ctx, req.(*iam.ListUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetUser(ctx, req.(*iam.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteUser(ctx, req.(*iam.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/EnableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).EnableUser(ctx, req.(*iam.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DisableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DisableUser(ctx, req.(*iam.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUserEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SetUserEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUserEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUserEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUserEmail(ctx, req.(*iam.SetUserEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUserCredentialsPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SetUserCredentialsPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUserCredentialsPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUserCredentialsPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUserCredentialsPassword(ctx, req.(*iam.SetUserCredentialsPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUserCredentialsSSH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SetUserCredentialsSSHRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUserCredentialsSSH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUserCredentialsSSH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUserCredentialsSSH(ctx, req.(*iam.SetUserCredentialsSSHRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteUserCredentialsSSH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteUserCredentialsSSH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteUserCredentialsSSH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteUserCredentialsSSH(ctx, req.(*iam.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUserCredentialsTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SetUserCredentialsTOTPRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUserCredentialsTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUserCredentialsTOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUserCredentialsTOTP(ctx, req.(*iam.SetUserCredentialsTOTPRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUserSSHKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SetUserSSHKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUserSSHKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUserSSHKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUserSSHKeys(ctx, req.(*iam.SetUserSSHKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetUserSSHKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetUserSSHKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetUserSSHKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetUserSSHKeys(ctx, req.(*iam.UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetUserPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SetUserPermissionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetUserPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetUserPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetUserPermissions(ctx, req.(*iam.SetUserPermissionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ListSecurityGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListSecurityGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListSecurityGroups(ctx, req.(*iam.ListSecurityGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetSecurityGroup(ctx, req.(*iam.SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetSecurityGroup(ctx, req.(*iam.SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteSecurityGroup(ctx, req.(*iam.SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListRoles(ctx, req.(*iam.ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetRole(ctx, req.(*iam.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetRole(ctx, req.(*iam.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteRole(ctx, req.(*iam.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListACLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ListACLsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListACLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListACLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListACLs(ctx, req.(*iam.ListACLsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetACL(ctx, req.(*iam.ACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetACL(ctx, req.(*iam.ACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteACL(ctx, req.(*iam.ACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.ListTenantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListTenants(ctx, req.(*tenant.ListTenantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetTenant(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetTenant(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteTenant(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.ListNetworksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListNetworks(ctx, req.(*network.ListNetworksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetNetwork(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetNetwork(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteNetwork(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListVRFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.ListVRFsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListVRFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListVRFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListVRFs(ctx, req.(*network.ListVRFsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetVRF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetVRF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetVRF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetVRF(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetVRF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetVRF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetVRF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetVRF(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteVRF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteVRF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteVRF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteVRF(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetNetworkPolicy(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(object.NetworkPolicyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetNetworkPolicy(ctx, req.(*object.NetworkPolicyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteNetworkPolicy(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListRoutes(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_CreateGenericNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.NodeInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateGenericNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/CreateGenericNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateGenericNode(ctx, req.(*network.NodeInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_CreateKubernetesGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.NodeInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateKubernetesGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/CreateKubernetesGateway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateKubernetesGateway(ctx, req.(*network.NodeInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_CreateNodeInstallLinuxWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.NodeInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).CreateNodeInstallLinuxWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/CreateNodeInstallLinuxWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).CreateNodeInstallLinuxWebhook(ctx, req.(*network.NodeInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListNodeMMIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListNodeMMIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListNodeMMIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListNodeMMIDs(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListNodes(ctx, req.(*network.ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetNode(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteNode(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteNetworkEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteNetworkEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteNetworkEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteNetworkEndpoint(ctx, req.(*network.Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListProjects(ctx, req.(*project.ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetProject(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetProject(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteProject(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.ListWorkflowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListWorkflows(ctx, req.(*workflow.ListWorkflowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetWorkflow(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_SetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).SetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/SetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).SetWorkflow(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteWorkflow(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ActionWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.WorkflowAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ActionWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ActionWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ActionWorkflow(ctx, req.(*workflow.WorkflowAction))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.ListOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListOperations(ctx, req.(*workflow.ListOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetOperation(ctx, req.(*workflow.Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteOperation(ctx, req.(*workflow.Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_ListAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.ListAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).ListAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/ListAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).ListAlerts(ctx, req.(*events.ListAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_GetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).GetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/GetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).GetAlert(ctx, req.(*events.Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_NewAlertComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.AlertNewCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).NewAlertComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/NewAlertComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).NewAlertComment(ctx, req.(*events.AlertNewCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DeleteAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.Alert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DeleteAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DeleteAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DeleteAlert(ctx, req.(*events.Alert))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_MetricsQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.InfluxQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).MetricsQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/MetricsQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).MetricsQuery(ctx, req.(*metrics.InfluxQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreAPI_DataQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.MongoQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreAPIServer).DataQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CoreAPI/DataQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreAPIServer).DataQuery(ctx, req.(*resource.MongoQuery))
	}
	return interceptor(ctx, in, info, handler)
}

// CoreAPI_ServiceDesc is the grpc.ServiceDesc for CoreAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoreAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CoreAPI",
	HandlerType: (*CoreAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIAMPermissions",
			Handler:    _CoreAPI_ListIAMPermissions_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _CoreAPI_CreateUser_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _CoreAPI_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _CoreAPI_GetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _CoreAPI_DeleteUser_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _CoreAPI_EnableUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _CoreAPI_DisableUser_Handler,
		},
		{
			MethodName: "SetUserEmail",
			Handler:    _CoreAPI_SetUserEmail_Handler,
		},
		{
			MethodName: "SetUserCredentialsPassword",
			Handler:    _CoreAPI_SetUserCredentialsPassword_Handler,
		},
		{
			MethodName: "SetUserCredentialsSSH",
			Handler:    _CoreAPI_SetUserCredentialsSSH_Handler,
		},
		{
			MethodName: "DeleteUserCredentialsSSH",
			Handler:    _CoreAPI_DeleteUserCredentialsSSH_Handler,
		},
		{
			MethodName: "SetUserCredentialsTOTP",
			Handler:    _CoreAPI_SetUserCredentialsTOTP_Handler,
		},
		{
			MethodName: "SetUserSSHKeys",
			Handler:    _CoreAPI_SetUserSSHKeys_Handler,
		},
		{
			MethodName: "GetUserSSHKeys",
			Handler:    _CoreAPI_GetUserSSHKeys_Handler,
		},
		{
			MethodName: "SetUserPermissions",
			Handler:    _CoreAPI_SetUserPermissions_Handler,
		},
		{
			MethodName: "ListSecurityGroups",
			Handler:    _CoreAPI_ListSecurityGroups_Handler,
		},
		{
			MethodName: "GetSecurityGroup",
			Handler:    _CoreAPI_GetSecurityGroup_Handler,
		},
		{
			MethodName: "SetSecurityGroup",
			Handler:    _CoreAPI_SetSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteSecurityGroup",
			Handler:    _CoreAPI_DeleteSecurityGroup_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _CoreAPI_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _CoreAPI_GetRole_Handler,
		},
		{
			MethodName: "SetRole",
			Handler:    _CoreAPI_SetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _CoreAPI_DeleteRole_Handler,
		},
		{
			MethodName: "ListACLs",
			Handler:    _CoreAPI_ListACLs_Handler,
		},
		{
			MethodName: "GetACL",
			Handler:    _CoreAPI_GetACL_Handler,
		},
		{
			MethodName: "SetACL",
			Handler:    _CoreAPI_SetACL_Handler,
		},
		{
			MethodName: "DeleteACL",
			Handler:    _CoreAPI_DeleteACL_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _CoreAPI_ListTenants_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _CoreAPI_GetTenant_Handler,
		},
		{
			MethodName: "SetTenant",
			Handler:    _CoreAPI_SetTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _CoreAPI_DeleteTenant_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _CoreAPI_ListNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _CoreAPI_GetNetwork_Handler,
		},
		{
			MethodName: "SetNetwork",
			Handler:    _CoreAPI_SetNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _CoreAPI_DeleteNetwork_Handler,
		},
		{
			MethodName: "ListVRFs",
			Handler:    _CoreAPI_ListVRFs_Handler,
		},
		{
			MethodName: "GetVRF",
			Handler:    _CoreAPI_GetVRF_Handler,
		},
		{
			MethodName: "SetVRF",
			Handler:    _CoreAPI_SetVRF_Handler,
		},
		{
			MethodName: "DeleteVRF",
			Handler:    _CoreAPI_DeleteVRF_Handler,
		},
		{
			MethodName: "GetNetworkPolicy",
			Handler:    _CoreAPI_GetNetworkPolicy_Handler,
		},
		{
			MethodName: "SetNetworkPolicy",
			Handler:    _CoreAPI_SetNetworkPolicy_Handler,
		},
		{
			MethodName: "DeleteNetworkPolicy",
			Handler:    _CoreAPI_DeleteNetworkPolicy_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _CoreAPI_ListRoutes_Handler,
		},
		{
			MethodName: "CreateGenericNode",
			Handler:    _CoreAPI_CreateGenericNode_Handler,
		},
		{
			MethodName: "CreateKubernetesGateway",
			Handler:    _CoreAPI_CreateKubernetesGateway_Handler,
		},
		{
			MethodName: "CreateNodeInstallLinuxWebhook",
			Handler:    _CoreAPI_CreateNodeInstallLinuxWebhook_Handler,
		},
		{
			MethodName: "ListNodeMMIDs",
			Handler:    _CoreAPI_ListNodeMMIDs_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _CoreAPI_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _CoreAPI_GetNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _CoreAPI_DeleteNode_Handler,
		},
		{
			MethodName: "DeleteNetworkEndpoint",
			Handler:    _CoreAPI_DeleteNetworkEndpoint_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _CoreAPI_ListProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _CoreAPI_GetProject_Handler,
		},
		{
			MethodName: "SetProject",
			Handler:    _CoreAPI_SetProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _CoreAPI_DeleteProject_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _CoreAPI_ListWorkflows_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _CoreAPI_GetWorkflow_Handler,
		},
		{
			MethodName: "SetWorkflow",
			Handler:    _CoreAPI_SetWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _CoreAPI_DeleteWorkflow_Handler,
		},
		{
			MethodName: "ActionWorkflow",
			Handler:    _CoreAPI_ActionWorkflow_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _CoreAPI_ListOperations_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _CoreAPI_GetOperation_Handler,
		},
		{
			MethodName: "DeleteOperation",
			Handler:    _CoreAPI_DeleteOperation_Handler,
		},
		{
			MethodName: "ListAlerts",
			Handler:    _CoreAPI_ListAlerts_Handler,
		},
		{
			MethodName: "GetAlert",
			Handler:    _CoreAPI_GetAlert_Handler,
		},
		{
			MethodName: "NewAlertComment",
			Handler:    _CoreAPI_NewAlertComment_Handler,
		},
		{
			MethodName: "DeleteAlert",
			Handler:    _CoreAPI_DeleteAlert_Handler,
		},
		{
			MethodName: "MetricsQuery",
			Handler:    _CoreAPI_MetricsQuery_Handler,
		},
		{
			MethodName: "DataQuery",
			Handler:    _CoreAPI_DataQuery_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mmesh/protobuf/rpc/v1/coreAPI.proto",
}
