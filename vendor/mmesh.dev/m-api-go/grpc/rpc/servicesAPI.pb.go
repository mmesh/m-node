// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.1
// source: mmesh/protobuf/rpc/v1/servicesAPI.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	status "mmesh.dev/m-api-go/grpc/common/status"
	itsm "mmesh.dev/m-api-go/grpc/resources/itsm"
	services "mmesh.dev/m-api-go/grpc/resources/services"
	cloud "mmesh.dev/m-api-go/grpc/resources/services/platform/cloud"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_mmesh_protobuf_rpc_v1_servicesAPI_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_rpc_v1_servicesAPI_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x41, 0x50, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6d, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x6d, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x33, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x73, 0x6d, 0x2f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x42, 0x6d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f,
	0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x44, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0xcf, 0x1f, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x41, 0x50, 0x49, 0x12, 0x80, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x21, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50,
	0x6c, 0x61, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c,
	0x61, 0x6e, 0x73, 0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x12, 0x29, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x81, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e,
	0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12,
	0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72,
	0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x12, 0x84, 0x01, 0x0a, 0x0e, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x15, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67,
	0x50, 0x6c, 0x61, 0x6e, 0x1a, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x22, 0x44, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3e, 0x22, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x7d, 0x2f, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x3a, 0x01,
	0x2a, 0x12, 0x85, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x1a, 0x16,
	0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x2a, 0x39,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x69,
	0x63, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x69, 0x63, 0x69,
	0x6e, 0x67, 0x50, 0x6c, 0x61, 0x6e, 0x49, 0x44, 0x7d, 0x12, 0x74, 0x0a, 0x0d, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x1e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x22,
	0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x12, 0x26, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x72, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x1a, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x12, 0x33,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x7d, 0x12, 0x79, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x2a, 0x33, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x12, 0x99,
	0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12,
	0x1d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x73, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x50, 0x12, 0x4e, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x84, 0x01, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x11, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22,
	0x50, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x12, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f,
	0x7b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44,
	0x7d, 0x12, 0x8c, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x12, 0x11, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4a, 0x2a, 0x48, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x7d,
	0x12, 0x52, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12,
	0x0b, 0x2e, 0x69, 0x74, 0x73, 0x6d, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74, 0x73, 0x6d, 0x3a, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x3a, 0x01, 0x2a, 0x12, 0x77, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x22, 0x2c, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x79, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x22, 0x34, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x77, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x0f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x41,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x12, 0x39, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x7d, 0x12, 0x81, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x2a, 0x39, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x49, 0x44, 0x7d, 0x12, 0x89, 0x01, 0x0a, 0x17, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43,
	0x79, 0x63, 0x6c, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x0f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x22, 0x44, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x3a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x83, 0x01, 0x0a, 0x14, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x49, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x43, 0x22, 0x41, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x3a,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x12, 0x0f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22, 0x42, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x3a, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x12,
	0x81, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x0f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x48, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x42, 0x22, 0x40, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f,
	0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x7d, 0x3a, 0x72, 0x65, 0x62,
	0x6f, 0x6f, 0x74, 0x12, 0x85, 0x01, 0x0a, 0x15, 0x53, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x0f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22,
	0x4a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x22, 0x42, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x44, 0x7d, 0x3a, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x94, 0x01, 0x0a, 0x1c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x22,
	0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x3a,
	0x01, 0x2a, 0x12, 0x96, 0x01, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x73, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x12, 0x2e, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f,
	0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x9d, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x4c, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x12, 0x9e, 0x01, 0x0a, 0x1c,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x18, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4c,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x2a, 0x44, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x12, 0xb3, 0x01, 0x0a,
	0x1d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65,
	0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x20,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x56, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x50, 0x22, 0x4e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x2f, 0x7b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x73, 0x12, 0xc9, 0x01, 0x0a, 0x1d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x22, 0x6c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x66, 0x22, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76,
	0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x12, 0xc9,
	0x01, 0x0a, 0x1d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x12, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x6c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x66, 0x2a, 0x64, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x7d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x50,
	0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x12, 0xe8, 0x01, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x22, 0x8c, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x85, 0x01,
	0x2a, 0x82, 0x01, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x38, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x2f, 0x7b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x7b, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x7d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x2f, 0x7b, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x44, 0x7d, 0x42, 0x1d, 0x5a, 0x1b, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64,
	0x65, 0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63,
	0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_mmesh_protobuf_rpc_v1_servicesAPI_proto_goTypes = []interface{}{
	(*services.ListPricingPlansRequest)(nil),    // 0: services.ListPricingPlansRequest
	(*services.PricingPlan)(nil),                // 1: services.PricingPlan
	(*services.ListProvidersRequest)(nil),       // 2: services.ListProvidersRequest
	(*services.Provider)(nil),                   // 3: services.Provider
	(*services.ListProductsRequest)(nil),        // 4: services.ListProductsRequest
	(*services.Product)(nil),                    // 5: services.Product
	(*itsm.Issue)(nil),                          // 6: itsm.Issue
	(*cloud.InstanceRequest)(nil),               // 7: cloud.InstanceRequest
	(*cloud.ListInstancesRequest)(nil),          // 8: cloud.ListInstancesRequest
	(*cloud.Instance)(nil),                      // 9: cloud.Instance
	(*cloud.KubernetesClusterRequest)(nil),      // 10: cloud.KubernetesClusterRequest
	(*cloud.ListKubernetesClustersRequest)(nil), // 11: cloud.ListKubernetesClustersRequest
	(*cloud.KubernetesCluster)(nil),             // 12: cloud.KubernetesCluster
	(*cloud.KubernetesNodePoolRequest)(nil),     // 13: cloud.KubernetesNodePoolRequest
	(*cloud.KubernetesNodeDeleteRequest)(nil),   // 14: cloud.KubernetesNodeDeleteRequest
	(*services.PricingPlans)(nil),               // 15: services.PricingPlans
	(*status.StatusResponse)(nil),               // 16: status.StatusResponse
	(*services.Providers)(nil),                  // 17: services.Providers
	(*services.Products)(nil),                   // 18: services.Products
	(*cloud.Instances)(nil),                     // 19: cloud.Instances
	(*cloud.KubernetesClusters)(nil),            // 20: cloud.KubernetesClusters
}
var file_mmesh_protobuf_rpc_v1_servicesAPI_proto_depIdxs = []int32{
	0,  // 0: api.ServicesAPI.ListPricingPlans:input_type -> services.ListPricingPlansRequest
	1,  // 1: api.ServicesAPI.GetPricingPlan:input_type -> services.PricingPlan
	1,  // 2: api.ServicesAPI.SetPricingPlan:input_type -> services.PricingPlan
	1,  // 3: api.ServicesAPI.DeletePricingPlan:input_type -> services.PricingPlan
	2,  // 4: api.ServicesAPI.ListProviders:input_type -> services.ListProvidersRequest
	3,  // 5: api.ServicesAPI.GetProvider:input_type -> services.Provider
	3,  // 6: api.ServicesAPI.DeleteProvider:input_type -> services.Provider
	4,  // 7: api.ServicesAPI.ListProducts:input_type -> services.ListProductsRequest
	5,  // 8: api.ServicesAPI.GetProduct:input_type -> services.Product
	5,  // 9: api.ServicesAPI.DeleteProduct:input_type -> services.Product
	6,  // 10: api.ServicesAPI.SubmitIssue:input_type -> itsm.Issue
	7,  // 11: api.ServicesAPI.CreateCloudInstance:input_type -> cloud.InstanceRequest
	8,  // 12: api.ServicesAPI.ListCloudInstances:input_type -> cloud.ListInstancesRequest
	9,  // 13: api.ServicesAPI.GetCloudInstance:input_type -> cloud.Instance
	9,  // 14: api.ServicesAPI.DeleteCloudInstance:input_type -> cloud.Instance
	9,  // 15: api.ServicesAPI.PowerCycleCloudInstance:input_type -> cloud.Instance
	9,  // 16: api.ServicesAPI.PowerOnCloudInstance:input_type -> cloud.Instance
	9,  // 17: api.ServicesAPI.PowerOffCloudInstance:input_type -> cloud.Instance
	9,  // 18: api.ServicesAPI.RebootCloudInstance:input_type -> cloud.Instance
	9,  // 19: api.ServicesAPI.ShutdownCloudInstance:input_type -> cloud.Instance
	10, // 20: api.ServicesAPI.CreateCloudKubernetesCluster:input_type -> cloud.KubernetesClusterRequest
	11, // 21: api.ServicesAPI.ListCloudKubernetesClusters:input_type -> cloud.ListKubernetesClustersRequest
	12, // 22: api.ServicesAPI.GetCloudKubernetesCluster:input_type -> cloud.KubernetesCluster
	12, // 23: api.ServicesAPI.DeleteCloudKubernetesCluster:input_type -> cloud.KubernetesCluster
	13, // 24: api.ServicesAPI.CreateCloudKubernetesNodePool:input_type -> cloud.KubernetesNodePoolRequest
	13, // 25: api.ServicesAPI.UpdateCloudKubernetesNodePool:input_type -> cloud.KubernetesNodePoolRequest
	13, // 26: api.ServicesAPI.DeleteCloudKubernetesNodePool:input_type -> cloud.KubernetesNodePoolRequest
	14, // 27: api.ServicesAPI.DeleteCloudKubernetesNode:input_type -> cloud.KubernetesNodeDeleteRequest
	15, // 28: api.ServicesAPI.ListPricingPlans:output_type -> services.PricingPlans
	1,  // 29: api.ServicesAPI.GetPricingPlan:output_type -> services.PricingPlan
	1,  // 30: api.ServicesAPI.SetPricingPlan:output_type -> services.PricingPlan
	16, // 31: api.ServicesAPI.DeletePricingPlan:output_type -> status.StatusResponse
	17, // 32: api.ServicesAPI.ListProviders:output_type -> services.Providers
	3,  // 33: api.ServicesAPI.GetProvider:output_type -> services.Provider
	16, // 34: api.ServicesAPI.DeleteProvider:output_type -> status.StatusResponse
	18, // 35: api.ServicesAPI.ListProducts:output_type -> services.Products
	5,  // 36: api.ServicesAPI.GetProduct:output_type -> services.Product
	16, // 37: api.ServicesAPI.DeleteProduct:output_type -> status.StatusResponse
	16, // 38: api.ServicesAPI.SubmitIssue:output_type -> status.StatusResponse
	9,  // 39: api.ServicesAPI.CreateCloudInstance:output_type -> cloud.Instance
	19, // 40: api.ServicesAPI.ListCloudInstances:output_type -> cloud.Instances
	9,  // 41: api.ServicesAPI.GetCloudInstance:output_type -> cloud.Instance
	16, // 42: api.ServicesAPI.DeleteCloudInstance:output_type -> status.StatusResponse
	9,  // 43: api.ServicesAPI.PowerCycleCloudInstance:output_type -> cloud.Instance
	9,  // 44: api.ServicesAPI.PowerOnCloudInstance:output_type -> cloud.Instance
	9,  // 45: api.ServicesAPI.PowerOffCloudInstance:output_type -> cloud.Instance
	9,  // 46: api.ServicesAPI.RebootCloudInstance:output_type -> cloud.Instance
	9,  // 47: api.ServicesAPI.ShutdownCloudInstance:output_type -> cloud.Instance
	12, // 48: api.ServicesAPI.CreateCloudKubernetesCluster:output_type -> cloud.KubernetesCluster
	20, // 49: api.ServicesAPI.ListCloudKubernetesClusters:output_type -> cloud.KubernetesClusters
	12, // 50: api.ServicesAPI.GetCloudKubernetesCluster:output_type -> cloud.KubernetesCluster
	16, // 51: api.ServicesAPI.DeleteCloudKubernetesCluster:output_type -> status.StatusResponse
	12, // 52: api.ServicesAPI.CreateCloudKubernetesNodePool:output_type -> cloud.KubernetesCluster
	12, // 53: api.ServicesAPI.UpdateCloudKubernetesNodePool:output_type -> cloud.KubernetesCluster
	12, // 54: api.ServicesAPI.DeleteCloudKubernetesNodePool:output_type -> cloud.KubernetesCluster
	12, // 55: api.ServicesAPI.DeleteCloudKubernetesNode:output_type -> cloud.KubernetesCluster
	28, // [28:56] is the sub-list for method output_type
	0,  // [0:28] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_rpc_v1_servicesAPI_proto_init() }
func file_mmesh_protobuf_rpc_v1_servicesAPI_proto_init() {
	if File_mmesh_protobuf_rpc_v1_servicesAPI_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_rpc_v1_servicesAPI_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mmesh_protobuf_rpc_v1_servicesAPI_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_rpc_v1_servicesAPI_proto_depIdxs,
	}.Build()
	File_mmesh_protobuf_rpc_v1_servicesAPI_proto = out.File
	file_mmesh_protobuf_rpc_v1_servicesAPI_proto_rawDesc = nil
	file_mmesh_protobuf_rpc_v1_servicesAPI_proto_goTypes = nil
	file_mmesh_protobuf_rpc_v1_servicesAPI_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ServicesAPIClient is the client API for ServicesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ServicesAPIClient interface {
	// pricingPlan
	//   rpc NewPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/pricingPlans"
	//       body: "*"
	//     };
	//   }
	ListPricingPlans(ctx context.Context, in *services.ListPricingPlansRequest, opts ...grpc.CallOption) (*services.PricingPlans, error)
	GetPricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*services.PricingPlan, error)
	SetPricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*services.PricingPlan, error)
	DeletePricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// provider
	//   rpc NewProvider(services.Provider) returns (services.Provider) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers"
	//       body: "*"
	//     };
	//   }
	ListProviders(ctx context.Context, in *services.ListProvidersRequest, opts ...grpc.CallOption) (*services.Providers, error)
	GetProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*services.Provider, error)
	//   rpc SetProvider(services.Provider) returns (services.Provider) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}"
	//       body: "*"
	//     };
	//   }
	DeleteProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// product
	//   rpc NewProduct(services.Product) returns (services.Product) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}/products"
	//       body: "*"
	//     };
	//   }
	ListProducts(ctx context.Context, in *services.ListProductsRequest, opts ...grpc.CallOption) (*services.Products, error)
	GetProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*services.Product, error)
	//   rpc SetProduct(services.Product) returns (services.Product) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}/products/{productID}"
	//       body: "*"
	//     };
	//   }
	DeleteProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// itsm
	SubmitIssue(ctx context.Context, in *itsm.Issue, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// cloud-instances
	CreateCloudInstance(ctx context.Context, in *cloud.InstanceRequest, opts ...grpc.CallOption) (*cloud.Instance, error)
	ListCloudInstances(ctx context.Context, in *cloud.ListInstancesRequest, opts ...grpc.CallOption) (*cloud.Instances, error)
	GetCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	DeleteCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*status.StatusResponse, error)
	PowerCycleCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	PowerOnCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	PowerOffCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	RebootCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	ShutdownCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	// kubernetes
	CreateCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesClusterRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	ListCloudKubernetesClusters(ctx context.Context, in *cloud.ListKubernetesClustersRequest, opts ...grpc.CallOption) (*cloud.KubernetesClusters, error)
	GetCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesCluster, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesCluster, opts ...grpc.CallOption) (*status.StatusResponse, error)
	CreateCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	UpdateCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesNode(ctx context.Context, in *cloud.KubernetesNodeDeleteRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
}

type servicesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesAPIClient(cc grpc.ClientConnInterface) ServicesAPIClient {
	return &servicesAPIClient{cc}
}

func (c *servicesAPIClient) ListPricingPlans(ctx context.Context, in *services.ListPricingPlansRequest, opts ...grpc.CallOption) (*services.PricingPlans, error) {
	out := new(services.PricingPlans)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListPricingPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetPricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*services.PricingPlan, error) {
	out := new(services.PricingPlan)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetPricingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) SetPricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*services.PricingPlan, error) {
	out := new(services.PricingPlan)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/SetPricingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeletePricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeletePricingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListProviders(ctx context.Context, in *services.ListProvidersRequest, opts ...grpc.CallOption) (*services.Providers, error) {
	out := new(services.Providers)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*services.Provider, error) {
	out := new(services.Provider)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListProducts(ctx context.Context, in *services.ListProductsRequest, opts ...grpc.CallOption) (*services.Products, error) {
	out := new(services.Products)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*services.Product, error) {
	out := new(services.Product)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) SubmitIssue(ctx context.Context, in *itsm.Issue, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/SubmitIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) CreateCloudInstance(ctx context.Context, in *cloud.InstanceRequest, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/CreateCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListCloudInstances(ctx context.Context, in *cloud.ListInstancesRequest, opts ...grpc.CallOption) (*cloud.Instances, error) {
	out := new(cloud.Instances)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListCloudInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) PowerCycleCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/PowerCycleCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) PowerOnCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/PowerOnCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) PowerOffCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/PowerOffCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) RebootCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/RebootCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ShutdownCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ShutdownCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) CreateCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesClusterRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/CreateCloudKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListCloudKubernetesClusters(ctx context.Context, in *cloud.ListKubernetesClustersRequest, opts ...grpc.CallOption) (*cloud.KubernetesClusters, error) {
	out := new(cloud.KubernetesClusters)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListCloudKubernetesClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesCluster, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetCloudKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesCluster, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteCloudKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) CreateCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/CreateCloudKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) UpdateCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/UpdateCloudKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteCloudKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteCloudKubernetesNode(ctx context.Context, in *cloud.KubernetesNodeDeleteRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteCloudKubernetesNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesAPIServer is the server API for ServicesAPI service.
type ServicesAPIServer interface {
	// pricingPlan
	//   rpc NewPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/pricingPlans"
	//       body: "*"
	//     };
	//   }
	ListPricingPlans(context.Context, *services.ListPricingPlansRequest) (*services.PricingPlans, error)
	GetPricingPlan(context.Context, *services.PricingPlan) (*services.PricingPlan, error)
	SetPricingPlan(context.Context, *services.PricingPlan) (*services.PricingPlan, error)
	DeletePricingPlan(context.Context, *services.PricingPlan) (*status.StatusResponse, error)
	// provider
	//   rpc NewProvider(services.Provider) returns (services.Provider) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers"
	//       body: "*"
	//     };
	//   }
	ListProviders(context.Context, *services.ListProvidersRequest) (*services.Providers, error)
	GetProvider(context.Context, *services.Provider) (*services.Provider, error)
	//   rpc SetProvider(services.Provider) returns (services.Provider) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}"
	//       body: "*"
	//     };
	//   }
	DeleteProvider(context.Context, *services.Provider) (*status.StatusResponse, error)
	// product
	//   rpc NewProduct(services.Product) returns (services.Product) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}/products"
	//       body: "*"
	//     };
	//   }
	ListProducts(context.Context, *services.ListProductsRequest) (*services.Products, error)
	GetProduct(context.Context, *services.Product) (*services.Product, error)
	//   rpc SetProduct(services.Product) returns (services.Product) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}/products/{productID}"
	//       body: "*"
	//     };
	//   }
	DeleteProduct(context.Context, *services.Product) (*status.StatusResponse, error)
	// itsm
	SubmitIssue(context.Context, *itsm.Issue) (*status.StatusResponse, error)
	// cloud-instances
	CreateCloudInstance(context.Context, *cloud.InstanceRequest) (*cloud.Instance, error)
	ListCloudInstances(context.Context, *cloud.ListInstancesRequest) (*cloud.Instances, error)
	GetCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	DeleteCloudInstance(context.Context, *cloud.Instance) (*status.StatusResponse, error)
	PowerCycleCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	PowerOnCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	PowerOffCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	RebootCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	ShutdownCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	// kubernetes
	CreateCloudKubernetesCluster(context.Context, *cloud.KubernetesClusterRequest) (*cloud.KubernetesCluster, error)
	ListCloudKubernetesClusters(context.Context, *cloud.ListKubernetesClustersRequest) (*cloud.KubernetesClusters, error)
	GetCloudKubernetesCluster(context.Context, *cloud.KubernetesCluster) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesCluster(context.Context, *cloud.KubernetesCluster) (*status.StatusResponse, error)
	CreateCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error)
	UpdateCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesNode(context.Context, *cloud.KubernetesNodeDeleteRequest) (*cloud.KubernetesCluster, error)
}

// UnimplementedServicesAPIServer can be embedded to have forward compatible implementations.
type UnimplementedServicesAPIServer struct {
}

func (*UnimplementedServicesAPIServer) ListPricingPlans(context.Context, *services.ListPricingPlansRequest) (*services.PricingPlans, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPricingPlans not implemented")
}
func (*UnimplementedServicesAPIServer) GetPricingPlan(context.Context, *services.PricingPlan) (*services.PricingPlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetPricingPlan not implemented")
}
func (*UnimplementedServicesAPIServer) SetPricingPlan(context.Context, *services.PricingPlan) (*services.PricingPlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetPricingPlan not implemented")
}
func (*UnimplementedServicesAPIServer) DeletePricingPlan(context.Context, *services.PricingPlan) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeletePricingPlan not implemented")
}
func (*UnimplementedServicesAPIServer) ListProviders(context.Context, *services.ListProvidersRequest) (*services.Providers, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (*UnimplementedServicesAPIServer) GetProvider(context.Context, *services.Provider) (*services.Provider, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (*UnimplementedServicesAPIServer) DeleteProvider(context.Context, *services.Provider) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (*UnimplementedServicesAPIServer) ListProducts(context.Context, *services.ListProductsRequest) (*services.Products, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (*UnimplementedServicesAPIServer) GetProduct(context.Context, *services.Product) (*services.Product, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (*UnimplementedServicesAPIServer) DeleteProduct(context.Context, *services.Product) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (*UnimplementedServicesAPIServer) SubmitIssue(context.Context, *itsm.Issue) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SubmitIssue not implemented")
}
func (*UnimplementedServicesAPIServer) CreateCloudInstance(context.Context, *cloud.InstanceRequest) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateCloudInstance not implemented")
}
func (*UnimplementedServicesAPIServer) ListCloudInstances(context.Context, *cloud.ListInstancesRequest) (*cloud.Instances, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCloudInstances not implemented")
}
func (*UnimplementedServicesAPIServer) GetCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetCloudInstance not implemented")
}
func (*UnimplementedServicesAPIServer) DeleteCloudInstance(context.Context, *cloud.Instance) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCloudInstance not implemented")
}
func (*UnimplementedServicesAPIServer) PowerCycleCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PowerCycleCloudInstance not implemented")
}
func (*UnimplementedServicesAPIServer) PowerOnCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PowerOnCloudInstance not implemented")
}
func (*UnimplementedServicesAPIServer) PowerOffCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PowerOffCloudInstance not implemented")
}
func (*UnimplementedServicesAPIServer) RebootCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RebootCloudInstance not implemented")
}
func (*UnimplementedServicesAPIServer) ShutdownCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ShutdownCloudInstance not implemented")
}
func (*UnimplementedServicesAPIServer) CreateCloudKubernetesCluster(context.Context, *cloud.KubernetesClusterRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateCloudKubernetesCluster not implemented")
}
func (*UnimplementedServicesAPIServer) ListCloudKubernetesClusters(context.Context, *cloud.ListKubernetesClustersRequest) (*cloud.KubernetesClusters, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCloudKubernetesClusters not implemented")
}
func (*UnimplementedServicesAPIServer) GetCloudKubernetesCluster(context.Context, *cloud.KubernetesCluster) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetCloudKubernetesCluster not implemented")
}
func (*UnimplementedServicesAPIServer) DeleteCloudKubernetesCluster(context.Context, *cloud.KubernetesCluster) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCloudKubernetesCluster not implemented")
}
func (*UnimplementedServicesAPIServer) CreateCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateCloudKubernetesNodePool not implemented")
}
func (*UnimplementedServicesAPIServer) UpdateCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateCloudKubernetesNodePool not implemented")
}
func (*UnimplementedServicesAPIServer) DeleteCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCloudKubernetesNodePool not implemented")
}
func (*UnimplementedServicesAPIServer) DeleteCloudKubernetesNode(context.Context, *cloud.KubernetesNodeDeleteRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCloudKubernetesNode not implemented")
}

func RegisterServicesAPIServer(s *grpc.Server, srv ServicesAPIServer) {
	s.RegisterService(&_ServicesAPI_serviceDesc, srv)
}

func _ServicesAPI_ListPricingPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListPricingPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListPricingPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListPricingPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListPricingPlans(ctx, req.(*services.ListPricingPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetPricingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.PricingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetPricingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetPricingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetPricingPlan(ctx, req.(*services.PricingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_SetPricingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.PricingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).SetPricingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/SetPricingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).SetPricingPlan(ctx, req.(*services.PricingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeletePricingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.PricingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeletePricingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeletePricingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeletePricingPlan(ctx, req.(*services.PricingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListProviders(ctx, req.(*services.ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetProvider(ctx, req.(*services.Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteProvider(ctx, req.(*services.Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListProducts(ctx, req.(*services.ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetProduct(ctx, req.(*services.Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteProduct(ctx, req.(*services.Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_SubmitIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(itsm.Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).SubmitIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/SubmitIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).SubmitIssue(ctx, req.(*itsm.Issue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_CreateCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.InstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).CreateCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/CreateCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).CreateCloudInstance(ctx, req.(*cloud.InstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListCloudInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListCloudInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListCloudInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListCloudInstances(ctx, req.(*cloud.ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_PowerCycleCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).PowerCycleCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/PowerCycleCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).PowerCycleCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_PowerOnCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).PowerOnCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/PowerOnCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).PowerOnCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_PowerOffCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).PowerOffCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/PowerOffCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).PowerOffCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_RebootCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).RebootCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/RebootCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).RebootCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ShutdownCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ShutdownCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ShutdownCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ShutdownCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_CreateCloudKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).CreateCloudKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/CreateCloudKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).CreateCloudKubernetesCluster(ctx, req.(*cloud.KubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListCloudKubernetesClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.ListKubernetesClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListCloudKubernetesClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListCloudKubernetesClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListCloudKubernetesClusters(ctx, req.(*cloud.ListKubernetesClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetCloudKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetCloudKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetCloudKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetCloudKubernetesCluster(ctx, req.(*cloud.KubernetesCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteCloudKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteCloudKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesCluster(ctx, req.(*cloud.KubernetesCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_CreateCloudKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).CreateCloudKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/CreateCloudKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).CreateCloudKubernetesNodePool(ctx, req.(*cloud.KubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_UpdateCloudKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).UpdateCloudKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/UpdateCloudKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).UpdateCloudKubernetesNodePool(ctx, req.(*cloud.KubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteCloudKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteCloudKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesNodePool(ctx, req.(*cloud.KubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteCloudKubernetesNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesNodeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteCloudKubernetesNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesNode(ctx, req.(*cloud.KubernetesNodeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ServicesAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServicesAPI",
	HandlerType: (*ServicesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPricingPlans",
			Handler:    _ServicesAPI_ListPricingPlans_Handler,
		},
		{
			MethodName: "GetPricingPlan",
			Handler:    _ServicesAPI_GetPricingPlan_Handler,
		},
		{
			MethodName: "SetPricingPlan",
			Handler:    _ServicesAPI_SetPricingPlan_Handler,
		},
		{
			MethodName: "DeletePricingPlan",
			Handler:    _ServicesAPI_DeletePricingPlan_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _ServicesAPI_ListProviders_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _ServicesAPI_GetProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _ServicesAPI_DeleteProvider_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _ServicesAPI_ListProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ServicesAPI_GetProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ServicesAPI_DeleteProduct_Handler,
		},
		{
			MethodName: "SubmitIssue",
			Handler:    _ServicesAPI_SubmitIssue_Handler,
		},
		{
			MethodName: "CreateCloudInstance",
			Handler:    _ServicesAPI_CreateCloudInstance_Handler,
		},
		{
			MethodName: "ListCloudInstances",
			Handler:    _ServicesAPI_ListCloudInstances_Handler,
		},
		{
			MethodName: "GetCloudInstance",
			Handler:    _ServicesAPI_GetCloudInstance_Handler,
		},
		{
			MethodName: "DeleteCloudInstance",
			Handler:    _ServicesAPI_DeleteCloudInstance_Handler,
		},
		{
			MethodName: "PowerCycleCloudInstance",
			Handler:    _ServicesAPI_PowerCycleCloudInstance_Handler,
		},
		{
			MethodName: "PowerOnCloudInstance",
			Handler:    _ServicesAPI_PowerOnCloudInstance_Handler,
		},
		{
			MethodName: "PowerOffCloudInstance",
			Handler:    _ServicesAPI_PowerOffCloudInstance_Handler,
		},
		{
			MethodName: "RebootCloudInstance",
			Handler:    _ServicesAPI_RebootCloudInstance_Handler,
		},
		{
			MethodName: "ShutdownCloudInstance",
			Handler:    _ServicesAPI_ShutdownCloudInstance_Handler,
		},
		{
			MethodName: "CreateCloudKubernetesCluster",
			Handler:    _ServicesAPI_CreateCloudKubernetesCluster_Handler,
		},
		{
			MethodName: "ListCloudKubernetesClusters",
			Handler:    _ServicesAPI_ListCloudKubernetesClusters_Handler,
		},
		{
			MethodName: "GetCloudKubernetesCluster",
			Handler:    _ServicesAPI_GetCloudKubernetesCluster_Handler,
		},
		{
			MethodName: "DeleteCloudKubernetesCluster",
			Handler:    _ServicesAPI_DeleteCloudKubernetesCluster_Handler,
		},
		{
			MethodName: "CreateCloudKubernetesNodePool",
			Handler:    _ServicesAPI_CreateCloudKubernetesNodePool_Handler,
		},
		{
			MethodName: "UpdateCloudKubernetesNodePool",
			Handler:    _ServicesAPI_UpdateCloudKubernetesNodePool_Handler,
		},
		{
			MethodName: "DeleteCloudKubernetesNodePool",
			Handler:    _ServicesAPI_DeleteCloudKubernetesNodePool_Handler,
		},
		{
			MethodName: "DeleteCloudKubernetesNode",
			Handler:    _ServicesAPI_DeleteCloudKubernetesNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mmesh/protobuf/rpc/v1/servicesAPI.proto",
}
