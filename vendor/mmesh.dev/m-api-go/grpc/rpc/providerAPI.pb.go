// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.15.1
// source: mmesh/protobuf/rpc/v1/providerAPI.proto

package rpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	status "mmesh.dev/m-api-go/grpc/common/status"
	account "mmesh.dev/m-api-go/grpc/resources/account"
	billing "mmesh.dev/m-api-go/grpc/resources/billing"
	controller "mmesh.dev/m-api-go/grpc/resources/controller"
	iam "mmesh.dev/m-api-go/grpc/resources/iam"
	auth "mmesh.dev/m-api-go/grpc/resources/iam/auth"
	location "mmesh.dev/m-api-go/grpc/resources/location"
	webhook "mmesh.dev/m-api-go/grpc/resources/webhook"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

var File_mmesh_protobuf_rpc_v1_providerAPI_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_rpc_v1_providerAPI_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x41, 0x50, 0x49, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6d, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x75,
	0x74, 0x68, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c,
	0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6d, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x2f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x33, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x32, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x32, 0xa6, 0x14, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x50, 0x49,
	0x12, 0x4e, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x11, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x3a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x41, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73,
	0x12, 0x1c, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11,
	0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f,
	0x6b, 0x12, 0x10, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x68,
	0x6f, 0x6f, 0x6b, 0x1a, 0x10, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x2e, 0x57, 0x65,
	0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x12, 0x10, 0x2e, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x2e, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x0e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x20, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x12, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x81,
	0x01, 0x0a, 0x10, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x12, 0x2e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x12,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x7b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x7d, 0x2f,
	0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x3a, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x50, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x22, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0f, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73,
	0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x46, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x17, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0d,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x22,
	0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x3a, 0x01, 0x2a, 0x12, 0x62, 0x0a, 0x0a, 0x4e,
	0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x12,
	0x34, 0x0a, 0x0c, 0x53, 0x65, 0x74, 0x75, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d,
	0x12, 0x5c, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f,
	0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x5f,
	0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x12,
	0x63, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x66, 0x67,
	0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x3a, 0x01, 0x2a, 0x12, 0x35, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0e, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3d,
	0x0a, 0x15, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3f, 0x0a,
	0x17, 0x55, 0x6e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x14, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x22, 0x2d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x12,
	0x25, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x3b, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x10, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x11,
	0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x12, 0x22, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x12,
	0x52, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x73, 0x2f, 0x7b, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x7d, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x3a, 0x01, 0x2a, 0x12, 0x83, 0x01, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x36, 0x22, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x7d, 0x3a, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x2d, 0x72, 0x65, 0x73, 0x65, 0x74, 0x3a, 0x01, 0x2a, 0x42, 0x1d, 0x5a, 0x1b, 0x6d, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_mmesh_protobuf_rpc_v1_providerAPI_proto_goTypes = []interface{}{
	(*auth.LoginRequest)(nil),                 // 0: auth.LoginRequest
	(*webhook.ListWebhooksRequest)(nil),       // 1: webhook.ListWebhooksRequest
	(*webhook.Webhook)(nil),                   // 2: webhook.Webhook
	(*location.ListLocationsRequest)(nil),     // 3: location.ListLocationsRequest
	(*location.Location)(nil),                 // 4: location.Location
	(*controller.ListFederationsRequest)(nil), // 5: controller.ListFederationsRequest
	(*controller.Federation)(nil),             // 6: controller.Federation
	(*controller.Controller)(nil),             // 7: controller.Controller
	(*account.Account)(nil),                   // 8: account.Account
	(*account.NewAccountRequest)(nil),         // 9: account.NewAccountRequest
	(*account.ListAccountsRequest)(nil),       // 10: account.ListAccountsRequest
	(*iam.User)(nil),                          // 11: iam.User
	(*auth.LoginResponse)(nil),                // 12: auth.LoginResponse
	(*webhook.Webhooks)(nil),                  // 13: webhook.Webhooks
	(*status.StatusResponse)(nil),             // 14: status.StatusResponse
	(*location.Locations)(nil),                // 15: location.Locations
	(*controller.FederationSelected)(nil),     // 16: controller.FederationSelected
	(*controller.Federations)(nil),            // 17: controller.Federations
	(*controller.Controllers)(nil),            // 18: controller.Controllers
	(*status.SearchResponse)(nil),             // 19: status.SearchResponse
	(*account.NewAccountResponse)(nil),        // 20: account.NewAccountResponse
	(*account.Accounts)(nil),                  // 21: account.Accounts
	(*billing.Customer)(nil),                  // 22: billing.Customer
}
var file_mmesh_protobuf_rpc_v1_providerAPI_proto_depIdxs = []int32{
	0,  // 0: api.ProviderAPI.Login:input_type -> auth.LoginRequest
	1,  // 1: api.ProviderAPI.ListWebhooks:input_type -> webhook.ListWebhooksRequest
	2,  // 2: api.ProviderAPI.GetWebhook:input_type -> webhook.Webhook
	2,  // 3: api.ProviderAPI.DeleteWebhook:input_type -> webhook.Webhook
	3,  // 4: api.ProviderAPI.SelectLocation:input_type -> location.ListLocationsRequest
	3,  // 5: api.ProviderAPI.ListLocations:input_type -> location.ListLocationsRequest
	4,  // 6: api.ProviderAPI.GetLocation:input_type -> location.Location
	4,  // 7: api.ProviderAPI.SelectFederation:input_type -> location.Location
	5,  // 8: api.ProviderAPI.ListFederations:input_type -> controller.ListFederationsRequest
	6,  // 9: api.ProviderAPI.GetFederation:input_type -> controller.Federation
	6,  // 10: api.ProviderAPI.DeleteFederation:input_type -> controller.Federation
	6,  // 11: api.ProviderAPI.ListControllers:input_type -> controller.Federation
	7,  // 12: api.ProviderAPI.GetController:input_type -> controller.Controller
	7,  // 13: api.ProviderAPI.DeleteController:input_type -> controller.Controller
	8,  // 14: api.ProviderAPI.SearchAccount:input_type -> account.Account
	9,  // 15: api.ProviderAPI.NewAccount:input_type -> account.NewAccountRequest
	8,  // 16: api.ProviderAPI.SetupAccount:input_type -> account.Account
	10, // 17: api.ProviderAPI.ListAccounts:input_type -> account.ListAccountsRequest
	8,  // 18: api.ProviderAPI.GetAccount:input_type -> account.Account
	8,  // 19: api.ProviderAPI.UpdateAccount:input_type -> account.Account
	8,  // 20: api.ProviderAPI.DeleteAccount:input_type -> account.Account
	8,  // 21: api.ProviderAPI.SetAccountCfg:input_type -> account.Account
	8,  // 22: api.ProviderAPI.EnableAccount:input_type -> account.Account
	8,  // 23: api.ProviderAPI.DisableAccount:input_type -> account.Account
	8,  // 24: api.ProviderAPI.SetAccountService:input_type -> account.Account
	8,  // 25: api.ProviderAPI.SuspendAccountService:input_type -> account.Account
	8,  // 26: api.ProviderAPI.UnsuspendAccountService:input_type -> account.Account
	8,  // 27: api.ProviderAPI.CancelAccountService:input_type -> account.Account
	8,  // 28: api.ProviderAPI.GetAccountCustomer:input_type -> account.Account
	8,  // 29: api.ProviderAPI.SetAccountCustomer:input_type -> account.Account
	8,  // 30: api.ProviderAPI.GetAccountAdmin:input_type -> account.Account
	11, // 31: api.ProviderAPI.SetAccountAdmin:input_type -> iam.User
	8,  // 32: api.ProviderAPI.ResetAccountAdminPassword:input_type -> account.Account
	12, // 33: api.ProviderAPI.Login:output_type -> auth.LoginResponse
	13, // 34: api.ProviderAPI.ListWebhooks:output_type -> webhook.Webhooks
	2,  // 35: api.ProviderAPI.GetWebhook:output_type -> webhook.Webhook
	14, // 36: api.ProviderAPI.DeleteWebhook:output_type -> status.StatusResponse
	15, // 37: api.ProviderAPI.SelectLocation:output_type -> location.Locations
	15, // 38: api.ProviderAPI.ListLocations:output_type -> location.Locations
	4,  // 39: api.ProviderAPI.GetLocation:output_type -> location.Location
	16, // 40: api.ProviderAPI.SelectFederation:output_type -> controller.FederationSelected
	17, // 41: api.ProviderAPI.ListFederations:output_type -> controller.Federations
	6,  // 42: api.ProviderAPI.GetFederation:output_type -> controller.Federation
	14, // 43: api.ProviderAPI.DeleteFederation:output_type -> status.StatusResponse
	18, // 44: api.ProviderAPI.ListControllers:output_type -> controller.Controllers
	7,  // 45: api.ProviderAPI.GetController:output_type -> controller.Controller
	14, // 46: api.ProviderAPI.DeleteController:output_type -> status.StatusResponse
	19, // 47: api.ProviderAPI.SearchAccount:output_type -> status.SearchResponse
	20, // 48: api.ProviderAPI.NewAccount:output_type -> account.NewAccountResponse
	8,  // 49: api.ProviderAPI.SetupAccount:output_type -> account.Account
	21, // 50: api.ProviderAPI.ListAccounts:output_type -> account.Accounts
	8,  // 51: api.ProviderAPI.GetAccount:output_type -> account.Account
	8,  // 52: api.ProviderAPI.UpdateAccount:output_type -> account.Account
	14, // 53: api.ProviderAPI.DeleteAccount:output_type -> status.StatusResponse
	8,  // 54: api.ProviderAPI.SetAccountCfg:output_type -> account.Account
	8,  // 55: api.ProviderAPI.EnableAccount:output_type -> account.Account
	8,  // 56: api.ProviderAPI.DisableAccount:output_type -> account.Account
	8,  // 57: api.ProviderAPI.SetAccountService:output_type -> account.Account
	8,  // 58: api.ProviderAPI.SuspendAccountService:output_type -> account.Account
	8,  // 59: api.ProviderAPI.UnsuspendAccountService:output_type -> account.Account
	8,  // 60: api.ProviderAPI.CancelAccountService:output_type -> account.Account
	22, // 61: api.ProviderAPI.GetAccountCustomer:output_type -> billing.Customer
	22, // 62: api.ProviderAPI.SetAccountCustomer:output_type -> billing.Customer
	11, // 63: api.ProviderAPI.GetAccountAdmin:output_type -> iam.User
	11, // 64: api.ProviderAPI.SetAccountAdmin:output_type -> iam.User
	14, // 65: api.ProviderAPI.ResetAccountAdminPassword:output_type -> status.StatusResponse
	33, // [33:66] is the sub-list for method output_type
	0,  // [0:33] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_rpc_v1_providerAPI_proto_init() }
func file_mmesh_protobuf_rpc_v1_providerAPI_proto_init() {
	if File_mmesh_protobuf_rpc_v1_providerAPI_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_rpc_v1_providerAPI_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mmesh_protobuf_rpc_v1_providerAPI_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_rpc_v1_providerAPI_proto_depIdxs,
	}.Build()
	File_mmesh_protobuf_rpc_v1_providerAPI_proto = out.File
	file_mmesh_protobuf_rpc_v1_providerAPI_proto_rawDesc = nil
	file_mmesh_protobuf_rpc_v1_providerAPI_proto_goTypes = nil
	file_mmesh_protobuf_rpc_v1_providerAPI_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ProviderAPIClient is the client API for ProviderAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProviderAPIClient interface {
	// login
	Login(ctx context.Context, in *auth.LoginRequest, opts ...grpc.CallOption) (*auth.LoginResponse, error)
	// webhook
	ListWebhooks(ctx context.Context, in *webhook.ListWebhooksRequest, opts ...grpc.CallOption) (*webhook.Webhooks, error)
	GetWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*webhook.Webhook, error)
	DeleteWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// location
	SelectLocation(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error)
	ListLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error)
	GetLocation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*location.Location, error)
	// controller federation
	SelectFederation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*controller.FederationSelected, error)
	ListFederations(ctx context.Context, in *controller.ListFederationsRequest, opts ...grpc.CallOption) (*controller.Federations, error)
	GetFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Federation, error)
	DeleteFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListControllers(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Controllers, error)
	GetController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*controller.Controller, error)
	DeleteController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// account
	SearchAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.SearchResponse, error)
	NewAccount(ctx context.Context, in *account.NewAccountRequest, opts ...grpc.CallOption) (*account.NewAccountResponse, error)
	SetupAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	ListAccounts(ctx context.Context, in *account.ListAccountsRequest, opts ...grpc.CallOption) (*account.Accounts, error)
	GetAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	DeleteAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error)
	SetAccountCfg(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	EnableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	DisableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	SetAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	// rpc SetAccountServiceSubscription(account.Account) returns (account.Account) {}
	// rpc SetAccountServiceLimits(account.Account) returns (account.Account) {}
	SuspendAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	UnsuspendAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	CancelAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	GetAccountCustomer(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*billing.Customer, error)
	SetAccountCustomer(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*billing.Customer, error)
	GetAccountAdmin(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.User, error)
	SetAccountAdmin(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	ResetAccountAdminPassword(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error)
}

type providerAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewProviderAPIClient(cc grpc.ClientConnInterface) ProviderAPIClient {
	return &providerAPIClient{cc}
}

func (c *providerAPIClient) Login(ctx context.Context, in *auth.LoginRequest, opts ...grpc.CallOption) (*auth.LoginResponse, error) {
	out := new(auth.LoginResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListWebhooks(ctx context.Context, in *webhook.ListWebhooksRequest, opts ...grpc.CallOption) (*webhook.Webhooks, error) {
	out := new(webhook.Webhooks)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListWebhooks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*webhook.Webhook, error) {
	out := new(webhook.Webhook)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DeleteWebhook(ctx context.Context, in *webhook.Webhook, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SelectLocation(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error) {
	out := new(location.Locations)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SelectLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListLocations(ctx context.Context, in *location.ListLocationsRequest, opts ...grpc.CallOption) (*location.Locations, error) {
	out := new(location.Locations)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetLocation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*location.Location, error) {
	out := new(location.Location)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SelectFederation(ctx context.Context, in *location.Location, opts ...grpc.CallOption) (*controller.FederationSelected, error) {
	out := new(controller.FederationSelected)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SelectFederation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListFederations(ctx context.Context, in *controller.ListFederationsRequest, opts ...grpc.CallOption) (*controller.Federations, error) {
	out := new(controller.Federations)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListFederations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Federation, error) {
	out := new(controller.Federation)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetFederation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DeleteFederation(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DeleteFederation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListControllers(ctx context.Context, in *controller.Federation, opts ...grpc.CallOption) (*controller.Controllers, error) {
	out := new(controller.Controllers)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*controller.Controller, error) {
	out := new(controller.Controller)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DeleteController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DeleteController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SearchAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.SearchResponse, error) {
	out := new(status.SearchResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SearchAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) NewAccount(ctx context.Context, in *account.NewAccountRequest, opts ...grpc.CallOption) (*account.NewAccountResponse, error) {
	out := new(account.NewAccountResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetupAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetupAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ListAccounts(ctx context.Context, in *account.ListAccountsRequest, opts ...grpc.CallOption) (*account.Accounts, error) {
	out := new(account.Accounts)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) UpdateAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DeleteAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetAccountCfg(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetAccountCfg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) EnableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/EnableAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) DisableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/DisableAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SuspendAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SuspendAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) UnsuspendAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/UnsuspendAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) CancelAccountService(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/CancelAccountService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetAccountCustomer(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*billing.Customer, error) {
	out := new(billing.Customer)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetAccountCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetAccountCustomer(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*billing.Customer, error) {
	out := new(billing.Customer)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetAccountCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) GetAccountAdmin(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/GetAccountAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) SetAccountAdmin(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/SetAccountAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerAPIClient) ResetAccountAdminPassword(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ProviderAPI/ResetAccountAdminPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderAPIServer is the server API for ProviderAPI service.
type ProviderAPIServer interface {
	// login
	Login(context.Context, *auth.LoginRequest) (*auth.LoginResponse, error)
	// webhook
	ListWebhooks(context.Context, *webhook.ListWebhooksRequest) (*webhook.Webhooks, error)
	GetWebhook(context.Context, *webhook.Webhook) (*webhook.Webhook, error)
	DeleteWebhook(context.Context, *webhook.Webhook) (*status.StatusResponse, error)
	// location
	SelectLocation(context.Context, *location.ListLocationsRequest) (*location.Locations, error)
	ListLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error)
	GetLocation(context.Context, *location.Location) (*location.Location, error)
	// controller federation
	SelectFederation(context.Context, *location.Location) (*controller.FederationSelected, error)
	ListFederations(context.Context, *controller.ListFederationsRequest) (*controller.Federations, error)
	GetFederation(context.Context, *controller.Federation) (*controller.Federation, error)
	DeleteFederation(context.Context, *controller.Federation) (*status.StatusResponse, error)
	ListControllers(context.Context, *controller.Federation) (*controller.Controllers, error)
	GetController(context.Context, *controller.Controller) (*controller.Controller, error)
	DeleteController(context.Context, *controller.Controller) (*status.StatusResponse, error)
	// account
	SearchAccount(context.Context, *account.Account) (*status.SearchResponse, error)
	NewAccount(context.Context, *account.NewAccountRequest) (*account.NewAccountResponse, error)
	SetupAccount(context.Context, *account.Account) (*account.Account, error)
	ListAccounts(context.Context, *account.ListAccountsRequest) (*account.Accounts, error)
	GetAccount(context.Context, *account.Account) (*account.Account, error)
	UpdateAccount(context.Context, *account.Account) (*account.Account, error)
	DeleteAccount(context.Context, *account.Account) (*status.StatusResponse, error)
	SetAccountCfg(context.Context, *account.Account) (*account.Account, error)
	EnableAccount(context.Context, *account.Account) (*account.Account, error)
	DisableAccount(context.Context, *account.Account) (*account.Account, error)
	SetAccountService(context.Context, *account.Account) (*account.Account, error)
	// rpc SetAccountServiceSubscription(account.Account) returns (account.Account) {}
	// rpc SetAccountServiceLimits(account.Account) returns (account.Account) {}
	SuspendAccountService(context.Context, *account.Account) (*account.Account, error)
	UnsuspendAccountService(context.Context, *account.Account) (*account.Account, error)
	CancelAccountService(context.Context, *account.Account) (*account.Account, error)
	GetAccountCustomer(context.Context, *account.Account) (*billing.Customer, error)
	SetAccountCustomer(context.Context, *account.Account) (*billing.Customer, error)
	GetAccountAdmin(context.Context, *account.Account) (*iam.User, error)
	SetAccountAdmin(context.Context, *iam.User) (*iam.User, error)
	ResetAccountAdminPassword(context.Context, *account.Account) (*status.StatusResponse, error)
}

// UnimplementedProviderAPIServer can be embedded to have forward compatible implementations.
type UnimplementedProviderAPIServer struct {
}

func (*UnimplementedProviderAPIServer) Login(context.Context, *auth.LoginRequest) (*auth.LoginResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedProviderAPIServer) ListWebhooks(context.Context, *webhook.ListWebhooksRequest) (*webhook.Webhooks, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWebhooks not implemented")
}
func (*UnimplementedProviderAPIServer) GetWebhook(context.Context, *webhook.Webhook) (*webhook.Webhook, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWebhook not implemented")
}
func (*UnimplementedProviderAPIServer) DeleteWebhook(context.Context, *webhook.Webhook) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWebhook not implemented")
}
func (*UnimplementedProviderAPIServer) SelectLocation(context.Context, *location.ListLocationsRequest) (*location.Locations, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SelectLocation not implemented")
}
func (*UnimplementedProviderAPIServer) ListLocations(context.Context, *location.ListLocationsRequest) (*location.Locations, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListLocations not implemented")
}
func (*UnimplementedProviderAPIServer) GetLocation(context.Context, *location.Location) (*location.Location, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLocation not implemented")
}
func (*UnimplementedProviderAPIServer) SelectFederation(context.Context, *location.Location) (*controller.FederationSelected, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SelectFederation not implemented")
}
func (*UnimplementedProviderAPIServer) ListFederations(context.Context, *controller.ListFederationsRequest) (*controller.Federations, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListFederations not implemented")
}
func (*UnimplementedProviderAPIServer) GetFederation(context.Context, *controller.Federation) (*controller.Federation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetFederation not implemented")
}
func (*UnimplementedProviderAPIServer) DeleteFederation(context.Context, *controller.Federation) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteFederation not implemented")
}
func (*UnimplementedProviderAPIServer) ListControllers(context.Context, *controller.Federation) (*controller.Controllers, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllers not implemented")
}
func (*UnimplementedProviderAPIServer) GetController(context.Context, *controller.Controller) (*controller.Controller, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetController not implemented")
}
func (*UnimplementedProviderAPIServer) DeleteController(context.Context, *controller.Controller) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteController not implemented")
}
func (*UnimplementedProviderAPIServer) SearchAccount(context.Context, *account.Account) (*status.SearchResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SearchAccount not implemented")
}
func (*UnimplementedProviderAPIServer) NewAccount(context.Context, *account.NewAccountRequest) (*account.NewAccountResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (*UnimplementedProviderAPIServer) SetupAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetupAccount not implemented")
}
func (*UnimplementedProviderAPIServer) ListAccounts(context.Context, *account.ListAccountsRequest) (*account.Accounts, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (*UnimplementedProviderAPIServer) GetAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedProviderAPIServer) UpdateAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (*UnimplementedProviderAPIServer) DeleteAccount(context.Context, *account.Account) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedProviderAPIServer) SetAccountCfg(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetAccountCfg not implemented")
}
func (*UnimplementedProviderAPIServer) EnableAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method EnableAccount not implemented")
}
func (*UnimplementedProviderAPIServer) DisableAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DisableAccount not implemented")
}
func (*UnimplementedProviderAPIServer) SetAccountService(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetAccountService not implemented")
}
func (*UnimplementedProviderAPIServer) SuspendAccountService(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SuspendAccountService not implemented")
}
func (*UnimplementedProviderAPIServer) UnsuspendAccountService(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UnsuspendAccountService not implemented")
}
func (*UnimplementedProviderAPIServer) CancelAccountService(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CancelAccountService not implemented")
}
func (*UnimplementedProviderAPIServer) GetAccountCustomer(context.Context, *account.Account) (*billing.Customer, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAccountCustomer not implemented")
}
func (*UnimplementedProviderAPIServer) SetAccountCustomer(context.Context, *account.Account) (*billing.Customer, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetAccountCustomer not implemented")
}
func (*UnimplementedProviderAPIServer) GetAccountAdmin(context.Context, *account.Account) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAccountAdmin not implemented")
}
func (*UnimplementedProviderAPIServer) SetAccountAdmin(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetAccountAdmin not implemented")
}
func (*UnimplementedProviderAPIServer) ResetAccountAdminPassword(context.Context, *account.Account) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ResetAccountAdminPassword not implemented")
}

func RegisterProviderAPIServer(s *grpc.Server, srv ProviderAPIServer) {
	s.RegisterService(&_ProviderAPI_serviceDesc, srv)
}

func _ProviderAPI_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(auth.LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).Login(ctx, req.(*auth.LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListWebhooks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(webhook.ListWebhooksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListWebhooks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListWebhooks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListWebhooks(ctx, req.(*webhook.ListWebhooksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(webhook.Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetWebhook(ctx, req.(*webhook.Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(webhook.Webhook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DeleteWebhook(ctx, req.(*webhook.Webhook))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SelectLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SelectLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SelectLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SelectLocation(ctx, req.(*location.ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.ListLocationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListLocations(ctx, req.(*location.ListLocationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetLocation(ctx, req.(*location.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SelectFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(location.Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SelectFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SelectFederation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SelectFederation(ctx, req.(*location.Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListFederations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.ListFederationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListFederations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListFederations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListFederations(ctx, req.(*controller.ListFederationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Federation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetFederation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetFederation(ctx, req.(*controller.Federation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DeleteFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Federation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DeleteFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DeleteFederation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DeleteFederation(ctx, req.(*controller.Federation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Federation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListControllers(ctx, req.(*controller.Federation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Controller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetController(ctx, req.(*controller.Controller))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DeleteController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Controller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DeleteController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DeleteController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DeleteController(ctx, req.(*controller.Controller))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SearchAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SearchAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SearchAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SearchAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.NewAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).NewAccount(ctx, req.(*account.NewAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetupAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetupAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetupAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetupAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.ListAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ListAccounts(ctx, req.(*account.ListAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).UpdateAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DeleteAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetAccountCfg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetAccountCfg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetAccountCfg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetAccountCfg(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_EnableAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).EnableAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/EnableAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).EnableAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_DisableAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).DisableAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/DisableAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).DisableAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetAccountService(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SuspendAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SuspendAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SuspendAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SuspendAccountService(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_UnsuspendAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).UnsuspendAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/UnsuspendAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).UnsuspendAccountService(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_CancelAccountService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).CancelAccountService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/CancelAccountService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).CancelAccountService(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetAccountCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetAccountCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetAccountCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetAccountCustomer(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetAccountCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetAccountCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetAccountCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetAccountCustomer(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_GetAccountAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).GetAccountAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/GetAccountAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).GetAccountAdmin(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_SetAccountAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).SetAccountAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/SetAccountAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).SetAccountAdmin(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProviderAPI_ResetAccountAdminPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderAPIServer).ResetAccountAdminPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ProviderAPI/ResetAccountAdminPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderAPIServer).ResetAccountAdminPassword(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProviderAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.ProviderAPI",
	HandlerType: (*ProviderAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ProviderAPI_Login_Handler,
		},
		{
			MethodName: "ListWebhooks",
			Handler:    _ProviderAPI_ListWebhooks_Handler,
		},
		{
			MethodName: "GetWebhook",
			Handler:    _ProviderAPI_GetWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _ProviderAPI_DeleteWebhook_Handler,
		},
		{
			MethodName: "SelectLocation",
			Handler:    _ProviderAPI_SelectLocation_Handler,
		},
		{
			MethodName: "ListLocations",
			Handler:    _ProviderAPI_ListLocations_Handler,
		},
		{
			MethodName: "GetLocation",
			Handler:    _ProviderAPI_GetLocation_Handler,
		},
		{
			MethodName: "SelectFederation",
			Handler:    _ProviderAPI_SelectFederation_Handler,
		},
		{
			MethodName: "ListFederations",
			Handler:    _ProviderAPI_ListFederations_Handler,
		},
		{
			MethodName: "GetFederation",
			Handler:    _ProviderAPI_GetFederation_Handler,
		},
		{
			MethodName: "DeleteFederation",
			Handler:    _ProviderAPI_DeleteFederation_Handler,
		},
		{
			MethodName: "ListControllers",
			Handler:    _ProviderAPI_ListControllers_Handler,
		},
		{
			MethodName: "GetController",
			Handler:    _ProviderAPI_GetController_Handler,
		},
		{
			MethodName: "DeleteController",
			Handler:    _ProviderAPI_DeleteController_Handler,
		},
		{
			MethodName: "SearchAccount",
			Handler:    _ProviderAPI_SearchAccount_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _ProviderAPI_NewAccount_Handler,
		},
		{
			MethodName: "SetupAccount",
			Handler:    _ProviderAPI_SetupAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _ProviderAPI_ListAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _ProviderAPI_GetAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _ProviderAPI_UpdateAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _ProviderAPI_DeleteAccount_Handler,
		},
		{
			MethodName: "SetAccountCfg",
			Handler:    _ProviderAPI_SetAccountCfg_Handler,
		},
		{
			MethodName: "EnableAccount",
			Handler:    _ProviderAPI_EnableAccount_Handler,
		},
		{
			MethodName: "DisableAccount",
			Handler:    _ProviderAPI_DisableAccount_Handler,
		},
		{
			MethodName: "SetAccountService",
			Handler:    _ProviderAPI_SetAccountService_Handler,
		},
		{
			MethodName: "SuspendAccountService",
			Handler:    _ProviderAPI_SuspendAccountService_Handler,
		},
		{
			MethodName: "UnsuspendAccountService",
			Handler:    _ProviderAPI_UnsuspendAccountService_Handler,
		},
		{
			MethodName: "CancelAccountService",
			Handler:    _ProviderAPI_CancelAccountService_Handler,
		},
		{
			MethodName: "GetAccountCustomer",
			Handler:    _ProviderAPI_GetAccountCustomer_Handler,
		},
		{
			MethodName: "SetAccountCustomer",
			Handler:    _ProviderAPI_SetAccountCustomer_Handler,
		},
		{
			MethodName: "GetAccountAdmin",
			Handler:    _ProviderAPI_GetAccountAdmin_Handler,
		},
		{
			MethodName: "SetAccountAdmin",
			Handler:    _ProviderAPI_SetAccountAdmin_Handler,
		},
		{
			MethodName: "ResetAccountAdminPassword",
			Handler:    _ProviderAPI_ResetAccountAdminPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mmesh/protobuf/rpc/v1/providerAPI.proto",
}
