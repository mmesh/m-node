// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: mmesh/protobuf/rpc/v1/servicesAPI.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	status "mmesh.dev/m-api-go/grpc/common/status"
	itsm "mmesh.dev/m-api-go/grpc/resources/itsm"
	services "mmesh.dev/m-api-go/grpc/resources/services"
	pro "mmesh.dev/m-api-go/grpc/resources/services/catalog/pro"
	cloud "mmesh.dev/m-api-go/grpc/resources/services/platform/cloud"
	crm "mmesh.dev/m-api-go/grpc/resources/services/platform/crm"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServicesAPIClient is the client API for ServicesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesAPIClient interface {
	// pricingPlan
	//   rpc NewPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/pricingPlans:new"
	//       body: "*"
	//     };
	//   }
	ListPricingPlans(ctx context.Context, in *services.ListPricingPlansRequest, opts ...grpc.CallOption) (*services.PricingPlans, error)
	GetPricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*services.PricingPlan, error)
	//   rpc SetPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/pricingPlans/{pricingPlanID}"
	//       body: "*"
	//     };
	//   }
	DeletePricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// resourceUnit
	//   rpc NewResourceUnit(services.ResourceUnit) returns (services.ResourceUnit) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/resourceUnits:new"
	//       body: "*"
	//     };
	//   }
	ListResourceUnits(ctx context.Context, in *services.ListResourceUnitsRequest, opts ...grpc.CallOption) (*services.ResourceUnits, error)
	GetResourceUnit(ctx context.Context, in *services.ResourceUnit, opts ...grpc.CallOption) (*services.ResourceUnit, error)
	//   rpc SetResourceUnit(services.ResourceUnit) returns (services.ResourceUnit) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/resourceUnits/{resourceUnitID}"
	//       body: "*"
	//     };
	//   }
	DeleteResourceUnit(ctx context.Context, in *services.ResourceUnit, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// provider
	//   rpc NewProvider(services.Provider) returns (services.Provider) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers:new"
	//       body: "*"
	//     };
	//   }
	ListProviders(ctx context.Context, in *services.ListProvidersRequest, opts ...grpc.CallOption) (*services.Providers, error)
	GetProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*services.Provider, error)
	//   rpc SetProvider(services.Provider) returns (services.Provider) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}"
	//       body: "*"
	//     };
	//   }
	DeleteProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// provider product catalog
	SetProductCatalog(ctx context.Context, in *pro.ProductCatalog, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// product
	//   rpc NewProduct(services.Product) returns (services.Product) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}/products:new"
	//       body: "*"
	//     };
	//   }
	ListProducts(ctx context.Context, in *services.ListProductsRequest, opts ...grpc.CallOption) (*services.Products, error)
	GetProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*services.Product, error)
	//   rpc SetProduct(services.Product) returns (services.Product) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}/products/{productID}"
	//       body: "*"
	//     };
	//   }
	DeleteProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// itsm
	RequestService(ctx context.Context, in *crm.ServiceRequest, opts ...grpc.CallOption) (*itsm.Issue, error)
	//   rpc SubmitIssue(itsm.Issue) returns (itsm.Issue) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/itsm/issues:submit"
	//       body: "*"
	//     };
	//   }
	NewIssue(ctx context.Context, in *itsm.Issue, opts ...grpc.CallOption) (*itsm.Issue, error)
	NewIssueComment(ctx context.Context, in *itsm.IssueNewCommentRequest, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListIssues(ctx context.Context, in *itsm.ListIssuesRequest, opts ...grpc.CallOption) (*itsm.Issues, error)
	GetIssue(ctx context.Context, in *itsm.IssueRequest, opts ...grpc.CallOption) (*itsm.Issue, error)
	//   rpc SetIssue(itsm.Issue) returns (itsm.Issue) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/itsm/issues/{issueID}"
	//       body: "*"
	//     };
	//   }
	DeleteIssue(ctx context.Context, in *itsm.IssueRequest, opts ...grpc.CallOption) (*status.StatusResponse, error)
	CloseIssue(ctx context.Context, in *itsm.IssueRequest, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// cloud-instances
	CreateCloudInstance(ctx context.Context, in *cloud.InstanceRequest, opts ...grpc.CallOption) (*cloud.Instance, error)
	ListCloudInstances(ctx context.Context, in *cloud.ListInstancesRequest, opts ...grpc.CallOption) (*cloud.Instances, error)
	GetCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	DeleteCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*status.StatusResponse, error)
	PowerCycleCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	PowerOnCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	PowerOffCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	RebootCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	ShutdownCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error)
	// kubernetes
	CreateCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesClusterRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	ListCloudKubernetesClusters(ctx context.Context, in *cloud.ListKubernetesClustersRequest, opts ...grpc.CallOption) (*cloud.KubernetesClusters, error)
	GetCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesCluster, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesCluster, opts ...grpc.CallOption) (*status.StatusResponse, error)
	CreateCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	UpdateCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesNode(ctx context.Context, in *cloud.KubernetesNodeDeleteRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error)
	// crm opportunities
	ListOpportunities(ctx context.Context, in *crm.ListOpportunitiesRequest, opts ...grpc.CallOption) (*crm.Opportunities, error)
	GetOpportunity(ctx context.Context, in *crm.Opportunity, opts ...grpc.CallOption) (*crm.Opportunity, error)
	//   rpc SetOpportunity(crm.Opportunity) returns (crm.Opportunity) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/services/crm/opportunities/{opportunityID}"
	//       body: "*"
	//     };
	//   }
	DeleteOpportunity(ctx context.Context, in *crm.Opportunity, opts ...grpc.CallOption) (*status.StatusResponse, error)
	SetOpportunityMilestone(ctx context.Context, in *crm.OpportunityMilestoneSetRequest, opts ...grpc.CallOption) (*crm.Opportunity, error)
	SetOpportunityOutcome(ctx context.Context, in *crm.OpportunityOutcomeSetRequest, opts ...grpc.CallOption) (*crm.Opportunity, error)
}

type servicesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesAPIClient(cc grpc.ClientConnInterface) ServicesAPIClient {
	return &servicesAPIClient{cc}
}

func (c *servicesAPIClient) ListPricingPlans(ctx context.Context, in *services.ListPricingPlansRequest, opts ...grpc.CallOption) (*services.PricingPlans, error) {
	out := new(services.PricingPlans)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListPricingPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetPricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*services.PricingPlan, error) {
	out := new(services.PricingPlan)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetPricingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeletePricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeletePricingPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListResourceUnits(ctx context.Context, in *services.ListResourceUnitsRequest, opts ...grpc.CallOption) (*services.ResourceUnits, error) {
	out := new(services.ResourceUnits)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListResourceUnits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetResourceUnit(ctx context.Context, in *services.ResourceUnit, opts ...grpc.CallOption) (*services.ResourceUnit, error) {
	out := new(services.ResourceUnit)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetResourceUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteResourceUnit(ctx context.Context, in *services.ResourceUnit, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteResourceUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListProviders(ctx context.Context, in *services.ListProvidersRequest, opts ...grpc.CallOption) (*services.Providers, error) {
	out := new(services.Providers)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListProviders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*services.Provider, error) {
	out := new(services.Provider)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteProvider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) SetProductCatalog(ctx context.Context, in *pro.ProductCatalog, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/SetProductCatalog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListProducts(ctx context.Context, in *services.ListProductsRequest, opts ...grpc.CallOption) (*services.Products, error) {
	out := new(services.Products)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*services.Product, error) {
	out := new(services.Product)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) RequestService(ctx context.Context, in *crm.ServiceRequest, opts ...grpc.CallOption) (*itsm.Issue, error) {
	out := new(itsm.Issue)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/RequestService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) NewIssue(ctx context.Context, in *itsm.Issue, opts ...grpc.CallOption) (*itsm.Issue, error) {
	out := new(itsm.Issue)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/NewIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) NewIssueComment(ctx context.Context, in *itsm.IssueNewCommentRequest, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/NewIssueComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListIssues(ctx context.Context, in *itsm.ListIssuesRequest, opts ...grpc.CallOption) (*itsm.Issues, error) {
	out := new(itsm.Issues)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetIssue(ctx context.Context, in *itsm.IssueRequest, opts ...grpc.CallOption) (*itsm.Issue, error) {
	out := new(itsm.Issue)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteIssue(ctx context.Context, in *itsm.IssueRequest, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) CloseIssue(ctx context.Context, in *itsm.IssueRequest, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/CloseIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) CreateCloudInstance(ctx context.Context, in *cloud.InstanceRequest, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/CreateCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListCloudInstances(ctx context.Context, in *cloud.ListInstancesRequest, opts ...grpc.CallOption) (*cloud.Instances, error) {
	out := new(cloud.Instances)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListCloudInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) PowerCycleCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/PowerCycleCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) PowerOnCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/PowerOnCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) PowerOffCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/PowerOffCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) RebootCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/RebootCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ShutdownCloudInstance(ctx context.Context, in *cloud.Instance, opts ...grpc.CallOption) (*cloud.Instance, error) {
	out := new(cloud.Instance)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ShutdownCloudInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) CreateCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesClusterRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/CreateCloudKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListCloudKubernetesClusters(ctx context.Context, in *cloud.ListKubernetesClustersRequest, opts ...grpc.CallOption) (*cloud.KubernetesClusters, error) {
	out := new(cloud.KubernetesClusters)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListCloudKubernetesClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesCluster, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetCloudKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteCloudKubernetesCluster(ctx context.Context, in *cloud.KubernetesCluster, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteCloudKubernetesCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) CreateCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/CreateCloudKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) UpdateCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/UpdateCloudKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteCloudKubernetesNodePool(ctx context.Context, in *cloud.KubernetesNodePoolRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteCloudKubernetesNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteCloudKubernetesNode(ctx context.Context, in *cloud.KubernetesNodeDeleteRequest, opts ...grpc.CallOption) (*cloud.KubernetesCluster, error) {
	out := new(cloud.KubernetesCluster)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteCloudKubernetesNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListOpportunities(ctx context.Context, in *crm.ListOpportunitiesRequest, opts ...grpc.CallOption) (*crm.Opportunities, error) {
	out := new(crm.Opportunities)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/ListOpportunities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetOpportunity(ctx context.Context, in *crm.Opportunity, opts ...grpc.CallOption) (*crm.Opportunity, error) {
	out := new(crm.Opportunity)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/GetOpportunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteOpportunity(ctx context.Context, in *crm.Opportunity, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/DeleteOpportunity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) SetOpportunityMilestone(ctx context.Context, in *crm.OpportunityMilestoneSetRequest, opts ...grpc.CallOption) (*crm.Opportunity, error) {
	out := new(crm.Opportunity)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/SetOpportunityMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) SetOpportunityOutcome(ctx context.Context, in *crm.OpportunityOutcomeSetRequest, opts ...grpc.CallOption) (*crm.Opportunity, error) {
	out := new(crm.Opportunity)
	err := c.cc.Invoke(ctx, "/api.ServicesAPI/SetOpportunityOutcome", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesAPIServer is the server API for ServicesAPI service.
// All implementations must embed UnimplementedServicesAPIServer
// for forward compatibility
type ServicesAPIServer interface {
	// pricingPlan
	//   rpc NewPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/pricingPlans:new"
	//       body: "*"
	//     };
	//   }
	ListPricingPlans(context.Context, *services.ListPricingPlansRequest) (*services.PricingPlans, error)
	GetPricingPlan(context.Context, *services.PricingPlan) (*services.PricingPlan, error)
	//   rpc SetPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/pricingPlans/{pricingPlanID}"
	//       body: "*"
	//     };
	//   }
	DeletePricingPlan(context.Context, *services.PricingPlan) (*status.StatusResponse, error)
	// resourceUnit
	//   rpc NewResourceUnit(services.ResourceUnit) returns (services.ResourceUnit) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/resourceUnits:new"
	//       body: "*"
	//     };
	//   }
	ListResourceUnits(context.Context, *services.ListResourceUnitsRequest) (*services.ResourceUnits, error)
	GetResourceUnit(context.Context, *services.ResourceUnit) (*services.ResourceUnit, error)
	//   rpc SetResourceUnit(services.ResourceUnit) returns (services.ResourceUnit) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/resourceUnits/{resourceUnitID}"
	//       body: "*"
	//     };
	//   }
	DeleteResourceUnit(context.Context, *services.ResourceUnit) (*status.StatusResponse, error)
	// provider
	//   rpc NewProvider(services.Provider) returns (services.Provider) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers:new"
	//       body: "*"
	//     };
	//   }
	ListProviders(context.Context, *services.ListProvidersRequest) (*services.Providers, error)
	GetProvider(context.Context, *services.Provider) (*services.Provider, error)
	//   rpc SetProvider(services.Provider) returns (services.Provider) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}"
	//       body: "*"
	//     };
	//   }
	DeleteProvider(context.Context, *services.Provider) (*status.StatusResponse, error)
	// provider product catalog
	SetProductCatalog(context.Context, *pro.ProductCatalog) (*status.StatusResponse, error)
	// product
	//   rpc NewProduct(services.Product) returns (services.Product) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}/products:new"
	//       body: "*"
	//     };
	//   }
	ListProducts(context.Context, *services.ListProductsRequest) (*services.Products, error)
	GetProduct(context.Context, *services.Product) (*services.Product, error)
	//   rpc SetProduct(services.Product) returns (services.Product) {
	//     option (google.api.http) = {
	//       post: "/api/v1/services/{serviceID}/providers/{providerID}/products/{productID}"
	//       body: "*"
	//     };
	//   }
	DeleteProduct(context.Context, *services.Product) (*status.StatusResponse, error)
	// itsm
	RequestService(context.Context, *crm.ServiceRequest) (*itsm.Issue, error)
	//   rpc SubmitIssue(itsm.Issue) returns (itsm.Issue) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/itsm/issues:submit"
	//       body: "*"
	//     };
	//   }
	NewIssue(context.Context, *itsm.Issue) (*itsm.Issue, error)
	NewIssueComment(context.Context, *itsm.IssueNewCommentRequest) (*status.StatusResponse, error)
	ListIssues(context.Context, *itsm.ListIssuesRequest) (*itsm.Issues, error)
	GetIssue(context.Context, *itsm.IssueRequest) (*itsm.Issue, error)
	//   rpc SetIssue(itsm.Issue) returns (itsm.Issue) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/itsm/issues/{issueID}"
	//       body: "*"
	//     };
	//   }
	DeleteIssue(context.Context, *itsm.IssueRequest) (*status.StatusResponse, error)
	CloseIssue(context.Context, *itsm.IssueRequest) (*status.StatusResponse, error)
	// cloud-instances
	CreateCloudInstance(context.Context, *cloud.InstanceRequest) (*cloud.Instance, error)
	ListCloudInstances(context.Context, *cloud.ListInstancesRequest) (*cloud.Instances, error)
	GetCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	DeleteCloudInstance(context.Context, *cloud.Instance) (*status.StatusResponse, error)
	PowerCycleCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	PowerOnCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	PowerOffCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	RebootCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	ShutdownCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error)
	// kubernetes
	CreateCloudKubernetesCluster(context.Context, *cloud.KubernetesClusterRequest) (*cloud.KubernetesCluster, error)
	ListCloudKubernetesClusters(context.Context, *cloud.ListKubernetesClustersRequest) (*cloud.KubernetesClusters, error)
	GetCloudKubernetesCluster(context.Context, *cloud.KubernetesCluster) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesCluster(context.Context, *cloud.KubernetesCluster) (*status.StatusResponse, error)
	CreateCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error)
	UpdateCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error)
	DeleteCloudKubernetesNode(context.Context, *cloud.KubernetesNodeDeleteRequest) (*cloud.KubernetesCluster, error)
	// crm opportunities
	ListOpportunities(context.Context, *crm.ListOpportunitiesRequest) (*crm.Opportunities, error)
	GetOpportunity(context.Context, *crm.Opportunity) (*crm.Opportunity, error)
	//   rpc SetOpportunity(crm.Opportunity) returns (crm.Opportunity) {
	//     option (google.api.http) = {
	//       post: "/api/v1/accounts/{accountID}/services/crm/opportunities/{opportunityID}"
	//       body: "*"
	//     };
	//   }
	DeleteOpportunity(context.Context, *crm.Opportunity) (*status.StatusResponse, error)
	SetOpportunityMilestone(context.Context, *crm.OpportunityMilestoneSetRequest) (*crm.Opportunity, error)
	SetOpportunityOutcome(context.Context, *crm.OpportunityOutcomeSetRequest) (*crm.Opportunity, error)
	mustEmbedUnimplementedServicesAPIServer()
}

// UnimplementedServicesAPIServer must be embedded to have forward compatible implementations.
type UnimplementedServicesAPIServer struct {
}

func (UnimplementedServicesAPIServer) ListPricingPlans(context.Context, *services.ListPricingPlansRequest) (*services.PricingPlans, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPricingPlans not implemented")
}
func (UnimplementedServicesAPIServer) GetPricingPlan(context.Context, *services.PricingPlan) (*services.PricingPlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetPricingPlan not implemented")
}
func (UnimplementedServicesAPIServer) DeletePricingPlan(context.Context, *services.PricingPlan) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeletePricingPlan not implemented")
}
func (UnimplementedServicesAPIServer) ListResourceUnits(context.Context, *services.ListResourceUnitsRequest) (*services.ResourceUnits, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListResourceUnits not implemented")
}
func (UnimplementedServicesAPIServer) GetResourceUnit(context.Context, *services.ResourceUnit) (*services.ResourceUnit, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetResourceUnit not implemented")
}
func (UnimplementedServicesAPIServer) DeleteResourceUnit(context.Context, *services.ResourceUnit) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteResourceUnit not implemented")
}
func (UnimplementedServicesAPIServer) ListProviders(context.Context, *services.ListProvidersRequest) (*services.Providers, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedServicesAPIServer) GetProvider(context.Context, *services.Provider) (*services.Provider, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedServicesAPIServer) DeleteProvider(context.Context, *services.Provider) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedServicesAPIServer) SetProductCatalog(context.Context, *pro.ProductCatalog) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetProductCatalog not implemented")
}
func (UnimplementedServicesAPIServer) ListProducts(context.Context, *services.ListProductsRequest) (*services.Products, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedServicesAPIServer) GetProduct(context.Context, *services.Product) (*services.Product, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedServicesAPIServer) DeleteProduct(context.Context, *services.Product) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedServicesAPIServer) RequestService(context.Context, *crm.ServiceRequest) (*itsm.Issue, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RequestService not implemented")
}
func (UnimplementedServicesAPIServer) NewIssue(context.Context, *itsm.Issue) (*itsm.Issue, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method NewIssue not implemented")
}
func (UnimplementedServicesAPIServer) NewIssueComment(context.Context, *itsm.IssueNewCommentRequest) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method NewIssueComment not implemented")
}
func (UnimplementedServicesAPIServer) ListIssues(context.Context, *itsm.ListIssuesRequest) (*itsm.Issues, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListIssues not implemented")
}
func (UnimplementedServicesAPIServer) GetIssue(context.Context, *itsm.IssueRequest) (*itsm.Issue, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetIssue not implemented")
}
func (UnimplementedServicesAPIServer) DeleteIssue(context.Context, *itsm.IssueRequest) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteIssue not implemented")
}
func (UnimplementedServicesAPIServer) CloseIssue(context.Context, *itsm.IssueRequest) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CloseIssue not implemented")
}
func (UnimplementedServicesAPIServer) CreateCloudInstance(context.Context, *cloud.InstanceRequest) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateCloudInstance not implemented")
}
func (UnimplementedServicesAPIServer) ListCloudInstances(context.Context, *cloud.ListInstancesRequest) (*cloud.Instances, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCloudInstances not implemented")
}
func (UnimplementedServicesAPIServer) GetCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetCloudInstance not implemented")
}
func (UnimplementedServicesAPIServer) DeleteCloudInstance(context.Context, *cloud.Instance) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCloudInstance not implemented")
}
func (UnimplementedServicesAPIServer) PowerCycleCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PowerCycleCloudInstance not implemented")
}
func (UnimplementedServicesAPIServer) PowerOnCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PowerOnCloudInstance not implemented")
}
func (UnimplementedServicesAPIServer) PowerOffCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method PowerOffCloudInstance not implemented")
}
func (UnimplementedServicesAPIServer) RebootCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method RebootCloudInstance not implemented")
}
func (UnimplementedServicesAPIServer) ShutdownCloudInstance(context.Context, *cloud.Instance) (*cloud.Instance, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ShutdownCloudInstance not implemented")
}
func (UnimplementedServicesAPIServer) CreateCloudKubernetesCluster(context.Context, *cloud.KubernetesClusterRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateCloudKubernetesCluster not implemented")
}
func (UnimplementedServicesAPIServer) ListCloudKubernetesClusters(context.Context, *cloud.ListKubernetesClustersRequest) (*cloud.KubernetesClusters, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListCloudKubernetesClusters not implemented")
}
func (UnimplementedServicesAPIServer) GetCloudKubernetesCluster(context.Context, *cloud.KubernetesCluster) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetCloudKubernetesCluster not implemented")
}
func (UnimplementedServicesAPIServer) DeleteCloudKubernetesCluster(context.Context, *cloud.KubernetesCluster) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCloudKubernetesCluster not implemented")
}
func (UnimplementedServicesAPIServer) CreateCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateCloudKubernetesNodePool not implemented")
}
func (UnimplementedServicesAPIServer) UpdateCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UpdateCloudKubernetesNodePool not implemented")
}
func (UnimplementedServicesAPIServer) DeleteCloudKubernetesNodePool(context.Context, *cloud.KubernetesNodePoolRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCloudKubernetesNodePool not implemented")
}
func (UnimplementedServicesAPIServer) DeleteCloudKubernetesNode(context.Context, *cloud.KubernetesNodeDeleteRequest) (*cloud.KubernetesCluster, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteCloudKubernetesNode not implemented")
}
func (UnimplementedServicesAPIServer) ListOpportunities(context.Context, *crm.ListOpportunitiesRequest) (*crm.Opportunities, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOpportunities not implemented")
}
func (UnimplementedServicesAPIServer) GetOpportunity(context.Context, *crm.Opportunity) (*crm.Opportunity, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetOpportunity not implemented")
}
func (UnimplementedServicesAPIServer) DeleteOpportunity(context.Context, *crm.Opportunity) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteOpportunity not implemented")
}
func (UnimplementedServicesAPIServer) SetOpportunityMilestone(context.Context, *crm.OpportunityMilestoneSetRequest) (*crm.Opportunity, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetOpportunityMilestone not implemented")
}
func (UnimplementedServicesAPIServer) SetOpportunityOutcome(context.Context, *crm.OpportunityOutcomeSetRequest) (*crm.Opportunity, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetOpportunityOutcome not implemented")
}
func (UnimplementedServicesAPIServer) mustEmbedUnimplementedServicesAPIServer() {}

// UnsafeServicesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesAPIServer will
// result in compilation errors.
type UnsafeServicesAPIServer interface {
	mustEmbedUnimplementedServicesAPIServer()
}

func RegisterServicesAPIServer(s grpc.ServiceRegistrar, srv ServicesAPIServer) {
	s.RegisterService(&ServicesAPI_ServiceDesc, srv)
}

func _ServicesAPI_ListPricingPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListPricingPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListPricingPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListPricingPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListPricingPlans(ctx, req.(*services.ListPricingPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetPricingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.PricingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetPricingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetPricingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetPricingPlan(ctx, req.(*services.PricingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeletePricingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.PricingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeletePricingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeletePricingPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeletePricingPlan(ctx, req.(*services.PricingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListResourceUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListResourceUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListResourceUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListResourceUnits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListResourceUnits(ctx, req.(*services.ListResourceUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetResourceUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ResourceUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetResourceUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetResourceUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetResourceUnit(ctx, req.(*services.ResourceUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteResourceUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ResourceUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteResourceUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteResourceUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteResourceUnit(ctx, req.(*services.ResourceUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListProviders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListProviders(ctx, req.(*services.ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetProvider(ctx, req.(*services.Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteProvider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteProvider(ctx, req.(*services.Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_SetProductCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pro.ProductCatalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).SetProductCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/SetProductCatalog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).SetProductCatalog(ctx, req.(*pro.ProductCatalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListProducts(ctx, req.(*services.ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetProduct(ctx, req.(*services.Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteProduct(ctx, req.(*services.Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_RequestService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(crm.ServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).RequestService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/RequestService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).RequestService(ctx, req.(*crm.ServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_NewIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(itsm.Issue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).NewIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/NewIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).NewIssue(ctx, req.(*itsm.Issue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_NewIssueComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(itsm.IssueNewCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).NewIssueComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/NewIssueComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).NewIssueComment(ctx, req.(*itsm.IssueNewCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(itsm.ListIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListIssues(ctx, req.(*itsm.ListIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(itsm.IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetIssue(ctx, req.(*itsm.IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(itsm.IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteIssue(ctx, req.(*itsm.IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_CloseIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(itsm.IssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).CloseIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/CloseIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).CloseIssue(ctx, req.(*itsm.IssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_CreateCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.InstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).CreateCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/CreateCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).CreateCloudInstance(ctx, req.(*cloud.InstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListCloudInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListCloudInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListCloudInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListCloudInstances(ctx, req.(*cloud.ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_PowerCycleCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).PowerCycleCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/PowerCycleCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).PowerCycleCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_PowerOnCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).PowerOnCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/PowerOnCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).PowerOnCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_PowerOffCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).PowerOffCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/PowerOffCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).PowerOffCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_RebootCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).RebootCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/RebootCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).RebootCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ShutdownCloudInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.Instance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ShutdownCloudInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ShutdownCloudInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ShutdownCloudInstance(ctx, req.(*cloud.Instance))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_CreateCloudKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).CreateCloudKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/CreateCloudKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).CreateCloudKubernetesCluster(ctx, req.(*cloud.KubernetesClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListCloudKubernetesClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.ListKubernetesClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListCloudKubernetesClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListCloudKubernetesClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListCloudKubernetesClusters(ctx, req.(*cloud.ListKubernetesClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetCloudKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetCloudKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetCloudKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetCloudKubernetesCluster(ctx, req.(*cloud.KubernetesCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteCloudKubernetesCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteCloudKubernetesCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesCluster(ctx, req.(*cloud.KubernetesCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_CreateCloudKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).CreateCloudKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/CreateCloudKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).CreateCloudKubernetesNodePool(ctx, req.(*cloud.KubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_UpdateCloudKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).UpdateCloudKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/UpdateCloudKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).UpdateCloudKubernetesNodePool(ctx, req.(*cloud.KubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteCloudKubernetesNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesNodePoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteCloudKubernetesNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesNodePool(ctx, req.(*cloud.KubernetesNodePoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteCloudKubernetesNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(cloud.KubernetesNodeDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteCloudKubernetesNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteCloudKubernetesNode(ctx, req.(*cloud.KubernetesNodeDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListOpportunities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(crm.ListOpportunitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListOpportunities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/ListOpportunities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListOpportunities(ctx, req.(*crm.ListOpportunitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(crm.Opportunity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/GetOpportunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetOpportunity(ctx, req.(*crm.Opportunity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteOpportunity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(crm.Opportunity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteOpportunity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/DeleteOpportunity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteOpportunity(ctx, req.(*crm.Opportunity))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_SetOpportunityMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(crm.OpportunityMilestoneSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).SetOpportunityMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/SetOpportunityMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).SetOpportunityMilestone(ctx, req.(*crm.OpportunityMilestoneSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_SetOpportunityOutcome_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(crm.OpportunityOutcomeSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).SetOpportunityOutcome(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.ServicesAPI/SetOpportunityOutcome",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).SetOpportunityOutcome(ctx, req.(*crm.OpportunityOutcomeSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesAPI_ServiceDesc is the grpc.ServiceDesc for ServicesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServicesAPI",
	HandlerType: (*ServicesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPricingPlans",
			Handler:    _ServicesAPI_ListPricingPlans_Handler,
		},
		{
			MethodName: "GetPricingPlan",
			Handler:    _ServicesAPI_GetPricingPlan_Handler,
		},
		{
			MethodName: "DeletePricingPlan",
			Handler:    _ServicesAPI_DeletePricingPlan_Handler,
		},
		{
			MethodName: "ListResourceUnits",
			Handler:    _ServicesAPI_ListResourceUnits_Handler,
		},
		{
			MethodName: "GetResourceUnit",
			Handler:    _ServicesAPI_GetResourceUnit_Handler,
		},
		{
			MethodName: "DeleteResourceUnit",
			Handler:    _ServicesAPI_DeleteResourceUnit_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _ServicesAPI_ListProviders_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _ServicesAPI_GetProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _ServicesAPI_DeleteProvider_Handler,
		},
		{
			MethodName: "SetProductCatalog",
			Handler:    _ServicesAPI_SetProductCatalog_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _ServicesAPI_ListProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ServicesAPI_GetProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ServicesAPI_DeleteProduct_Handler,
		},
		{
			MethodName: "RequestService",
			Handler:    _ServicesAPI_RequestService_Handler,
		},
		{
			MethodName: "NewIssue",
			Handler:    _ServicesAPI_NewIssue_Handler,
		},
		{
			MethodName: "NewIssueComment",
			Handler:    _ServicesAPI_NewIssueComment_Handler,
		},
		{
			MethodName: "ListIssues",
			Handler:    _ServicesAPI_ListIssues_Handler,
		},
		{
			MethodName: "GetIssue",
			Handler:    _ServicesAPI_GetIssue_Handler,
		},
		{
			MethodName: "DeleteIssue",
			Handler:    _ServicesAPI_DeleteIssue_Handler,
		},
		{
			MethodName: "CloseIssue",
			Handler:    _ServicesAPI_CloseIssue_Handler,
		},
		{
			MethodName: "CreateCloudInstance",
			Handler:    _ServicesAPI_CreateCloudInstance_Handler,
		},
		{
			MethodName: "ListCloudInstances",
			Handler:    _ServicesAPI_ListCloudInstances_Handler,
		},
		{
			MethodName: "GetCloudInstance",
			Handler:    _ServicesAPI_GetCloudInstance_Handler,
		},
		{
			MethodName: "DeleteCloudInstance",
			Handler:    _ServicesAPI_DeleteCloudInstance_Handler,
		},
		{
			MethodName: "PowerCycleCloudInstance",
			Handler:    _ServicesAPI_PowerCycleCloudInstance_Handler,
		},
		{
			MethodName: "PowerOnCloudInstance",
			Handler:    _ServicesAPI_PowerOnCloudInstance_Handler,
		},
		{
			MethodName: "PowerOffCloudInstance",
			Handler:    _ServicesAPI_PowerOffCloudInstance_Handler,
		},
		{
			MethodName: "RebootCloudInstance",
			Handler:    _ServicesAPI_RebootCloudInstance_Handler,
		},
		{
			MethodName: "ShutdownCloudInstance",
			Handler:    _ServicesAPI_ShutdownCloudInstance_Handler,
		},
		{
			MethodName: "CreateCloudKubernetesCluster",
			Handler:    _ServicesAPI_CreateCloudKubernetesCluster_Handler,
		},
		{
			MethodName: "ListCloudKubernetesClusters",
			Handler:    _ServicesAPI_ListCloudKubernetesClusters_Handler,
		},
		{
			MethodName: "GetCloudKubernetesCluster",
			Handler:    _ServicesAPI_GetCloudKubernetesCluster_Handler,
		},
		{
			MethodName: "DeleteCloudKubernetesCluster",
			Handler:    _ServicesAPI_DeleteCloudKubernetesCluster_Handler,
		},
		{
			MethodName: "CreateCloudKubernetesNodePool",
			Handler:    _ServicesAPI_CreateCloudKubernetesNodePool_Handler,
		},
		{
			MethodName: "UpdateCloudKubernetesNodePool",
			Handler:    _ServicesAPI_UpdateCloudKubernetesNodePool_Handler,
		},
		{
			MethodName: "DeleteCloudKubernetesNodePool",
			Handler:    _ServicesAPI_DeleteCloudKubernetesNodePool_Handler,
		},
		{
			MethodName: "DeleteCloudKubernetesNode",
			Handler:    _ServicesAPI_DeleteCloudKubernetesNode_Handler,
		},
		{
			MethodName: "ListOpportunities",
			Handler:    _ServicesAPI_ListOpportunities_Handler,
		},
		{
			MethodName: "GetOpportunity",
			Handler:    _ServicesAPI_GetOpportunity_Handler,
		},
		{
			MethodName: "DeleteOpportunity",
			Handler:    _ServicesAPI_DeleteOpportunity_Handler,
		},
		{
			MethodName: "SetOpportunityMilestone",
			Handler:    _ServicesAPI_SetOpportunityMilestone_Handler,
		},
		{
			MethodName: "SetOpportunityOutcome",
			Handler:    _ServicesAPI_SetOpportunityOutcome_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mmesh/protobuf/rpc/v1/servicesAPI.proto",
}
