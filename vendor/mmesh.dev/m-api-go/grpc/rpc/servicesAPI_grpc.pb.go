// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: mmesh/protobuf/rpc/v1/servicesAPI.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	status "mmesh.dev/m-api-go/grpc/common/status"
	services "mmesh.dev/m-api-go/grpc/resources/services"
	pro "mmesh.dev/m-api-go/grpc/resources/services/catalog/pro"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ServicesAPI_ListPricingPlans_FullMethodName   = "/api.ServicesAPI/ListPricingPlans"
	ServicesAPI_GetPricingPlan_FullMethodName     = "/api.ServicesAPI/GetPricingPlan"
	ServicesAPI_DeletePricingPlan_FullMethodName  = "/api.ServicesAPI/DeletePricingPlan"
	ServicesAPI_ListResourceUnits_FullMethodName  = "/api.ServicesAPI/ListResourceUnits"
	ServicesAPI_GetResourceUnit_FullMethodName    = "/api.ServicesAPI/GetResourceUnit"
	ServicesAPI_DeleteResourceUnit_FullMethodName = "/api.ServicesAPI/DeleteResourceUnit"
	ServicesAPI_ListProviders_FullMethodName      = "/api.ServicesAPI/ListProviders"
	ServicesAPI_GetProvider_FullMethodName        = "/api.ServicesAPI/GetProvider"
	ServicesAPI_DeleteProvider_FullMethodName     = "/api.ServicesAPI/DeleteProvider"
	ServicesAPI_SetProductCatalog_FullMethodName  = "/api.ServicesAPI/SetProductCatalog"
	ServicesAPI_ListProducts_FullMethodName       = "/api.ServicesAPI/ListProducts"
	ServicesAPI_GetProduct_FullMethodName         = "/api.ServicesAPI/GetProduct"
	ServicesAPI_DeleteProduct_FullMethodName      = "/api.ServicesAPI/DeleteProduct"
)

// ServicesAPIClient is the client API for ServicesAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServicesAPIClient interface {
	// pricingPlan
	//
	//	rpc NewPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/pricingPlans:new"
	//	    body: "*"
	//	  };
	//	}
	ListPricingPlans(ctx context.Context, in *services.ListPricingPlansRequest, opts ...grpc.CallOption) (*services.PricingPlans, error)
	GetPricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*services.PricingPlan, error)
	//	rpc SetPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/pricingPlans/{pricingPlanID}"
	//	    body: "*"
	//	  };
	//	}
	DeletePricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// resourceUnit
	//
	//	rpc NewResourceUnit(services.ResourceUnit) returns (services.ResourceUnit) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/resourceUnits:new"
	//	    body: "*"
	//	  };
	//	}
	ListResourceUnits(ctx context.Context, in *services.ListResourceUnitsRequest, opts ...grpc.CallOption) (*services.ResourceUnits, error)
	GetResourceUnit(ctx context.Context, in *services.ResourceUnit, opts ...grpc.CallOption) (*services.ResourceUnit, error)
	//	rpc SetResourceUnit(services.ResourceUnit) returns (services.ResourceUnit) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/resourceUnits/{resourceUnitID}"
	//	    body: "*"
	//	  };
	//	}
	DeleteResourceUnit(ctx context.Context, in *services.ResourceUnit, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// provider
	//
	//	rpc NewProvider(services.Provider) returns (services.Provider) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/providers:new"
	//	    body: "*"
	//	  };
	//	}
	ListProviders(ctx context.Context, in *services.ListProvidersRequest, opts ...grpc.CallOption) (*services.Providers, error)
	GetProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*services.Provider, error)
	//	rpc SetProvider(services.Provider) returns (services.Provider) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/providers/{providerID}"
	//	    body: "*"
	//	  };
	//	}
	DeleteProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// provider product catalog
	SetProductCatalog(ctx context.Context, in *pro.ProductCatalog, opts ...grpc.CallOption) (*status.StatusResponse, error)
	// product
	//
	//	rpc NewProduct(services.Product) returns (services.Product) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/providers/{providerID}/products:new"
	//	    body: "*"
	//	  };
	//	}
	ListProducts(ctx context.Context, in *services.ListProductsRequest, opts ...grpc.CallOption) (*services.Products, error)
	GetProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*services.Product, error)
	//	rpc SetProduct(services.Product) returns (services.Product) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/providers/{providerID}/products/{productID}"
	//	    body: "*"
	//	  };
	//	}
	DeleteProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*status.StatusResponse, error)
}

type servicesAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServicesAPIClient(cc grpc.ClientConnInterface) ServicesAPIClient {
	return &servicesAPIClient{cc}
}

func (c *servicesAPIClient) ListPricingPlans(ctx context.Context, in *services.ListPricingPlansRequest, opts ...grpc.CallOption) (*services.PricingPlans, error) {
	out := new(services.PricingPlans)
	err := c.cc.Invoke(ctx, ServicesAPI_ListPricingPlans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetPricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*services.PricingPlan, error) {
	out := new(services.PricingPlan)
	err := c.cc.Invoke(ctx, ServicesAPI_GetPricingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeletePricingPlan(ctx context.Context, in *services.PricingPlan, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, ServicesAPI_DeletePricingPlan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListResourceUnits(ctx context.Context, in *services.ListResourceUnitsRequest, opts ...grpc.CallOption) (*services.ResourceUnits, error) {
	out := new(services.ResourceUnits)
	err := c.cc.Invoke(ctx, ServicesAPI_ListResourceUnits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetResourceUnit(ctx context.Context, in *services.ResourceUnit, opts ...grpc.CallOption) (*services.ResourceUnit, error) {
	out := new(services.ResourceUnit)
	err := c.cc.Invoke(ctx, ServicesAPI_GetResourceUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteResourceUnit(ctx context.Context, in *services.ResourceUnit, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, ServicesAPI_DeleteResourceUnit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListProviders(ctx context.Context, in *services.ListProvidersRequest, opts ...grpc.CallOption) (*services.Providers, error) {
	out := new(services.Providers)
	err := c.cc.Invoke(ctx, ServicesAPI_ListProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*services.Provider, error) {
	out := new(services.Provider)
	err := c.cc.Invoke(ctx, ServicesAPI_GetProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteProvider(ctx context.Context, in *services.Provider, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, ServicesAPI_DeleteProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) SetProductCatalog(ctx context.Context, in *pro.ProductCatalog, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, ServicesAPI_SetProductCatalog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) ListProducts(ctx context.Context, in *services.ListProductsRequest, opts ...grpc.CallOption) (*services.Products, error) {
	out := new(services.Products)
	err := c.cc.Invoke(ctx, ServicesAPI_ListProducts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) GetProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*services.Product, error) {
	out := new(services.Product)
	err := c.cc.Invoke(ctx, ServicesAPI_GetProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *servicesAPIClient) DeleteProduct(ctx context.Context, in *services.Product, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, ServicesAPI_DeleteProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServicesAPIServer is the server API for ServicesAPI service.
// All implementations must embed UnimplementedServicesAPIServer
// for forward compatibility
type ServicesAPIServer interface {
	// pricingPlan
	//
	//	rpc NewPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/pricingPlans:new"
	//	    body: "*"
	//	  };
	//	}
	ListPricingPlans(context.Context, *services.ListPricingPlansRequest) (*services.PricingPlans, error)
	GetPricingPlan(context.Context, *services.PricingPlan) (*services.PricingPlan, error)
	//	rpc SetPricingPlan(services.PricingPlan) returns (services.PricingPlan) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/pricingPlans/{pricingPlanID}"
	//	    body: "*"
	//	  };
	//	}
	DeletePricingPlan(context.Context, *services.PricingPlan) (*status.StatusResponse, error)
	// resourceUnit
	//
	//	rpc NewResourceUnit(services.ResourceUnit) returns (services.ResourceUnit) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/resourceUnits:new"
	//	    body: "*"
	//	  };
	//	}
	ListResourceUnits(context.Context, *services.ListResourceUnitsRequest) (*services.ResourceUnits, error)
	GetResourceUnit(context.Context, *services.ResourceUnit) (*services.ResourceUnit, error)
	//	rpc SetResourceUnit(services.ResourceUnit) returns (services.ResourceUnit) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/resourceUnits/{resourceUnitID}"
	//	    body: "*"
	//	  };
	//	}
	DeleteResourceUnit(context.Context, *services.ResourceUnit) (*status.StatusResponse, error)
	// provider
	//
	//	rpc NewProvider(services.Provider) returns (services.Provider) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/providers:new"
	//	    body: "*"
	//	  };
	//	}
	ListProviders(context.Context, *services.ListProvidersRequest) (*services.Providers, error)
	GetProvider(context.Context, *services.Provider) (*services.Provider, error)
	//	rpc SetProvider(services.Provider) returns (services.Provider) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/providers/{providerID}"
	//	    body: "*"
	//	  };
	//	}
	DeleteProvider(context.Context, *services.Provider) (*status.StatusResponse, error)
	// provider product catalog
	SetProductCatalog(context.Context, *pro.ProductCatalog) (*status.StatusResponse, error)
	// product
	//
	//	rpc NewProduct(services.Product) returns (services.Product) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/providers/{providerID}/products:new"
	//	    body: "*"
	//	  };
	//	}
	ListProducts(context.Context, *services.ListProductsRequest) (*services.Products, error)
	GetProduct(context.Context, *services.Product) (*services.Product, error)
	//	rpc SetProduct(services.Product) returns (services.Product) {
	//	  option (google.api.http) = {
	//	    post: "/api/v1/services/{serviceID}/providers/{providerID}/products/{productID}"
	//	    body: "*"
	//	  };
	//	}
	DeleteProduct(context.Context, *services.Product) (*status.StatusResponse, error)
	mustEmbedUnimplementedServicesAPIServer()
}

// UnimplementedServicesAPIServer must be embedded to have forward compatible implementations.
type UnimplementedServicesAPIServer struct {
}

func (UnimplementedServicesAPIServer) ListPricingPlans(context.Context, *services.ListPricingPlansRequest) (*services.PricingPlans, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPricingPlans not implemented")
}
func (UnimplementedServicesAPIServer) GetPricingPlan(context.Context, *services.PricingPlan) (*services.PricingPlan, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetPricingPlan not implemented")
}
func (UnimplementedServicesAPIServer) DeletePricingPlan(context.Context, *services.PricingPlan) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeletePricingPlan not implemented")
}
func (UnimplementedServicesAPIServer) ListResourceUnits(context.Context, *services.ListResourceUnitsRequest) (*services.ResourceUnits, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListResourceUnits not implemented")
}
func (UnimplementedServicesAPIServer) GetResourceUnit(context.Context, *services.ResourceUnit) (*services.ResourceUnit, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetResourceUnit not implemented")
}
func (UnimplementedServicesAPIServer) DeleteResourceUnit(context.Context, *services.ResourceUnit) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteResourceUnit not implemented")
}
func (UnimplementedServicesAPIServer) ListProviders(context.Context, *services.ListProvidersRequest) (*services.Providers, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProviders not implemented")
}
func (UnimplementedServicesAPIServer) GetProvider(context.Context, *services.Provider) (*services.Provider, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProvider not implemented")
}
func (UnimplementedServicesAPIServer) DeleteProvider(context.Context, *services.Provider) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteProvider not implemented")
}
func (UnimplementedServicesAPIServer) SetProductCatalog(context.Context, *pro.ProductCatalog) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetProductCatalog not implemented")
}
func (UnimplementedServicesAPIServer) ListProducts(context.Context, *services.ListProductsRequest) (*services.Products, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedServicesAPIServer) GetProduct(context.Context, *services.Product) (*services.Product, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedServicesAPIServer) DeleteProduct(context.Context, *services.Product) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (UnimplementedServicesAPIServer) mustEmbedUnimplementedServicesAPIServer() {}

// UnsafeServicesAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServicesAPIServer will
// result in compilation errors.
type UnsafeServicesAPIServer interface {
	mustEmbedUnimplementedServicesAPIServer()
}

func RegisterServicesAPIServer(s grpc.ServiceRegistrar, srv ServicesAPIServer) {
	s.RegisterService(&ServicesAPI_ServiceDesc, srv)
}

func _ServicesAPI_ListPricingPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListPricingPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListPricingPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_ListPricingPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListPricingPlans(ctx, req.(*services.ListPricingPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetPricingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.PricingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetPricingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_GetPricingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetPricingPlan(ctx, req.(*services.PricingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeletePricingPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.PricingPlan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeletePricingPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_DeletePricingPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeletePricingPlan(ctx, req.(*services.PricingPlan))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListResourceUnits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListResourceUnitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListResourceUnits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_ListResourceUnits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListResourceUnits(ctx, req.(*services.ListResourceUnitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetResourceUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ResourceUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetResourceUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_GetResourceUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetResourceUnit(ctx, req.(*services.ResourceUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteResourceUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ResourceUnit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteResourceUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_DeleteResourceUnit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteResourceUnit(ctx, req.(*services.ResourceUnit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_ListProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListProviders(ctx, req.(*services.ListProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_GetProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetProvider(ctx, req.(*services.Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Provider)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_DeleteProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteProvider(ctx, req.(*services.Provider))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_SetProductCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pro.ProductCatalog)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).SetProductCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_SetProductCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).SetProductCatalog(ctx, req.(*pro.ProductCatalog))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.ListProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).ListProducts(ctx, req.(*services.ListProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_GetProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).GetProduct(ctx, req.(*services.Product))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServicesAPI_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(services.Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServicesAPIServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServicesAPI_DeleteProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServicesAPIServer).DeleteProduct(ctx, req.(*services.Product))
	}
	return interceptor(ctx, in, info, handler)
}

// ServicesAPI_ServiceDesc is the grpc.ServiceDesc for ServicesAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServicesAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ServicesAPI",
	HandlerType: (*ServicesAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPricingPlans",
			Handler:    _ServicesAPI_ListPricingPlans_Handler,
		},
		{
			MethodName: "GetPricingPlan",
			Handler:    _ServicesAPI_GetPricingPlan_Handler,
		},
		{
			MethodName: "DeletePricingPlan",
			Handler:    _ServicesAPI_DeletePricingPlan_Handler,
		},
		{
			MethodName: "ListResourceUnits",
			Handler:    _ServicesAPI_ListResourceUnits_Handler,
		},
		{
			MethodName: "GetResourceUnit",
			Handler:    _ServicesAPI_GetResourceUnit_Handler,
		},
		{
			MethodName: "DeleteResourceUnit",
			Handler:    _ServicesAPI_DeleteResourceUnit_Handler,
		},
		{
			MethodName: "ListProviders",
			Handler:    _ServicesAPI_ListProviders_Handler,
		},
		{
			MethodName: "GetProvider",
			Handler:    _ServicesAPI_GetProvider_Handler,
		},
		{
			MethodName: "DeleteProvider",
			Handler:    _ServicesAPI_DeleteProvider_Handler,
		},
		{
			MethodName: "SetProductCatalog",
			Handler:    _ServicesAPI_SetProductCatalog_Handler,
		},
		{
			MethodName: "ListProducts",
			Handler:    _ServicesAPI_ListProducts_Handler,
		},
		{
			MethodName: "GetProduct",
			Handler:    _ServicesAPI_GetProduct_Handler,
		},
		{
			MethodName: "DeleteProduct",
			Handler:    _ServicesAPI_DeleteProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mmesh/protobuf/rpc/v1/servicesAPI.proto",
}
