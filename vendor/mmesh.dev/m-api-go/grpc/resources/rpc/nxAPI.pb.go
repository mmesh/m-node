// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: mmesh/protobuf/rpc/v1/nxAPI.proto

package rpc

import (
	context "context"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	echo "mmesh.dev/m-api-go/grpc/common/echo"
	empty "mmesh.dev/m-api-go/grpc/common/empty"
	status "mmesh.dev/m-api-go/grpc/common/status"
	routing "mmesh.dev/m-api-go/grpc/network/mmnp/routing"
	account "mmesh.dev/m-api-go/grpc/resources/account"
	object "mmesh.dev/m-api-go/grpc/resources/ae/object"
	operation "mmesh.dev/m-api-go/grpc/resources/ae/operation"
	project "mmesh.dev/m-api-go/grpc/resources/ae/project"
	workflow "mmesh.dev/m-api-go/grpc/resources/ae/workflow"
	controller "mmesh.dev/m-api-go/grpc/resources/controller"
	iam "mmesh.dev/m-api-go/grpc/resources/iam"
	network "mmesh.dev/m-api-go/grpc/resources/network"
	resource "mmesh.dev/m-api-go/grpc/resources/resource"
	tenant "mmesh.dev/m-api-go/grpc/resources/tenant"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_mmesh_protobuf_rpc_v1_nxAPI_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_rpc_v1_nxAPI_proto_rawDesc = []byte{
	0x0a, 0x21, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x78, 0x41, 0x50, 0x49, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x2a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6d, 0x6d,
	0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6d, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6d, 0x6e, 0x70, 0x2f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x31, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2f, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x72, 0x66, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x72, 0x62, 0x61, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x34, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x61, 0x65, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x65, 0x2f, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x65, 0x2f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x32, 0xb6, 0x1f, 0x0a, 0x05, 0x4e, 0x78, 0x41, 0x50, 0x49, 0x12, 0x3a, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x12,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x1a, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x2e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x44, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x22, 0x00, 0x12, 0x4e, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x6c, 0x65, 0x72, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x0d, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x40, 0x0a,
	0x0f, 0x53, 0x68, 0x6f, 0x77, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x0c, 0x2e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x09,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x14, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x12,
	0x29, 0x0a, 0x0f, 0x45, 0x64, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12,
	0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x2f, 0x7b, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x7d, 0x3a, 0x01, 0x2a, 0x12, 0x31, 0x0a, 0x0c,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x0c, 0x2e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12,
	0x53, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a,
	0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x72, 0x65, 0x61, 0x6c, 0x6d, 0x2f, 0x7b, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x7d, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0e,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x10,
	0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x1a, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x73, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0f, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54,
	0x65, 0x6e, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e,
	0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x33, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x12, 0x0e, 0x2e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74,
	0x1a, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x53, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x00, 0x12, 0x3b, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x10,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x08, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x52, 0x46, 0x73, 0x12, 0x10, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x73, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x56, 0x52, 0x46, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52,
	0x46, 0x1a, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x22,
	0x00, 0x12, 0x26, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x56, 0x52, 0x46, 0x12, 0x0c, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x1a, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x09, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x52, 0x46, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x56, 0x52, 0x46, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46,
	0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x22, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x36,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x56, 0x52, 0x46, 0x1a, 0x0f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56,
	0x52, 0x46, 0x1a, 0x15, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x12, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x1a, 0x13, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x00, 0x12,
	0x33, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x4d, 0x49, 0x44, 0x73,
	0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4d, 0x4d, 0x49,
	0x44, 0x73, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x1a,
	0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x29, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x0d, 0x2e, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x0d,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x0d, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x11, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x2b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x0a, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22,
	0x00, 0x12, 0x21, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x1a, 0x53, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x72, 0x65, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x54, 0x4f, 0x54, 0x50, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x22, 0x00, 0x12, 0x24, 0x0a, 0x0a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x22, 0x00, 0x12,
	0x3d, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x13, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x00, 0x12, 0x3c,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x12, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x12, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63,
	0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x10,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x12, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x1a, 0x12, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x12, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x2b, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x10, 0x2e, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x0a,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x07,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x00, 0x12,
	0x21, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x22, 0x00, 0x12, 0x31, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65,
	0x12, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0x16, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x43, 0x4c,
	0x73, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x09, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x73, 0x22, 0x00,
	0x12, 0x1e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x12, 0x08, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x41, 0x43, 0x4c, 0x1a, 0x08, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x22, 0x00,
	0x12, 0x1e, 0x0a, 0x06, 0x53, 0x65, 0x74, 0x41, 0x43, 0x4c, 0x12, 0x08, 0x2e, 0x69, 0x61, 0x6d,
	0x2e, 0x41, 0x43, 0x4c, 0x1a, 0x08, 0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x22, 0x00,
	0x12, 0x2f, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x12, 0x08, 0x2e,
	0x69, 0x61, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x35, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x10, 0x2e, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x22, 0x00,
	0x12, 0x3b, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x1a, 0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x12, 0x10,
	0x2e, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x1a, 0x13, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x66, 0x6c, 0x6f, 0x77, 0x73, 0x22, 0x00, 0x12, 0x37, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12,
	0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x1a, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x12, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a,
	0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0e, 0x4c, 0x69, 0x73,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x2e, 0x77, 0x6f,
	0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x1a,
	0x15, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14,
	0x2e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x2e, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x16, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x04, 0x45, 0x63, 0x68,
	0x6f, 0x12, 0x11, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x11, 0x2e, 0x65, 0x63, 0x68, 0x6f, 0x2e, 0x45, 0x63, 0x68, 0x6f,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x22,
	0x08, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x63, 0x68, 0x6f, 0x3a, 0x01, 0x2a, 0x42, 0x27, 0x5a, 0x25,
	0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d,
	0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_mmesh_protobuf_rpc_v1_nxAPI_proto_goTypes = []interface{}{
	(*resource.Resource)(nil),                 // 0: resource.Resource
	(*empty.Empty)(nil),                       // 1: empty.Empty
	(*controller.Controller)(nil),             // 2: controller.Controller
	(*iam.User)(nil),                          // 3: iam.User
	(*account.Account)(nil),                   // 4: account.Account
	(*tenant.Tenant)(nil),                     // 5: tenant.Tenant
	(*network.Network)(nil),                   // 6: network.Network
	(*network.VRF)(nil),                       // 7: network.VRF
	(*object.NetworkPolicyConfigRequest)(nil), // 8: object.NetworkPolicyConfigRequest
	(*network.NetworkAgent)(nil),              // 9: network.NetworkAgent
	(*network.Node)(nil),                      // 10: network.Node
	(*network.Endpoint)(nil),                  // 11: network.Endpoint
	(*iam.SecurityGroup)(nil),                 // 12: iam.SecurityGroup
	(*iam.Role)(nil),                          // 13: iam.Role
	(*iam.ACL)(nil),                           // 14: iam.ACL
	(*project.Project)(nil),                   // 15: project.Project
	(*workflow.Workflow)(nil),                 // 16: workflow.Workflow
	(*operation.Operation)(nil),               // 17: operation.Operation
	(*echo.EchoMessage)(nil),                  // 18: echo.EchoMessage
	(*resource.Resources)(nil),                // 19: resource.Resources
	(*controller.Federation)(nil),             // 20: controller.Federation
	(*controller.Controllers)(nil),            // 21: controller.Controllers
	(*status.StatusResponse)(nil),             // 22: status.StatusResponse
	(*controller.Capabilities)(nil),           // 23: controller.Capabilities
	(*account.Accounts)(nil),                  // 24: account.Accounts
	(*tenant.Tenants)(nil),                    // 25: tenant.Tenants
	(*network.Networks)(nil),                  // 26: network.Networks
	(*network.VRFs)(nil),                      // 27: network.VRFs
	(*network.Policy)(nil),                    // 28: network.Policy
	(*routing.RoutingTable)(nil),              // 29: routing.RoutingTable
	(*network.NodeConfig)(nil),                // 30: network.NodeConfig
	(*network.MMIDs)(nil),                     // 31: network.MMIDs
	(*network.Nodes)(nil),                     // 32: network.Nodes
	(*iam.Users)(nil),                         // 33: iam.Users
	(*iam.SecurityGroups)(nil),                // 34: iam.SecurityGroups
	(*iam.Roles)(nil),                         // 35: iam.Roles
	(*iam.ACLs)(nil),                          // 36: iam.ACLs
	(*project.Projects)(nil),                  // 37: project.Projects
	(*workflow.Workflows)(nil),                // 38: workflow.Workflows
	(*operation.Operations)(nil),              // 39: operation.Operations
}
var file_mmesh_protobuf_rpc_v1_nxAPI_proto_depIdxs = []int32{
	0,  // 0: api.NxAPI.ListResources:input_type -> resource.Resource
	1,  // 1: api.NxAPI.GetFederation:input_type -> empty.Empty
	1,  // 2: api.NxAPI.ListFederationControllers:input_type -> empty.Empty
	2,  // 3: api.NxAPI.GetFederationController:input_type -> controller.Controller
	2,  // 4: api.NxAPI.DeleteFederationController:input_type -> controller.Controller
	1,  // 5: api.NxAPI.ControllerCapabilities:input_type -> empty.Empty
	3,  // 6: api.NxAPI.ExistsCustomer:input_type -> iam.User
	4,  // 7: api.NxAPI.ExistsAccount:input_type -> account.Account
	1,  // 8: api.NxAPI.ShowUserAccount:input_type -> empty.Empty
	3,  // 9: api.NxAPI.EditUserAccount:input_type -> iam.User
	3,  // 10: api.NxAPI.UserPasswordReset:input_type -> iam.User
	4,  // 11: api.NxAPI.NewAccount:input_type -> account.Account
	1,  // 12: api.NxAPI.ListAccounts:input_type -> empty.Empty
	4,  // 13: api.NxAPI.GetAccount:input_type -> account.Account
	4,  // 14: api.NxAPI.SetAccount:input_type -> account.Account
	4,  // 15: api.NxAPI.DeleteAccount:input_type -> account.Account
	4,  // 16: api.NxAPI.EnableAccount:input_type -> account.Account
	4,  // 17: api.NxAPI.DisableAccount:input_type -> account.Account
	4,  // 18: api.NxAPI.ListTenants:input_type -> account.Account
	5,  // 19: api.NxAPI.GetTenant:input_type -> tenant.Tenant
	5,  // 20: api.NxAPI.SetTenant:input_type -> tenant.Tenant
	5,  // 21: api.NxAPI.DeleteTenant:input_type -> tenant.Tenant
	5,  // 22: api.NxAPI.ListNetworks:input_type -> tenant.Tenant
	6,  // 23: api.NxAPI.GetNetwork:input_type -> network.Network
	6,  // 24: api.NxAPI.SetNetwork:input_type -> network.Network
	6,  // 25: api.NxAPI.DeleteNetwork:input_type -> network.Network
	6,  // 26: api.NxAPI.ListVRFs:input_type -> network.Network
	7,  // 27: api.NxAPI.GetVRF:input_type -> network.VRF
	7,  // 28: api.NxAPI.SetVRF:input_type -> network.VRF
	7,  // 29: api.NxAPI.DeleteVRF:input_type -> network.VRF
	7,  // 30: api.NxAPI.GetNetworkPolicy:input_type -> network.VRF
	8,  // 31: api.NxAPI.SetNetworkPolicy:input_type -> object.NetworkPolicyConfigRequest
	7,  // 32: api.NxAPI.DeleteNetworkPolicy:input_type -> network.VRF
	7,  // 33: api.NxAPI.ListRoutes:input_type -> network.VRF
	9,  // 34: api.NxAPI.GenerateNodeConfig:input_type -> network.NetworkAgent
	4,  // 35: api.NxAPI.ListNodeMMIDs:input_type -> account.Account
	7,  // 36: api.NxAPI.ListNodes:input_type -> network.VRF
	10, // 37: api.NxAPI.GetNode:input_type -> network.Node
	10, // 38: api.NxAPI.DeleteNode:input_type -> network.Node
	10, // 39: api.NxAPI.ResetNodeNetworkTraffic:input_type -> network.Node
	11, // 40: api.NxAPI.DeleteNetworkEndpoint:input_type -> network.Endpoint
	4,  // 41: api.NxAPI.ListUsers:input_type -> account.Account
	3,  // 42: api.NxAPI.GetUser:input_type -> iam.User
	3,  // 43: api.NxAPI.SetUser:input_type -> iam.User
	3,  // 44: api.NxAPI.DeleteUser:input_type -> iam.User
	3,  // 45: api.NxAPI.SetUserCredentialsPassword:input_type -> iam.User
	3,  // 46: api.NxAPI.SetUserCredentialsTOTP:input_type -> iam.User
	3,  // 47: api.NxAPI.EnableUser:input_type -> iam.User
	3,  // 48: api.NxAPI.DisableUser:input_type -> iam.User
	4,  // 49: api.NxAPI.ListSecurityGroups:input_type -> account.Account
	12, // 50: api.NxAPI.GetSecurityGroup:input_type -> iam.SecurityGroup
	12, // 51: api.NxAPI.SetSecurityGroup:input_type -> iam.SecurityGroup
	12, // 52: api.NxAPI.DeleteSecurityGroup:input_type -> iam.SecurityGroup
	4,  // 53: api.NxAPI.ListRoles:input_type -> account.Account
	13, // 54: api.NxAPI.GetRole:input_type -> iam.Role
	13, // 55: api.NxAPI.SetRole:input_type -> iam.Role
	13, // 56: api.NxAPI.DeleteRole:input_type -> iam.Role
	4,  // 57: api.NxAPI.ListACLs:input_type -> account.Account
	14, // 58: api.NxAPI.GetACL:input_type -> iam.ACL
	14, // 59: api.NxAPI.SetACL:input_type -> iam.ACL
	14, // 60: api.NxAPI.DeleteACL:input_type -> iam.ACL
	4,  // 61: api.NxAPI.ListProjects:input_type -> account.Account
	15, // 62: api.NxAPI.GetProject:input_type -> project.Project
	15, // 63: api.NxAPI.SetProject:input_type -> project.Project
	15, // 64: api.NxAPI.DeleteProject:input_type -> project.Project
	15, // 65: api.NxAPI.ListWorkflows:input_type -> project.Project
	16, // 66: api.NxAPI.GetWorkflow:input_type -> workflow.Workflow
	16, // 67: api.NxAPI.SetWorkflow:input_type -> workflow.Workflow
	16, // 68: api.NxAPI.DeleteWorkflow:input_type -> workflow.Workflow
	16, // 69: api.NxAPI.ListOperations:input_type -> workflow.Workflow
	17, // 70: api.NxAPI.GetOperation:input_type -> operation.Operation
	17, // 71: api.NxAPI.DeleteOperation:input_type -> operation.Operation
	18, // 72: api.NxAPI.Echo:input_type -> echo.EchoMessage
	19, // 73: api.NxAPI.ListResources:output_type -> resource.Resources
	20, // 74: api.NxAPI.GetFederation:output_type -> controller.Federation
	21, // 75: api.NxAPI.ListFederationControllers:output_type -> controller.Controllers
	2,  // 76: api.NxAPI.GetFederationController:output_type -> controller.Controller
	22, // 77: api.NxAPI.DeleteFederationController:output_type -> status.StatusResponse
	23, // 78: api.NxAPI.ControllerCapabilities:output_type -> controller.Capabilities
	22, // 79: api.NxAPI.ExistsCustomer:output_type -> status.StatusResponse
	22, // 80: api.NxAPI.ExistsAccount:output_type -> status.StatusResponse
	3,  // 81: api.NxAPI.ShowUserAccount:output_type -> iam.User
	3,  // 82: api.NxAPI.EditUserAccount:output_type -> iam.User
	22, // 83: api.NxAPI.UserPasswordReset:output_type -> status.StatusResponse
	4,  // 84: api.NxAPI.NewAccount:output_type -> account.Account
	24, // 85: api.NxAPI.ListAccounts:output_type -> account.Accounts
	4,  // 86: api.NxAPI.GetAccount:output_type -> account.Account
	4,  // 87: api.NxAPI.SetAccount:output_type -> account.Account
	22, // 88: api.NxAPI.DeleteAccount:output_type -> status.StatusResponse
	4,  // 89: api.NxAPI.EnableAccount:output_type -> account.Account
	4,  // 90: api.NxAPI.DisableAccount:output_type -> account.Account
	25, // 91: api.NxAPI.ListTenants:output_type -> tenant.Tenants
	5,  // 92: api.NxAPI.GetTenant:output_type -> tenant.Tenant
	5,  // 93: api.NxAPI.SetTenant:output_type -> tenant.Tenant
	22, // 94: api.NxAPI.DeleteTenant:output_type -> status.StatusResponse
	26, // 95: api.NxAPI.ListNetworks:output_type -> network.Networks
	6,  // 96: api.NxAPI.GetNetwork:output_type -> network.Network
	6,  // 97: api.NxAPI.SetNetwork:output_type -> network.Network
	22, // 98: api.NxAPI.DeleteNetwork:output_type -> status.StatusResponse
	27, // 99: api.NxAPI.ListVRFs:output_type -> network.VRFs
	7,  // 100: api.NxAPI.GetVRF:output_type -> network.VRF
	7,  // 101: api.NxAPI.SetVRF:output_type -> network.VRF
	22, // 102: api.NxAPI.DeleteVRF:output_type -> status.StatusResponse
	28, // 103: api.NxAPI.GetNetworkPolicy:output_type -> network.Policy
	28, // 104: api.NxAPI.SetNetworkPolicy:output_type -> network.Policy
	28, // 105: api.NxAPI.DeleteNetworkPolicy:output_type -> network.Policy
	29, // 106: api.NxAPI.ListRoutes:output_type -> routing.RoutingTable
	30, // 107: api.NxAPI.GenerateNodeConfig:output_type -> network.NodeConfig
	31, // 108: api.NxAPI.ListNodeMMIDs:output_type -> network.MMIDs
	32, // 109: api.NxAPI.ListNodes:output_type -> network.Nodes
	10, // 110: api.NxAPI.GetNode:output_type -> network.Node
	22, // 111: api.NxAPI.DeleteNode:output_type -> status.StatusResponse
	10, // 112: api.NxAPI.ResetNodeNetworkTraffic:output_type -> network.Node
	22, // 113: api.NxAPI.DeleteNetworkEndpoint:output_type -> status.StatusResponse
	33, // 114: api.NxAPI.ListUsers:output_type -> iam.Users
	3,  // 115: api.NxAPI.GetUser:output_type -> iam.User
	3,  // 116: api.NxAPI.SetUser:output_type -> iam.User
	22, // 117: api.NxAPI.DeleteUser:output_type -> status.StatusResponse
	3,  // 118: api.NxAPI.SetUserCredentialsPassword:output_type -> iam.User
	3,  // 119: api.NxAPI.SetUserCredentialsTOTP:output_type -> iam.User
	3,  // 120: api.NxAPI.EnableUser:output_type -> iam.User
	3,  // 121: api.NxAPI.DisableUser:output_type -> iam.User
	34, // 122: api.NxAPI.ListSecurityGroups:output_type -> iam.SecurityGroups
	12, // 123: api.NxAPI.GetSecurityGroup:output_type -> iam.SecurityGroup
	12, // 124: api.NxAPI.SetSecurityGroup:output_type -> iam.SecurityGroup
	22, // 125: api.NxAPI.DeleteSecurityGroup:output_type -> status.StatusResponse
	35, // 126: api.NxAPI.ListRoles:output_type -> iam.Roles
	13, // 127: api.NxAPI.GetRole:output_type -> iam.Role
	13, // 128: api.NxAPI.SetRole:output_type -> iam.Role
	22, // 129: api.NxAPI.DeleteRole:output_type -> status.StatusResponse
	36, // 130: api.NxAPI.ListACLs:output_type -> iam.ACLs
	14, // 131: api.NxAPI.GetACL:output_type -> iam.ACL
	14, // 132: api.NxAPI.SetACL:output_type -> iam.ACL
	22, // 133: api.NxAPI.DeleteACL:output_type -> status.StatusResponse
	37, // 134: api.NxAPI.ListProjects:output_type -> project.Projects
	15, // 135: api.NxAPI.GetProject:output_type -> project.Project
	15, // 136: api.NxAPI.SetProject:output_type -> project.Project
	22, // 137: api.NxAPI.DeleteProject:output_type -> status.StatusResponse
	38, // 138: api.NxAPI.ListWorkflows:output_type -> workflow.Workflows
	16, // 139: api.NxAPI.GetWorkflow:output_type -> workflow.Workflow
	16, // 140: api.NxAPI.SetWorkflow:output_type -> workflow.Workflow
	22, // 141: api.NxAPI.DeleteWorkflow:output_type -> status.StatusResponse
	39, // 142: api.NxAPI.ListOperations:output_type -> operation.Operations
	17, // 143: api.NxAPI.GetOperation:output_type -> operation.Operation
	22, // 144: api.NxAPI.DeleteOperation:output_type -> status.StatusResponse
	18, // 145: api.NxAPI.Echo:output_type -> echo.EchoMessage
	73, // [73:146] is the sub-list for method output_type
	0,  // [0:73] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_rpc_v1_nxAPI_proto_init() }
func file_mmesh_protobuf_rpc_v1_nxAPI_proto_init() {
	if File_mmesh_protobuf_rpc_v1_nxAPI_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_rpc_v1_nxAPI_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mmesh_protobuf_rpc_v1_nxAPI_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_rpc_v1_nxAPI_proto_depIdxs,
	}.Build()
	File_mmesh_protobuf_rpc_v1_nxAPI_proto = out.File
	file_mmesh_protobuf_rpc_v1_nxAPI_proto_rawDesc = nil
	file_mmesh_protobuf_rpc_v1_nxAPI_proto_goTypes = nil
	file_mmesh_protobuf_rpc_v1_nxAPI_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// NxAPIClient is the client API for NxAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NxAPIClient interface {
	ListResources(ctx context.Context, in *resource.Resource, opts ...grpc.CallOption) (*resource.Resources, error)
	GetFederation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*controller.Federation, error)
	ListFederationControllers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*controller.Controllers, error)
	GetFederationController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*controller.Controller, error)
	DeleteFederationController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ControllerCapabilities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*controller.Capabilities, error)
	ExistsCustomer(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ExistsAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ShowUserAccount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*iam.User, error)
	EditUserAccount(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	UserPasswordReset(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error)
	NewAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*account.Accounts, error)
	GetAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	SetAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	DeleteAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error)
	EnableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	DisableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error)
	ListTenants(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*tenant.Tenants, error)
	GetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error)
	SetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error)
	DeleteTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListNetworks(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*network.Networks, error)
	GetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error)
	SetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error)
	DeleteNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListVRFs(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.VRFs, error)
	GetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error)
	SetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error)
	DeleteVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*status.StatusResponse, error)
	GetNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error)
	SetNetworkPolicy(ctx context.Context, in *object.NetworkPolicyConfigRequest, opts ...grpc.CallOption) (*network.Policy, error)
	DeleteNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error)
	ListRoutes(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*routing.RoutingTable, error)
	GenerateNodeConfig(ctx context.Context, in *network.NetworkAgent, opts ...grpc.CallOption) (*network.NodeConfig, error)
	ListNodeMMIDs(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*network.MMIDs, error)
	ListNodes(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Nodes, error)
	GetNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error)
	// rpc SetNode (network.Node) returns (network.Node) {}
	DeleteNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ResetNodeNetworkTraffic(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error)
	//rpc GetNetworkEndpoint(network.Endpoint) returns (blob.Blob) {}
	DeleteNetworkEndpoint(ctx context.Context, in *network.Endpoint, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListUsers(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.Users, error)
	GetUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	SetUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	DeleteUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error)
	SetUserCredentialsPassword(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	SetUserCredentialsTOTP(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	EnableUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	DisableUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error)
	ListSecurityGroups(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.SecurityGroups, error)
	GetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error)
	SetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error)
	DeleteSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListRoles(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.Roles, error)
	GetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error)
	SetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error)
	DeleteRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListACLs(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.ACLs, error)
	GetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error)
	SetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error)
	DeleteACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListProjects(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*project.Projects, error)
	GetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error)
	SetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error)
	DeleteProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListWorkflows(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*workflow.Workflows, error)
	GetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error)
	SetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error)
	DeleteWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*status.StatusResponse, error)
	ListOperations(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*operation.Operations, error)
	GetOperation(ctx context.Context, in *operation.Operation, opts ...grpc.CallOption) (*operation.Operation, error)
	// rpc SetOperation (operation.Operation) returns (status.StatusResponse) {}
	DeleteOperation(ctx context.Context, in *operation.Operation, opts ...grpc.CallOption) (*status.StatusResponse, error)
	Echo(ctx context.Context, in *echo.EchoMessage, opts ...grpc.CallOption) (*echo.EchoMessage, error)
}

type nxAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewNxAPIClient(cc grpc.ClientConnInterface) NxAPIClient {
	return &nxAPIClient{cc}
}

func (c *nxAPIClient) ListResources(ctx context.Context, in *resource.Resource, opts ...grpc.CallOption) (*resource.Resources, error) {
	out := new(resource.Resources)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListResources", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetFederation(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*controller.Federation, error) {
	out := new(controller.Federation)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetFederation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListFederationControllers(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*controller.Controllers, error) {
	out := new(controller.Controllers)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListFederationControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetFederationController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*controller.Controller, error) {
	out := new(controller.Controller)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetFederationController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteFederationController(ctx context.Context, in *controller.Controller, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteFederationController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ControllerCapabilities(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*controller.Capabilities, error) {
	out := new(controller.Capabilities)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ControllerCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ExistsCustomer(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ExistsCustomer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ExistsAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ExistsAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ShowUserAccount(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ShowUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) EditUserAccount(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.NxAPI/EditUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) UserPasswordReset(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/UserPasswordReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) NewAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.NxAPI/NewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListAccounts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*account.Accounts, error) {
	out := new(account.Accounts)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) EnableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.NxAPI/EnableAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DisableAccount(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*account.Account, error) {
	out := new(account.Account)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DisableAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListTenants(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*tenant.Tenants, error) {
	out := new(tenant.Tenants)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListTenants", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error) {
	out := new(tenant.Tenant)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*tenant.Tenant, error) {
	out := new(tenant.Tenant)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteTenant(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteTenant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListNetworks(ctx context.Context, in *tenant.Tenant, opts ...grpc.CallOption) (*network.Networks, error) {
	out := new(network.Networks)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListNetworks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error) {
	out := new(network.Network)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.Network, error) {
	out := new(network.Network)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteNetwork(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListVRFs(ctx context.Context, in *network.Network, opts ...grpc.CallOption) (*network.VRFs, error) {
	out := new(network.VRFs)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListVRFs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error) {
	out := new(network.VRF)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetVRF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.VRF, error) {
	out := new(network.VRF)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetVRF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteVRF(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteVRF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error) {
	out := new(network.Policy)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetNetworkPolicy(ctx context.Context, in *object.NetworkPolicyConfigRequest, opts ...grpc.CallOption) (*network.Policy, error) {
	out := new(network.Policy)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteNetworkPolicy(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Policy, error) {
	out := new(network.Policy)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteNetworkPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListRoutes(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*routing.RoutingTable, error) {
	out := new(routing.RoutingTable)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GenerateNodeConfig(ctx context.Context, in *network.NetworkAgent, opts ...grpc.CallOption) (*network.NodeConfig, error) {
	out := new(network.NodeConfig)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GenerateNodeConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListNodeMMIDs(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*network.MMIDs, error) {
	out := new(network.MMIDs)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListNodeMMIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListNodes(ctx context.Context, in *network.VRF, opts ...grpc.CallOption) (*network.Nodes, error) {
	out := new(network.Nodes)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error) {
	out := new(network.Node)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteNode(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ResetNodeNetworkTraffic(ctx context.Context, in *network.Node, opts ...grpc.CallOption) (*network.Node, error) {
	out := new(network.Node)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ResetNodeNetworkTraffic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteNetworkEndpoint(ctx context.Context, in *network.Endpoint, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteNetworkEndpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListUsers(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.Users, error) {
	out := new(iam.Users)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetUserCredentialsPassword(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetUserCredentialsPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetUserCredentialsTOTP(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetUserCredentialsTOTP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) EnableUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.NxAPI/EnableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DisableUser(ctx context.Context, in *iam.User, opts ...grpc.CallOption) (*iam.User, error) {
	out := new(iam.User)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DisableUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListSecurityGroups(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.SecurityGroups, error) {
	out := new(iam.SecurityGroups)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListSecurityGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error) {
	out := new(iam.SecurityGroup)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*iam.SecurityGroup, error) {
	out := new(iam.SecurityGroup)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteSecurityGroup(ctx context.Context, in *iam.SecurityGroup, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteSecurityGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListRoles(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.Roles, error) {
	out := new(iam.Roles)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error) {
	out := new(iam.Role)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*iam.Role, error) {
	out := new(iam.Role)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteRole(ctx context.Context, in *iam.Role, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListACLs(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*iam.ACLs, error) {
	out := new(iam.ACLs)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListACLs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error) {
	out := new(iam.ACL)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*iam.ACL, error) {
	out := new(iam.ACL)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteACL(ctx context.Context, in *iam.ACL, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteACL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListProjects(ctx context.Context, in *account.Account, opts ...grpc.CallOption) (*project.Projects, error) {
	out := new(project.Projects)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error) {
	out := new(project.Project)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*project.Project, error) {
	out := new(project.Project)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteProject(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListWorkflows(ctx context.Context, in *project.Project, opts ...grpc.CallOption) (*workflow.Workflows, error) {
	out := new(workflow.Workflows)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListWorkflows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error) {
	out := new(workflow.Workflow)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) SetWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*workflow.Workflow, error) {
	out := new(workflow.Workflow)
	err := c.cc.Invoke(ctx, "/api.NxAPI/SetWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteWorkflow(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) ListOperations(ctx context.Context, in *workflow.Workflow, opts ...grpc.CallOption) (*operation.Operations, error) {
	out := new(operation.Operations)
	err := c.cc.Invoke(ctx, "/api.NxAPI/ListOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) GetOperation(ctx context.Context, in *operation.Operation, opts ...grpc.CallOption) (*operation.Operation, error) {
	out := new(operation.Operation)
	err := c.cc.Invoke(ctx, "/api.NxAPI/GetOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) DeleteOperation(ctx context.Context, in *operation.Operation, opts ...grpc.CallOption) (*status.StatusResponse, error) {
	out := new(status.StatusResponse)
	err := c.cc.Invoke(ctx, "/api.NxAPI/DeleteOperation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nxAPIClient) Echo(ctx context.Context, in *echo.EchoMessage, opts ...grpc.CallOption) (*echo.EchoMessage, error) {
	out := new(echo.EchoMessage)
	err := c.cc.Invoke(ctx, "/api.NxAPI/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NxAPIServer is the server API for NxAPI service.
type NxAPIServer interface {
	ListResources(context.Context, *resource.Resource) (*resource.Resources, error)
	GetFederation(context.Context, *empty.Empty) (*controller.Federation, error)
	ListFederationControllers(context.Context, *empty.Empty) (*controller.Controllers, error)
	GetFederationController(context.Context, *controller.Controller) (*controller.Controller, error)
	DeleteFederationController(context.Context, *controller.Controller) (*status.StatusResponse, error)
	ControllerCapabilities(context.Context, *empty.Empty) (*controller.Capabilities, error)
	ExistsCustomer(context.Context, *iam.User) (*status.StatusResponse, error)
	ExistsAccount(context.Context, *account.Account) (*status.StatusResponse, error)
	ShowUserAccount(context.Context, *empty.Empty) (*iam.User, error)
	EditUserAccount(context.Context, *iam.User) (*iam.User, error)
	UserPasswordReset(context.Context, *iam.User) (*status.StatusResponse, error)
	NewAccount(context.Context, *account.Account) (*account.Account, error)
	ListAccounts(context.Context, *empty.Empty) (*account.Accounts, error)
	GetAccount(context.Context, *account.Account) (*account.Account, error)
	SetAccount(context.Context, *account.Account) (*account.Account, error)
	DeleteAccount(context.Context, *account.Account) (*status.StatusResponse, error)
	EnableAccount(context.Context, *account.Account) (*account.Account, error)
	DisableAccount(context.Context, *account.Account) (*account.Account, error)
	ListTenants(context.Context, *account.Account) (*tenant.Tenants, error)
	GetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error)
	SetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error)
	DeleteTenant(context.Context, *tenant.Tenant) (*status.StatusResponse, error)
	ListNetworks(context.Context, *tenant.Tenant) (*network.Networks, error)
	GetNetwork(context.Context, *network.Network) (*network.Network, error)
	SetNetwork(context.Context, *network.Network) (*network.Network, error)
	DeleteNetwork(context.Context, *network.Network) (*status.StatusResponse, error)
	ListVRFs(context.Context, *network.Network) (*network.VRFs, error)
	GetVRF(context.Context, *network.VRF) (*network.VRF, error)
	SetVRF(context.Context, *network.VRF) (*network.VRF, error)
	DeleteVRF(context.Context, *network.VRF) (*status.StatusResponse, error)
	GetNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error)
	SetNetworkPolicy(context.Context, *object.NetworkPolicyConfigRequest) (*network.Policy, error)
	DeleteNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error)
	ListRoutes(context.Context, *network.VRF) (*routing.RoutingTable, error)
	GenerateNodeConfig(context.Context, *network.NetworkAgent) (*network.NodeConfig, error)
	ListNodeMMIDs(context.Context, *account.Account) (*network.MMIDs, error)
	ListNodes(context.Context, *network.VRF) (*network.Nodes, error)
	GetNode(context.Context, *network.Node) (*network.Node, error)
	// rpc SetNode (network.Node) returns (network.Node) {}
	DeleteNode(context.Context, *network.Node) (*status.StatusResponse, error)
	ResetNodeNetworkTraffic(context.Context, *network.Node) (*network.Node, error)
	//rpc GetNetworkEndpoint(network.Endpoint) returns (blob.Blob) {}
	DeleteNetworkEndpoint(context.Context, *network.Endpoint) (*status.StatusResponse, error)
	ListUsers(context.Context, *account.Account) (*iam.Users, error)
	GetUser(context.Context, *iam.User) (*iam.User, error)
	SetUser(context.Context, *iam.User) (*iam.User, error)
	DeleteUser(context.Context, *iam.User) (*status.StatusResponse, error)
	SetUserCredentialsPassword(context.Context, *iam.User) (*iam.User, error)
	SetUserCredentialsTOTP(context.Context, *iam.User) (*iam.User, error)
	EnableUser(context.Context, *iam.User) (*iam.User, error)
	DisableUser(context.Context, *iam.User) (*iam.User, error)
	ListSecurityGroups(context.Context, *account.Account) (*iam.SecurityGroups, error)
	GetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error)
	SetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error)
	DeleteSecurityGroup(context.Context, *iam.SecurityGroup) (*status.StatusResponse, error)
	ListRoles(context.Context, *account.Account) (*iam.Roles, error)
	GetRole(context.Context, *iam.Role) (*iam.Role, error)
	SetRole(context.Context, *iam.Role) (*iam.Role, error)
	DeleteRole(context.Context, *iam.Role) (*status.StatusResponse, error)
	ListACLs(context.Context, *account.Account) (*iam.ACLs, error)
	GetACL(context.Context, *iam.ACL) (*iam.ACL, error)
	SetACL(context.Context, *iam.ACL) (*iam.ACL, error)
	DeleteACL(context.Context, *iam.ACL) (*status.StatusResponse, error)
	ListProjects(context.Context, *account.Account) (*project.Projects, error)
	GetProject(context.Context, *project.Project) (*project.Project, error)
	SetProject(context.Context, *project.Project) (*project.Project, error)
	DeleteProject(context.Context, *project.Project) (*status.StatusResponse, error)
	ListWorkflows(context.Context, *project.Project) (*workflow.Workflows, error)
	GetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error)
	SetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error)
	DeleteWorkflow(context.Context, *workflow.Workflow) (*status.StatusResponse, error)
	ListOperations(context.Context, *workflow.Workflow) (*operation.Operations, error)
	GetOperation(context.Context, *operation.Operation) (*operation.Operation, error)
	// rpc SetOperation (operation.Operation) returns (status.StatusResponse) {}
	DeleteOperation(context.Context, *operation.Operation) (*status.StatusResponse, error)
	Echo(context.Context, *echo.EchoMessage) (*echo.EchoMessage, error)
}

// UnimplementedNxAPIServer can be embedded to have forward compatible implementations.
type UnimplementedNxAPIServer struct {
}

func (*UnimplementedNxAPIServer) ListResources(context.Context, *resource.Resource) (*resource.Resources, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (*UnimplementedNxAPIServer) GetFederation(context.Context, *empty.Empty) (*controller.Federation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetFederation not implemented")
}
func (*UnimplementedNxAPIServer) ListFederationControllers(context.Context, *empty.Empty) (*controller.Controllers, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListFederationControllers not implemented")
}
func (*UnimplementedNxAPIServer) GetFederationController(context.Context, *controller.Controller) (*controller.Controller, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetFederationController not implemented")
}
func (*UnimplementedNxAPIServer) DeleteFederationController(context.Context, *controller.Controller) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteFederationController not implemented")
}
func (*UnimplementedNxAPIServer) ControllerCapabilities(context.Context, *empty.Empty) (*controller.Capabilities, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ControllerCapabilities not implemented")
}
func (*UnimplementedNxAPIServer) ExistsCustomer(context.Context, *iam.User) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ExistsCustomer not implemented")
}
func (*UnimplementedNxAPIServer) ExistsAccount(context.Context, *account.Account) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ExistsAccount not implemented")
}
func (*UnimplementedNxAPIServer) ShowUserAccount(context.Context, *empty.Empty) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ShowUserAccount not implemented")
}
func (*UnimplementedNxAPIServer) EditUserAccount(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method EditUserAccount not implemented")
}
func (*UnimplementedNxAPIServer) UserPasswordReset(context.Context, *iam.User) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method UserPasswordReset not implemented")
}
func (*UnimplementedNxAPIServer) NewAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method NewAccount not implemented")
}
func (*UnimplementedNxAPIServer) ListAccounts(context.Context, *empty.Empty) (*account.Accounts, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAccounts not implemented")
}
func (*UnimplementedNxAPIServer) GetAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (*UnimplementedNxAPIServer) SetAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetAccount not implemented")
}
func (*UnimplementedNxAPIServer) DeleteAccount(context.Context, *account.Account) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteAccount not implemented")
}
func (*UnimplementedNxAPIServer) EnableAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method EnableAccount not implemented")
}
func (*UnimplementedNxAPIServer) DisableAccount(context.Context, *account.Account) (*account.Account, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DisableAccount not implemented")
}
func (*UnimplementedNxAPIServer) ListTenants(context.Context, *account.Account) (*tenant.Tenants, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListTenants not implemented")
}
func (*UnimplementedNxAPIServer) GetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetTenant not implemented")
}
func (*UnimplementedNxAPIServer) SetTenant(context.Context, *tenant.Tenant) (*tenant.Tenant, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetTenant not implemented")
}
func (*UnimplementedNxAPIServer) DeleteTenant(context.Context, *tenant.Tenant) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteTenant not implemented")
}
func (*UnimplementedNxAPIServer) ListNetworks(context.Context, *tenant.Tenant) (*network.Networks, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNetworks not implemented")
}
func (*UnimplementedNxAPIServer) GetNetwork(context.Context, *network.Network) (*network.Network, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNetwork not implemented")
}
func (*UnimplementedNxAPIServer) SetNetwork(context.Context, *network.Network) (*network.Network, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetNetwork not implemented")
}
func (*UnimplementedNxAPIServer) DeleteNetwork(context.Context, *network.Network) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetwork not implemented")
}
func (*UnimplementedNxAPIServer) ListVRFs(context.Context, *network.Network) (*network.VRFs, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListVRFs not implemented")
}
func (*UnimplementedNxAPIServer) GetVRF(context.Context, *network.VRF) (*network.VRF, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetVRF not implemented")
}
func (*UnimplementedNxAPIServer) SetVRF(context.Context, *network.VRF) (*network.VRF, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetVRF not implemented")
}
func (*UnimplementedNxAPIServer) DeleteVRF(context.Context, *network.VRF) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteVRF not implemented")
}
func (*UnimplementedNxAPIServer) GetNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNetworkPolicy not implemented")
}
func (*UnimplementedNxAPIServer) SetNetworkPolicy(context.Context, *object.NetworkPolicyConfigRequest) (*network.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetNetworkPolicy not implemented")
}
func (*UnimplementedNxAPIServer) DeleteNetworkPolicy(context.Context, *network.VRF) (*network.Policy, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetworkPolicy not implemented")
}
func (*UnimplementedNxAPIServer) ListRoutes(context.Context, *network.VRF) (*routing.RoutingTable, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRoutes not implemented")
}
func (*UnimplementedNxAPIServer) GenerateNodeConfig(context.Context, *network.NetworkAgent) (*network.NodeConfig, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GenerateNodeConfig not implemented")
}
func (*UnimplementedNxAPIServer) ListNodeMMIDs(context.Context, *account.Account) (*network.MMIDs, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodeMMIDs not implemented")
}
func (*UnimplementedNxAPIServer) ListNodes(context.Context, *network.VRF) (*network.Nodes, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedNxAPIServer) GetNode(context.Context, *network.Node) (*network.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedNxAPIServer) DeleteNode(context.Context, *network.Node) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (*UnimplementedNxAPIServer) ResetNodeNetworkTraffic(context.Context, *network.Node) (*network.Node, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ResetNodeNetworkTraffic not implemented")
}
func (*UnimplementedNxAPIServer) DeleteNetworkEndpoint(context.Context, *network.Endpoint) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNetworkEndpoint not implemented")
}
func (*UnimplementedNxAPIServer) ListUsers(context.Context, *account.Account) (*iam.Users, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListUsers not implemented")
}
func (*UnimplementedNxAPIServer) GetUser(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (*UnimplementedNxAPIServer) SetUser(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUser not implemented")
}
func (*UnimplementedNxAPIServer) DeleteUser(context.Context, *iam.User) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (*UnimplementedNxAPIServer) SetUserCredentialsPassword(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserCredentialsPassword not implemented")
}
func (*UnimplementedNxAPIServer) SetUserCredentialsTOTP(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetUserCredentialsTOTP not implemented")
}
func (*UnimplementedNxAPIServer) EnableUser(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (*UnimplementedNxAPIServer) DisableUser(context.Context, *iam.User) (*iam.User, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (*UnimplementedNxAPIServer) ListSecurityGroups(context.Context, *account.Account) (*iam.SecurityGroups, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSecurityGroups not implemented")
}
func (*UnimplementedNxAPIServer) GetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetSecurityGroup not implemented")
}
func (*UnimplementedNxAPIServer) SetSecurityGroup(context.Context, *iam.SecurityGroup) (*iam.SecurityGroup, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetSecurityGroup not implemented")
}
func (*UnimplementedNxAPIServer) DeleteSecurityGroup(context.Context, *iam.SecurityGroup) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteSecurityGroup not implemented")
}
func (*UnimplementedNxAPIServer) ListRoles(context.Context, *account.Account) (*iam.Roles, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (*UnimplementedNxAPIServer) GetRole(context.Context, *iam.Role) (*iam.Role, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (*UnimplementedNxAPIServer) SetRole(context.Context, *iam.Role) (*iam.Role, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetRole not implemented")
}
func (*UnimplementedNxAPIServer) DeleteRole(context.Context, *iam.Role) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (*UnimplementedNxAPIServer) ListACLs(context.Context, *account.Account) (*iam.ACLs, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListACLs not implemented")
}
func (*UnimplementedNxAPIServer) GetACL(context.Context, *iam.ACL) (*iam.ACL, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetACL not implemented")
}
func (*UnimplementedNxAPIServer) SetACL(context.Context, *iam.ACL) (*iam.ACL, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetACL not implemented")
}
func (*UnimplementedNxAPIServer) DeleteACL(context.Context, *iam.ACL) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteACL not implemented")
}
func (*UnimplementedNxAPIServer) ListProjects(context.Context, *account.Account) (*project.Projects, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (*UnimplementedNxAPIServer) GetProject(context.Context, *project.Project) (*project.Project, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (*UnimplementedNxAPIServer) SetProject(context.Context, *project.Project) (*project.Project, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetProject not implemented")
}
func (*UnimplementedNxAPIServer) DeleteProject(context.Context, *project.Project) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (*UnimplementedNxAPIServer) ListWorkflows(context.Context, *project.Project) (*workflow.Workflows, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWorkflows not implemented")
}
func (*UnimplementedNxAPIServer) GetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWorkflow not implemented")
}
func (*UnimplementedNxAPIServer) SetWorkflow(context.Context, *workflow.Workflow) (*workflow.Workflow, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method SetWorkflow not implemented")
}
func (*UnimplementedNxAPIServer) DeleteWorkflow(context.Context, *workflow.Workflow) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteWorkflow not implemented")
}
func (*UnimplementedNxAPIServer) ListOperations(context.Context, *workflow.Workflow) (*operation.Operations, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListOperations not implemented")
}
func (*UnimplementedNxAPIServer) GetOperation(context.Context, *operation.Operation) (*operation.Operation, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetOperation not implemented")
}
func (*UnimplementedNxAPIServer) DeleteOperation(context.Context, *operation.Operation) (*status.StatusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteOperation not implemented")
}
func (*UnimplementedNxAPIServer) Echo(context.Context, *echo.EchoMessage) (*echo.EchoMessage, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Echo not implemented")
}

func RegisterNxAPIServer(s *grpc.Server, srv NxAPIServer) {
	s.RegisterService(&_NxAPI_serviceDesc, srv)
}

func _NxAPI_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resource.Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListResources",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListResources(ctx, req.(*resource.Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetFederation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetFederation(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListFederationControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListFederationControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListFederationControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListFederationControllers(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetFederationController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Controller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetFederationController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetFederationController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetFederationController(ctx, req.(*controller.Controller))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteFederationController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(controller.Controller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteFederationController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteFederationController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteFederationController(ctx, req.(*controller.Controller))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ControllerCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ControllerCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ControllerCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ControllerCapabilities(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ExistsCustomer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ExistsCustomer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ExistsCustomer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ExistsCustomer(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ExistsAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ExistsAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ExistsAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ExistsAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ShowUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ShowUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ShowUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ShowUserAccount(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_EditUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).EditUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/EditUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).EditUserAccount(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_UserPasswordReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).UserPasswordReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/UserPasswordReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).UserPasswordReset(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_NewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).NewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/NewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).NewAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListAccounts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_EnableAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).EnableAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/EnableAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).EnableAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DisableAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DisableAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DisableAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DisableAccount(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListTenants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListTenants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListTenants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListTenants(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetTenant(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetTenant(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteTenant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteTenant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteTenant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteTenant(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListNetworks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tenant.Tenant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListNetworks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListNetworks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListNetworks(ctx, req.(*tenant.Tenant))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetNetwork(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetNetwork(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteNetwork(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListVRFs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Network)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListVRFs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListVRFs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListVRFs(ctx, req.(*network.Network))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetVRF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetVRF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetVRF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetVRF(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetVRF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetVRF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetVRF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetVRF(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteVRF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteVRF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteVRF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteVRF(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetNetworkPolicy(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(object.NetworkPolicyConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetNetworkPolicy(ctx, req.(*object.NetworkPolicyConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteNetworkPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteNetworkPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteNetworkPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteNetworkPolicy(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListRoutes(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GenerateNodeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.NetworkAgent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GenerateNodeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GenerateNodeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GenerateNodeConfig(ctx, req.(*network.NetworkAgent))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListNodeMMIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListNodeMMIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListNodeMMIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListNodeMMIDs(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.VRF)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListNodes(ctx, req.(*network.VRF))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetNode(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteNode(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ResetNodeNetworkTraffic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ResetNodeNetworkTraffic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ResetNodeNetworkTraffic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ResetNodeNetworkTraffic(ctx, req.(*network.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteNetworkEndpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(network.Endpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteNetworkEndpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteNetworkEndpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteNetworkEndpoint(ctx, req.(*network.Endpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListUsers(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetUserCredentialsPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetUserCredentialsPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetUserCredentialsPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetUserCredentialsPassword(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetUserCredentialsTOTP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetUserCredentialsTOTP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetUserCredentialsTOTP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetUserCredentialsTOTP(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/EnableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).EnableUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DisableUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DisableUser(ctx, req.(*iam.User))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListSecurityGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListSecurityGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListSecurityGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListSecurityGroups(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetSecurityGroup(ctx, req.(*iam.SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetSecurityGroup(ctx, req.(*iam.SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteSecurityGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.SecurityGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteSecurityGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteSecurityGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteSecurityGroup(ctx, req.(*iam.SecurityGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListRoles(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetRole(ctx, req.(*iam.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetRole(ctx, req.(*iam.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.Role)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteRole(ctx, req.(*iam.Role))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListACLs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListACLs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListACLs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListACLs(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetACL(ctx, req.(*iam.ACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetACL(ctx, req.(*iam.ACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteACL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(iam.ACL)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteACL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteACL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteACL(ctx, req.(*iam.ACL))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(account.Account)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListProjects(ctx, req.(*account.Account))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetProject(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetProject(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteProject(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListWorkflows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(project.Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListWorkflows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListWorkflows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListWorkflows(ctx, req.(*project.Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetWorkflow(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_SetWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).SetWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/SetWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).SetWorkflow(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteWorkflow(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_ListOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(workflow.Workflow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).ListOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/ListOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).ListOperations(ctx, req.(*workflow.Workflow))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_GetOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(operation.Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).GetOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/GetOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).GetOperation(ctx, req.(*operation.Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_DeleteOperation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(operation.Operation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).DeleteOperation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/DeleteOperation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).DeleteOperation(ctx, req.(*operation.Operation))
	}
	return interceptor(ctx, in, info, handler)
}

func _NxAPI_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(echo.EchoMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NxAPIServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.NxAPI/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NxAPIServer).Echo(ctx, req.(*echo.EchoMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _NxAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.NxAPI",
	HandlerType: (*NxAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListResources",
			Handler:    _NxAPI_ListResources_Handler,
		},
		{
			MethodName: "GetFederation",
			Handler:    _NxAPI_GetFederation_Handler,
		},
		{
			MethodName: "ListFederationControllers",
			Handler:    _NxAPI_ListFederationControllers_Handler,
		},
		{
			MethodName: "GetFederationController",
			Handler:    _NxAPI_GetFederationController_Handler,
		},
		{
			MethodName: "DeleteFederationController",
			Handler:    _NxAPI_DeleteFederationController_Handler,
		},
		{
			MethodName: "ControllerCapabilities",
			Handler:    _NxAPI_ControllerCapabilities_Handler,
		},
		{
			MethodName: "ExistsCustomer",
			Handler:    _NxAPI_ExistsCustomer_Handler,
		},
		{
			MethodName: "ExistsAccount",
			Handler:    _NxAPI_ExistsAccount_Handler,
		},
		{
			MethodName: "ShowUserAccount",
			Handler:    _NxAPI_ShowUserAccount_Handler,
		},
		{
			MethodName: "EditUserAccount",
			Handler:    _NxAPI_EditUserAccount_Handler,
		},
		{
			MethodName: "UserPasswordReset",
			Handler:    _NxAPI_UserPasswordReset_Handler,
		},
		{
			MethodName: "NewAccount",
			Handler:    _NxAPI_NewAccount_Handler,
		},
		{
			MethodName: "ListAccounts",
			Handler:    _NxAPI_ListAccounts_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _NxAPI_GetAccount_Handler,
		},
		{
			MethodName: "SetAccount",
			Handler:    _NxAPI_SetAccount_Handler,
		},
		{
			MethodName: "DeleteAccount",
			Handler:    _NxAPI_DeleteAccount_Handler,
		},
		{
			MethodName: "EnableAccount",
			Handler:    _NxAPI_EnableAccount_Handler,
		},
		{
			MethodName: "DisableAccount",
			Handler:    _NxAPI_DisableAccount_Handler,
		},
		{
			MethodName: "ListTenants",
			Handler:    _NxAPI_ListTenants_Handler,
		},
		{
			MethodName: "GetTenant",
			Handler:    _NxAPI_GetTenant_Handler,
		},
		{
			MethodName: "SetTenant",
			Handler:    _NxAPI_SetTenant_Handler,
		},
		{
			MethodName: "DeleteTenant",
			Handler:    _NxAPI_DeleteTenant_Handler,
		},
		{
			MethodName: "ListNetworks",
			Handler:    _NxAPI_ListNetworks_Handler,
		},
		{
			MethodName: "GetNetwork",
			Handler:    _NxAPI_GetNetwork_Handler,
		},
		{
			MethodName: "SetNetwork",
			Handler:    _NxAPI_SetNetwork_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _NxAPI_DeleteNetwork_Handler,
		},
		{
			MethodName: "ListVRFs",
			Handler:    _NxAPI_ListVRFs_Handler,
		},
		{
			MethodName: "GetVRF",
			Handler:    _NxAPI_GetVRF_Handler,
		},
		{
			MethodName: "SetVRF",
			Handler:    _NxAPI_SetVRF_Handler,
		},
		{
			MethodName: "DeleteVRF",
			Handler:    _NxAPI_DeleteVRF_Handler,
		},
		{
			MethodName: "GetNetworkPolicy",
			Handler:    _NxAPI_GetNetworkPolicy_Handler,
		},
		{
			MethodName: "SetNetworkPolicy",
			Handler:    _NxAPI_SetNetworkPolicy_Handler,
		},
		{
			MethodName: "DeleteNetworkPolicy",
			Handler:    _NxAPI_DeleteNetworkPolicy_Handler,
		},
		{
			MethodName: "ListRoutes",
			Handler:    _NxAPI_ListRoutes_Handler,
		},
		{
			MethodName: "GenerateNodeConfig",
			Handler:    _NxAPI_GenerateNodeConfig_Handler,
		},
		{
			MethodName: "ListNodeMMIDs",
			Handler:    _NxAPI_ListNodeMMIDs_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _NxAPI_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _NxAPI_GetNode_Handler,
		},
		{
			MethodName: "DeleteNode",
			Handler:    _NxAPI_DeleteNode_Handler,
		},
		{
			MethodName: "ResetNodeNetworkTraffic",
			Handler:    _NxAPI_ResetNodeNetworkTraffic_Handler,
		},
		{
			MethodName: "DeleteNetworkEndpoint",
			Handler:    _NxAPI_DeleteNetworkEndpoint_Handler,
		},
		{
			MethodName: "ListUsers",
			Handler:    _NxAPI_ListUsers_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _NxAPI_GetUser_Handler,
		},
		{
			MethodName: "SetUser",
			Handler:    _NxAPI_SetUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _NxAPI_DeleteUser_Handler,
		},
		{
			MethodName: "SetUserCredentialsPassword",
			Handler:    _NxAPI_SetUserCredentialsPassword_Handler,
		},
		{
			MethodName: "SetUserCredentialsTOTP",
			Handler:    _NxAPI_SetUserCredentialsTOTP_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _NxAPI_EnableUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _NxAPI_DisableUser_Handler,
		},
		{
			MethodName: "ListSecurityGroups",
			Handler:    _NxAPI_ListSecurityGroups_Handler,
		},
		{
			MethodName: "GetSecurityGroup",
			Handler:    _NxAPI_GetSecurityGroup_Handler,
		},
		{
			MethodName: "SetSecurityGroup",
			Handler:    _NxAPI_SetSecurityGroup_Handler,
		},
		{
			MethodName: "DeleteSecurityGroup",
			Handler:    _NxAPI_DeleteSecurityGroup_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _NxAPI_ListRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _NxAPI_GetRole_Handler,
		},
		{
			MethodName: "SetRole",
			Handler:    _NxAPI_SetRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _NxAPI_DeleteRole_Handler,
		},
		{
			MethodName: "ListACLs",
			Handler:    _NxAPI_ListACLs_Handler,
		},
		{
			MethodName: "GetACL",
			Handler:    _NxAPI_GetACL_Handler,
		},
		{
			MethodName: "SetACL",
			Handler:    _NxAPI_SetACL_Handler,
		},
		{
			MethodName: "DeleteACL",
			Handler:    _NxAPI_DeleteACL_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _NxAPI_ListProjects_Handler,
		},
		{
			MethodName: "GetProject",
			Handler:    _NxAPI_GetProject_Handler,
		},
		{
			MethodName: "SetProject",
			Handler:    _NxAPI_SetProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _NxAPI_DeleteProject_Handler,
		},
		{
			MethodName: "ListWorkflows",
			Handler:    _NxAPI_ListWorkflows_Handler,
		},
		{
			MethodName: "GetWorkflow",
			Handler:    _NxAPI_GetWorkflow_Handler,
		},
		{
			MethodName: "SetWorkflow",
			Handler:    _NxAPI_SetWorkflow_Handler,
		},
		{
			MethodName: "DeleteWorkflow",
			Handler:    _NxAPI_DeleteWorkflow_Handler,
		},
		{
			MethodName: "ListOperations",
			Handler:    _NxAPI_ListOperations_Handler,
		},
		{
			MethodName: "GetOperation",
			Handler:    _NxAPI_GetOperation_Handler,
		},
		{
			MethodName: "DeleteOperation",
			Handler:    _NxAPI_DeleteOperation_Handler,
		},
		{
			MethodName: "Echo",
			Handler:    _NxAPI_Echo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mmesh/protobuf/rpc/v1/nxAPI.proto",
}
