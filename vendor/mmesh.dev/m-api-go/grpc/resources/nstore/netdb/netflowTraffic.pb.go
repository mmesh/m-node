// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v5.26.0--rc2
// source: mmesh/protobuf/resources/v1/nstore/netdb/netflowTraffic.proto

package netdb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	nstore "mmesh.dev/m-api-go/grpc/resources/nstore"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TrafficQueryType int32

const (
	TrafficQueryType_UNKNOWN_QUERY        TrafficQueryType = 0
	TrafficQueryType_TRAFFIC_BY_PROTOCOL  TrafficQueryType = 11
	TrafficQueryType_TRAFFIC_BY_L5_PORT   TrafficQueryType = 21
	TrafficQueryType_TRAFFIC_BY_DIRECTION TrafficQueryType = 31
	TrafficQueryType_TRAFFIC_TOP_TALKERS  TrafficQueryType = 41
)

// Enum value maps for TrafficQueryType.
var (
	TrafficQueryType_name = map[int32]string{
		0:  "UNKNOWN_QUERY",
		11: "TRAFFIC_BY_PROTOCOL",
		21: "TRAFFIC_BY_L5_PORT",
		31: "TRAFFIC_BY_DIRECTION",
		41: "TRAFFIC_TOP_TALKERS",
	}
	TrafficQueryType_value = map[string]int32{
		"UNKNOWN_QUERY":        0,
		"TRAFFIC_BY_PROTOCOL":  11,
		"TRAFFIC_BY_L5_PORT":   21,
		"TRAFFIC_BY_DIRECTION": 31,
		"TRAFFIC_TOP_TALKERS":  41,
	}
)

func (x TrafficQueryType) Enum() *TrafficQueryType {
	p := new(TrafficQueryType)
	*p = x
	return p
}

func (x TrafficQueryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TrafficQueryType) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_enumTypes[0].Descriptor()
}

func (TrafficQueryType) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_enumTypes[0]
}

func (x TrafficQueryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TrafficQueryType.Descriptor instead.
func (TrafficQueryType) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{0}
}

type NetFlowEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64           `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Flow      *Flow           `protobuf:"bytes,21,opt,name=flow,proto3" json:"flow,omitempty"`         // key
	Traffic   *TrafficCounter `protobuf:"bytes,1001,opt,name=traffic,proto3" json:"traffic,omitempty"` // value
}

func (x *NetFlowEntry) Reset() {
	*x = NetFlowEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetFlowEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetFlowEntry) ProtoMessage() {}

func (x *NetFlowEntry) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetFlowEntry.ProtoReflect.Descriptor instead.
func (*NetFlowEntry) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{0}
}

func (x *NetFlowEntry) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *NetFlowEntry) GetFlow() *Flow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *NetFlowEntry) GetTraffic() *TrafficCounter {
	if x != nil {
		return x.Traffic
	}
	return nil
}

type TrafficMetricsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request *nstore.DataRequest `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Type    TrafficQueryType    `protobuf:"varint,11,opt,name=type,proto3,enum=netdb.TrafficQueryType" json:"type,omitempty"`
}

func (x *TrafficMetricsRequest) Reset() {
	*x = TrafficMetricsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficMetricsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficMetricsRequest) ProtoMessage() {}

func (x *TrafficMetricsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficMetricsRequest.ProtoReflect.Descriptor instead.
func (*TrafficMetricsRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{1}
}

func (x *TrafficMetricsRequest) GetRequest() *nstore.DataRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *TrafficMetricsRequest) GetType() TrafficQueryType {
	if x != nil {
		return x.Type
	}
	return TrafficQueryType_UNKNOWN_QUERY
}

type TrafficMetricsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID   string              `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID    string              `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NodeID      string              `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	QueryID     string              `protobuf:"bytes,11,opt,name=queryID,proto3" json:"queryID,omitempty"`
	ByProtocol  *TrafficByProtocol  `protobuf:"bytes,101,opt,name=byProtocol,proto3" json:"byProtocol,omitempty"`
	ByL5Port    *TrafficByL5Port    `protobuf:"bytes,111,opt,name=byL5Port,proto3" json:"byL5Port,omitempty"`
	ByDirection *TrafficByDirection `protobuf:"bytes,121,opt,name=byDirection,proto3" json:"byDirection,omitempty"`
	TopTalkers  *TopTalkers         `protobuf:"bytes,131,opt,name=topTalkers,proto3" json:"topTalkers,omitempty"`
	Timestamp   int64               `protobuf:"varint,1001,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *TrafficMetricsResponse) Reset() {
	*x = TrafficMetricsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficMetricsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficMetricsResponse) ProtoMessage() {}

func (x *TrafficMetricsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficMetricsResponse.ProtoReflect.Descriptor instead.
func (*TrafficMetricsResponse) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{2}
}

func (x *TrafficMetricsResponse) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *TrafficMetricsResponse) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *TrafficMetricsResponse) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *TrafficMetricsResponse) GetQueryID() string {
	if x != nil {
		return x.QueryID
	}
	return ""
}

func (x *TrafficMetricsResponse) GetByProtocol() *TrafficByProtocol {
	if x != nil {
		return x.ByProtocol
	}
	return nil
}

func (x *TrafficMetricsResponse) GetByL5Port() *TrafficByL5Port {
	if x != nil {
		return x.ByL5Port
	}
	return nil
}

func (x *TrafficMetricsResponse) GetByDirection() *TrafficByDirection {
	if x != nil {
		return x.ByDirection
	}
	return nil
}

func (x *TrafficMetricsResponse) GetTopTalkers() *TopTalkers {
	if x != nil {
		return x.TopTalkers
	}
	return nil
}

func (x *TrafficMetricsResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type TrafficByProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unknown []*TimeTrafficValue `protobuf:"bytes,1,rep,name=unknown,proto3" json:"unknown,omitempty"`
	TCP     []*TimeTrafficValue `protobuf:"bytes,11,rep,name=TCP,proto3" json:"TCP,omitempty"`
	UDP     []*TimeTrafficValue `protobuf:"bytes,21,rep,name=UDP,proto3" json:"UDP,omitempty"`
	ICMPv4  []*TimeTrafficValue `protobuf:"bytes,31,rep,name=ICMPv4,proto3" json:"ICMPv4,omitempty"`
	ICMPv6  []*TimeTrafficValue `protobuf:"bytes,41,rep,name=ICMPv6,proto3" json:"ICMPv6,omitempty"`
	GRE     []*TimeTrafficValue `protobuf:"bytes,51,rep,name=GRE,proto3" json:"GRE,omitempty"`
	SCTP    []*TimeTrafficValue `protobuf:"bytes,61,rep,name=SCTP,proto3" json:"SCTP,omitempty"`
}

func (x *TrafficByProtocol) Reset() {
	*x = TrafficByProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficByProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficByProtocol) ProtoMessage() {}

func (x *TrafficByProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficByProtocol.ProtoReflect.Descriptor instead.
func (*TrafficByProtocol) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{3}
}

func (x *TrafficByProtocol) GetUnknown() []*TimeTrafficValue {
	if x != nil {
		return x.Unknown
	}
	return nil
}

func (x *TrafficByProtocol) GetTCP() []*TimeTrafficValue {
	if x != nil {
		return x.TCP
	}
	return nil
}

func (x *TrafficByProtocol) GetUDP() []*TimeTrafficValue {
	if x != nil {
		return x.UDP
	}
	return nil
}

func (x *TrafficByProtocol) GetICMPv4() []*TimeTrafficValue {
	if x != nil {
		return x.ICMPv4
	}
	return nil
}

func (x *TrafficByProtocol) GetICMPv6() []*TimeTrafficValue {
	if x != nil {
		return x.ICMPv6
	}
	return nil
}

func (x *TrafficByProtocol) GetGRE() []*TimeTrafficValue {
	if x != nil {
		return x.GRE
	}
	return nil
}

func (x *TrafficByProtocol) GetSCTP() []*TimeTrafficValue {
	if x != nil {
		return x.SCTP
	}
	return nil
}

type TrafficByL5Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Other          []*TimeTrafficValue `protobuf:"bytes,1,rep,name=other,proto3" json:"other,omitempty"`
	HTTP           []*TimeTrafficValue `protobuf:"bytes,11,rep,name=HTTP,proto3" json:"HTTP,omitempty"`
	HTTPS          []*TimeTrafficValue `protobuf:"bytes,12,rep,name=HTTPS,proto3" json:"HTTPS,omitempty"`
	SSH            []*TimeTrafficValue `protobuf:"bytes,21,rep,name=SSH,proto3" json:"SSH,omitempty"`
	RDP            []*TimeTrafficValue `protobuf:"bytes,31,rep,name=RDP,proto3" json:"RDP,omitempty"`
	DNS            []*TimeTrafficValue `protobuf:"bytes,41,rep,name=DNS,proto3" json:"DNS,omitempty"`
	SMTP           []*TimeTrafficValue `protobuf:"bytes,101,rep,name=SMTP,proto3" json:"SMTP,omitempty"`
	SMTPS          []*TimeTrafficValue `protobuf:"bytes,102,rep,name=SMTPS,proto3" json:"SMTPS,omitempty"`
	MailSubmission []*TimeTrafficValue `protobuf:"bytes,105,rep,name=MailSubmission,proto3" json:"MailSubmission,omitempty"`
	IMAP           []*TimeTrafficValue `protobuf:"bytes,111,rep,name=IMAP,proto3" json:"IMAP,omitempty"`
	IMAPS          []*TimeTrafficValue `protobuf:"bytes,112,rep,name=IMAPS,proto3" json:"IMAPS,omitempty"`
	POP3           []*TimeTrafficValue `protobuf:"bytes,121,rep,name=POP3,proto3" json:"POP3,omitempty"`
	POP3S          []*TimeTrafficValue `protobuf:"bytes,122,rep,name=POP3S,proto3" json:"POP3S,omitempty"`
	NTP            []*TimeTrafficValue `protobuf:"bytes,131,rep,name=NTP,proto3" json:"NTP,omitempty"`
	SNMP           []*TimeTrafficValue `protobuf:"bytes,141,rep,name=SNMP,proto3" json:"SNMP,omitempty"`
	BGP            []*TimeTrafficValue `protobuf:"bytes,151,rep,name=BGP,proto3" json:"BGP,omitempty"`
	LDAP           []*TimeTrafficValue `protobuf:"bytes,161,rep,name=LDAP,proto3" json:"LDAP,omitempty"`
	LDAPS          []*TimeTrafficValue `protobuf:"bytes,162,rep,name=LDAPS,proto3" json:"LDAPS,omitempty"`
	MySQL          []*TimeTrafficValue `protobuf:"bytes,171,rep,name=MySQL,proto3" json:"MySQL,omitempty"`
	PostgreSQL     []*TimeTrafficValue `protobuf:"bytes,181,rep,name=PostgreSQL,proto3" json:"PostgreSQL,omitempty"`
	MSSQL          []*TimeTrafficValue `protobuf:"bytes,191,rep,name=MSSQL,proto3" json:"MSSQL,omitempty"`
	Redis          []*TimeTrafficValue `protobuf:"bytes,201,rep,name=Redis,proto3" json:"Redis,omitempty"`
	NFS            []*TimeTrafficValue `protobuf:"bytes,211,rep,name=NFS,proto3" json:"NFS,omitempty"`
	SIP            []*TimeTrafficValue `protobuf:"bytes,221,rep,name=SIP,proto3" json:"SIP,omitempty"`
	SIPTLS         []*TimeTrafficValue `protobuf:"bytes,222,rep,name=SIPTLS,proto3" json:"SIPTLS,omitempty"`
	AMQP           []*TimeTrafficValue `protobuf:"bytes,231,rep,name=AMQP,proto3" json:"AMQP,omitempty"`
	AMQPS          []*TimeTrafficValue `protobuf:"bytes,232,rep,name=AMQPS,proto3" json:"AMQPS,omitempty"`
}

func (x *TrafficByL5Port) Reset() {
	*x = TrafficByL5Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficByL5Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficByL5Port) ProtoMessage() {}

func (x *TrafficByL5Port) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficByL5Port.ProtoReflect.Descriptor instead.
func (*TrafficByL5Port) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{4}
}

func (x *TrafficByL5Port) GetOther() []*TimeTrafficValue {
	if x != nil {
		return x.Other
	}
	return nil
}

func (x *TrafficByL5Port) GetHTTP() []*TimeTrafficValue {
	if x != nil {
		return x.HTTP
	}
	return nil
}

func (x *TrafficByL5Port) GetHTTPS() []*TimeTrafficValue {
	if x != nil {
		return x.HTTPS
	}
	return nil
}

func (x *TrafficByL5Port) GetSSH() []*TimeTrafficValue {
	if x != nil {
		return x.SSH
	}
	return nil
}

func (x *TrafficByL5Port) GetRDP() []*TimeTrafficValue {
	if x != nil {
		return x.RDP
	}
	return nil
}

func (x *TrafficByL5Port) GetDNS() []*TimeTrafficValue {
	if x != nil {
		return x.DNS
	}
	return nil
}

func (x *TrafficByL5Port) GetSMTP() []*TimeTrafficValue {
	if x != nil {
		return x.SMTP
	}
	return nil
}

func (x *TrafficByL5Port) GetSMTPS() []*TimeTrafficValue {
	if x != nil {
		return x.SMTPS
	}
	return nil
}

func (x *TrafficByL5Port) GetMailSubmission() []*TimeTrafficValue {
	if x != nil {
		return x.MailSubmission
	}
	return nil
}

func (x *TrafficByL5Port) GetIMAP() []*TimeTrafficValue {
	if x != nil {
		return x.IMAP
	}
	return nil
}

func (x *TrafficByL5Port) GetIMAPS() []*TimeTrafficValue {
	if x != nil {
		return x.IMAPS
	}
	return nil
}

func (x *TrafficByL5Port) GetPOP3() []*TimeTrafficValue {
	if x != nil {
		return x.POP3
	}
	return nil
}

func (x *TrafficByL5Port) GetPOP3S() []*TimeTrafficValue {
	if x != nil {
		return x.POP3S
	}
	return nil
}

func (x *TrafficByL5Port) GetNTP() []*TimeTrafficValue {
	if x != nil {
		return x.NTP
	}
	return nil
}

func (x *TrafficByL5Port) GetSNMP() []*TimeTrafficValue {
	if x != nil {
		return x.SNMP
	}
	return nil
}

func (x *TrafficByL5Port) GetBGP() []*TimeTrafficValue {
	if x != nil {
		return x.BGP
	}
	return nil
}

func (x *TrafficByL5Port) GetLDAP() []*TimeTrafficValue {
	if x != nil {
		return x.LDAP
	}
	return nil
}

func (x *TrafficByL5Port) GetLDAPS() []*TimeTrafficValue {
	if x != nil {
		return x.LDAPS
	}
	return nil
}

func (x *TrafficByL5Port) GetMySQL() []*TimeTrafficValue {
	if x != nil {
		return x.MySQL
	}
	return nil
}

func (x *TrafficByL5Port) GetPostgreSQL() []*TimeTrafficValue {
	if x != nil {
		return x.PostgreSQL
	}
	return nil
}

func (x *TrafficByL5Port) GetMSSQL() []*TimeTrafficValue {
	if x != nil {
		return x.MSSQL
	}
	return nil
}

func (x *TrafficByL5Port) GetRedis() []*TimeTrafficValue {
	if x != nil {
		return x.Redis
	}
	return nil
}

func (x *TrafficByL5Port) GetNFS() []*TimeTrafficValue {
	if x != nil {
		return x.NFS
	}
	return nil
}

func (x *TrafficByL5Port) GetSIP() []*TimeTrafficValue {
	if x != nil {
		return x.SIP
	}
	return nil
}

func (x *TrafficByL5Port) GetSIPTLS() []*TimeTrafficValue {
	if x != nil {
		return x.SIPTLS
	}
	return nil
}

func (x *TrafficByL5Port) GetAMQP() []*TimeTrafficValue {
	if x != nil {
		return x.AMQP
	}
	return nil
}

func (x *TrafficByL5Port) GetAMQPS() []*TimeTrafficValue {
	if x != nil {
		return x.AMQPS
	}
	return nil
}

type TrafficByDirection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Incoming []*TimeTrafficValue `protobuf:"bytes,11,rep,name=incoming,proto3" json:"incoming,omitempty"`
	Outgoing []*TimeTrafficValue `protobuf:"bytes,21,rep,name=outgoing,proto3" json:"outgoing,omitempty"`
}

func (x *TrafficByDirection) Reset() {
	*x = TrafficByDirection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TrafficByDirection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TrafficByDirection) ProtoMessage() {}

func (x *TrafficByDirection) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TrafficByDirection.ProtoReflect.Descriptor instead.
func (*TrafficByDirection) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{5}
}

func (x *TrafficByDirection) GetIncoming() []*TimeTrafficValue {
	if x != nil {
		return x.Incoming
	}
	return nil
}

func (x *TrafficByDirection) GetOutgoing() []*TimeTrafficValue {
	if x != nil {
		return x.Outgoing
	}
	return nil
}

type TopTalkers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Src []*Talker `protobuf:"bytes,11,rep,name=src,proto3" json:"src,omitempty"`
	Dst []*Talker `protobuf:"bytes,21,rep,name=dst,proto3" json:"dst,omitempty"`
}

func (x *TopTalkers) Reset() {
	*x = TopTalkers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopTalkers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopTalkers) ProtoMessage() {}

func (x *TopTalkers) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopTalkers.ProtoReflect.Descriptor instead.
func (*TopTalkers) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{6}
}

func (x *TopTalkers) GetSrc() []*Talker {
	if x != nil {
		return x.Src
	}
	return nil
}

func (x *TopTalkers) GetDst() []*Talker {
	if x != nil {
		return x.Dst
	}
	return nil
}

type Talker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addr  string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	Bytes uint64 `protobuf:"varint,11,opt,name=bytes,proto3" json:"bytes,omitempty"`
}

func (x *Talker) Reset() {
	*x = Talker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Talker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Talker) ProtoMessage() {}

func (x *Talker) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Talker.ProtoReflect.Descriptor instead.
func (*Talker) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{7}
}

func (x *Talker) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *Talker) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

type TimeTrafficValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp int64           `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Traffic   *TrafficCounter `protobuf:"bytes,11,opt,name=traffic,proto3" json:"traffic,omitempty"`
}

func (x *TimeTrafficValue) Reset() {
	*x = TimeTrafficValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeTrafficValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeTrafficValue) ProtoMessage() {}

func (x *TimeTrafficValue) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeTrafficValue.ProtoReflect.Descriptor instead.
func (*TimeTrafficValue) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP(), []int{8}
}

func (x *TimeTrafficValue) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *TimeTrafficValue) GetTraffic() *TrafficCounter {
	if x != nil {
		return x.Traffic
	}
	return nil
}

var File_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDesc = []byte{
	0x0a, 0x3d, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2f, 0x6e, 0x65, 0x74, 0x66, 0x6c,
	0x6f, 0x77, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x1a, 0x39, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6e, 0x65, 0x74, 0x64, 0x62,
	0x2f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2f, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1f, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04, 0x66, 0x6c, 0x6f,
	0x77, 0x12, 0x30, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0xe9, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x07, 0x74, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x22, 0x73, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64,
	0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x82, 0x03, 0x0a, 0x16, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x44,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71, 0x75, 0x65, 0x72, 0x79, 0x49, 0x44, 0x12,
	0x38, 0x0a, 0x0a, 0x62, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x65, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x0a, 0x62,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x08, 0x62, 0x79, 0x4c,
	0x35, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x65,
	0x74, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x79, 0x4c, 0x35, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x08, 0x62, 0x79, 0x4c, 0x35, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x3b, 0x0a,
	0x0b, 0x62, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x79, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x62,
	0x79, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x0a, 0x74, 0x6f,
	0x70, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x6f, 0x70, 0x54, 0x61, 0x6c, 0x6b, 0x65,
	0x72, 0x73, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x1d,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0xe9, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xd6, 0x02,
	0x0a, 0x11, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x29, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x54, 0x43,
	0x50, 0x12, 0x29, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x55, 0x44, 0x50, 0x12, 0x2f, 0x0a, 0x06,
	0x49, 0x43, 0x4d, 0x50, 0x76, 0x34, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e,
	0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x49, 0x43, 0x4d, 0x50, 0x76, 0x34, 0x12, 0x2f, 0x0a,
	0x06, 0x49, 0x43, 0x4d, 0x50, 0x76, 0x36, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x49, 0x43, 0x4d, 0x50, 0x76, 0x36, 0x12, 0x29,
	0x0a, 0x03, 0x47, 0x52, 0x45, 0x18, 0x33, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x47, 0x52, 0x45, 0x12, 0x2b, 0x0a, 0x04, 0x53, 0x43, 0x54,
	0x50, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x53, 0x43, 0x54, 0x50, 0x22, 0x88, 0x0a, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x42, 0x79, 0x4c, 0x35, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2d, 0x0a, 0x05, 0x6f, 0x74,
	0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64,
	0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x48, 0x54, 0x54,
	0x50, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x48, 0x54, 0x54, 0x50, 0x12, 0x2d, 0x0a, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x48, 0x54, 0x54, 0x50, 0x53, 0x12, 0x29, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x18, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x53, 0x53, 0x48,
	0x12, 0x29, 0x0a, 0x03, 0x52, 0x44, 0x50, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x52, 0x44, 0x50, 0x12, 0x29, 0x0a, 0x03, 0x44,
	0x4e, 0x53, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x03, 0x44, 0x4e, 0x53, 0x12, 0x2b, 0x0a, 0x04, 0x53, 0x4d, 0x54, 0x50, 0x18, 0x65,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x53,
	0x4d, 0x54, 0x50, 0x12, 0x2d, 0x0a, 0x05, 0x53, 0x4d, 0x54, 0x50, 0x53, 0x18, 0x66, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x53, 0x4d, 0x54,
	0x50, 0x53, 0x12, 0x3f, 0x0a, 0x0e, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x69, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74,
	0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0e, 0x4d, 0x61, 0x69, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x49, 0x4d, 0x41, 0x50, 0x18, 0x6f, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x49, 0x4d, 0x41, 0x50,
	0x12, 0x2d, 0x0a, 0x05, 0x49, 0x4d, 0x41, 0x50, 0x53, 0x18, 0x70, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x49, 0x4d, 0x41, 0x50, 0x53, 0x12,
	0x2b, 0x0a, 0x04, 0x50, 0x4f, 0x50, 0x33, 0x18, 0x79, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x50, 0x4f, 0x50, 0x33, 0x12, 0x2d, 0x0a, 0x05,
	0x50, 0x4f, 0x50, 0x33, 0x53, 0x18, 0x7a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x50, 0x4f, 0x50, 0x33, 0x53, 0x12, 0x2a, 0x0a, 0x03, 0x4e,
	0x54, 0x50, 0x18, 0x83, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64,
	0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x03, 0x4e, 0x54, 0x50, 0x12, 0x2c, 0x0a, 0x04, 0x53, 0x4e, 0x4d, 0x50, 0x18,
	0x8d, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x53, 0x4e, 0x4d, 0x50, 0x12, 0x2a, 0x0a, 0x03, 0x42, 0x47, 0x50, 0x18, 0x97, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x42, 0x47,
	0x50, 0x12, 0x2c, 0x0a, 0x04, 0x4c, 0x44, 0x41, 0x50, 0x18, 0xa1, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x4c, 0x44, 0x41, 0x50, 0x12,
	0x2e, 0x0a, 0x05, 0x4c, 0x44, 0x41, 0x50, 0x53, 0x18, 0xa2, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x4c, 0x44, 0x41, 0x50, 0x53, 0x12,
	0x2e, 0x0a, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x18, 0xab, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x12,
	0x38, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x18, 0xb5, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x53, 0x51, 0x4c, 0x12, 0x2e, 0x0a, 0x05, 0x4d, 0x53, 0x53,
	0x51, 0x4c, 0x18, 0xbf, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64,
	0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x4d, 0x53, 0x53, 0x51, 0x4c, 0x12, 0x2e, 0x0a, 0x05, 0x52, 0x65, 0x64,
	0x69, 0x73, 0x18, 0xc9, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64,
	0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x52, 0x65, 0x64, 0x69, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x4e, 0x46, 0x53,
	0x18, 0xd3, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x4e, 0x46, 0x53, 0x12, 0x2a, 0x0a, 0x03, 0x53, 0x49, 0x50, 0x18, 0xdd, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x53, 0x49,
	0x50, 0x12, 0x30, 0x0a, 0x06, 0x53, 0x49, 0x50, 0x54, 0x4c, 0x53, 0x18, 0xde, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x53, 0x49, 0x50,
	0x54, 0x4c, 0x53, 0x12, 0x2c, 0x0a, 0x04, 0x41, 0x4d, 0x51, 0x50, 0x18, 0xe7, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54,
	0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x41, 0x4d, 0x51,
	0x50, 0x12, 0x2e, 0x0a, 0x05, 0x41, 0x4d, 0x51, 0x50, 0x53, 0x18, 0xe8, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72,
	0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x41, 0x4d, 0x51, 0x50,
	0x53, 0x22, 0x7e, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x42, 0x79, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6f, 0x6d,
	0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x74, 0x64,
	0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x08,
	0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6f, 0x75, 0x74, 0x67, 0x6f, 0x69, 0x6e,
	0x67, 0x22, 0x4e, 0x0a, 0x0a, 0x54, 0x6f, 0x70, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x73, 0x12,
	0x1f, 0x0a, 0x03, 0x73, 0x72, 0x63, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e,
	0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x52, 0x03, 0x73, 0x72, 0x63,
	0x12, 0x1f, 0x0a, 0x03, 0x64, 0x73, 0x74, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6e, 0x65, 0x74, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x52, 0x03, 0x64, 0x73,
	0x74, 0x22, 0x32, 0x0a, 0x06, 0x54, 0x61, 0x6c, 0x6b, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x64, 0x64, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x10, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x66, 0x66,
	0x69, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x64, 0x62,
	0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52,
	0x07, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x2a, 0x89, 0x01, 0x0a, 0x10, 0x54, 0x72, 0x61,
	0x66, 0x66, 0x69, 0x63, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x00,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x52, 0x41,
	0x46, 0x46, 0x49, 0x43, 0x5f, 0x42, 0x59, 0x5f, 0x4c, 0x35, 0x5f, 0x50, 0x4f, 0x52, 0x54, 0x10,
	0x15, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x42, 0x59, 0x5f,
	0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x52, 0x41, 0x46, 0x46, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x4c, 0x4b, 0x45,
	0x52, 0x53, 0x10, 0x29, 0x42, 0x30, 0x5a, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65,
	0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2f, 0x6e, 0x65, 0x74, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescData = file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDesc
)

func file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescData)
	})
	return file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDescData
}

var file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_goTypes = []interface{}{
	(TrafficQueryType)(0),          // 0: netdb.TrafficQueryType
	(*NetFlowEntry)(nil),           // 1: netdb.NetFlowEntry
	(*TrafficMetricsRequest)(nil),  // 2: netdb.TrafficMetricsRequest
	(*TrafficMetricsResponse)(nil), // 3: netdb.TrafficMetricsResponse
	(*TrafficByProtocol)(nil),      // 4: netdb.TrafficByProtocol
	(*TrafficByL5Port)(nil),        // 5: netdb.TrafficByL5Port
	(*TrafficByDirection)(nil),     // 6: netdb.TrafficByDirection
	(*TopTalkers)(nil),             // 7: netdb.TopTalkers
	(*Talker)(nil),                 // 8: netdb.Talker
	(*TimeTrafficValue)(nil),       // 9: netdb.TimeTrafficValue
	(*Flow)(nil),                   // 10: netdb.Flow
	(*TrafficCounter)(nil),         // 11: netdb.TrafficCounter
	(*nstore.DataRequest)(nil),     // 12: nstore.DataRequest
}
var file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_depIdxs = []int32{
	10, // 0: netdb.NetFlowEntry.flow:type_name -> netdb.Flow
	11, // 1: netdb.NetFlowEntry.traffic:type_name -> netdb.TrafficCounter
	12, // 2: netdb.TrafficMetricsRequest.request:type_name -> nstore.DataRequest
	0,  // 3: netdb.TrafficMetricsRequest.type:type_name -> netdb.TrafficQueryType
	4,  // 4: netdb.TrafficMetricsResponse.byProtocol:type_name -> netdb.TrafficByProtocol
	5,  // 5: netdb.TrafficMetricsResponse.byL5Port:type_name -> netdb.TrafficByL5Port
	6,  // 6: netdb.TrafficMetricsResponse.byDirection:type_name -> netdb.TrafficByDirection
	7,  // 7: netdb.TrafficMetricsResponse.topTalkers:type_name -> netdb.TopTalkers
	9,  // 8: netdb.TrafficByProtocol.unknown:type_name -> netdb.TimeTrafficValue
	9,  // 9: netdb.TrafficByProtocol.TCP:type_name -> netdb.TimeTrafficValue
	9,  // 10: netdb.TrafficByProtocol.UDP:type_name -> netdb.TimeTrafficValue
	9,  // 11: netdb.TrafficByProtocol.ICMPv4:type_name -> netdb.TimeTrafficValue
	9,  // 12: netdb.TrafficByProtocol.ICMPv6:type_name -> netdb.TimeTrafficValue
	9,  // 13: netdb.TrafficByProtocol.GRE:type_name -> netdb.TimeTrafficValue
	9,  // 14: netdb.TrafficByProtocol.SCTP:type_name -> netdb.TimeTrafficValue
	9,  // 15: netdb.TrafficByL5Port.other:type_name -> netdb.TimeTrafficValue
	9,  // 16: netdb.TrafficByL5Port.HTTP:type_name -> netdb.TimeTrafficValue
	9,  // 17: netdb.TrafficByL5Port.HTTPS:type_name -> netdb.TimeTrafficValue
	9,  // 18: netdb.TrafficByL5Port.SSH:type_name -> netdb.TimeTrafficValue
	9,  // 19: netdb.TrafficByL5Port.RDP:type_name -> netdb.TimeTrafficValue
	9,  // 20: netdb.TrafficByL5Port.DNS:type_name -> netdb.TimeTrafficValue
	9,  // 21: netdb.TrafficByL5Port.SMTP:type_name -> netdb.TimeTrafficValue
	9,  // 22: netdb.TrafficByL5Port.SMTPS:type_name -> netdb.TimeTrafficValue
	9,  // 23: netdb.TrafficByL5Port.MailSubmission:type_name -> netdb.TimeTrafficValue
	9,  // 24: netdb.TrafficByL5Port.IMAP:type_name -> netdb.TimeTrafficValue
	9,  // 25: netdb.TrafficByL5Port.IMAPS:type_name -> netdb.TimeTrafficValue
	9,  // 26: netdb.TrafficByL5Port.POP3:type_name -> netdb.TimeTrafficValue
	9,  // 27: netdb.TrafficByL5Port.POP3S:type_name -> netdb.TimeTrafficValue
	9,  // 28: netdb.TrafficByL5Port.NTP:type_name -> netdb.TimeTrafficValue
	9,  // 29: netdb.TrafficByL5Port.SNMP:type_name -> netdb.TimeTrafficValue
	9,  // 30: netdb.TrafficByL5Port.BGP:type_name -> netdb.TimeTrafficValue
	9,  // 31: netdb.TrafficByL5Port.LDAP:type_name -> netdb.TimeTrafficValue
	9,  // 32: netdb.TrafficByL5Port.LDAPS:type_name -> netdb.TimeTrafficValue
	9,  // 33: netdb.TrafficByL5Port.MySQL:type_name -> netdb.TimeTrafficValue
	9,  // 34: netdb.TrafficByL5Port.PostgreSQL:type_name -> netdb.TimeTrafficValue
	9,  // 35: netdb.TrafficByL5Port.MSSQL:type_name -> netdb.TimeTrafficValue
	9,  // 36: netdb.TrafficByL5Port.Redis:type_name -> netdb.TimeTrafficValue
	9,  // 37: netdb.TrafficByL5Port.NFS:type_name -> netdb.TimeTrafficValue
	9,  // 38: netdb.TrafficByL5Port.SIP:type_name -> netdb.TimeTrafficValue
	9,  // 39: netdb.TrafficByL5Port.SIPTLS:type_name -> netdb.TimeTrafficValue
	9,  // 40: netdb.TrafficByL5Port.AMQP:type_name -> netdb.TimeTrafficValue
	9,  // 41: netdb.TrafficByL5Port.AMQPS:type_name -> netdb.TimeTrafficValue
	9,  // 42: netdb.TrafficByDirection.incoming:type_name -> netdb.TimeTrafficValue
	9,  // 43: netdb.TrafficByDirection.outgoing:type_name -> netdb.TimeTrafficValue
	8,  // 44: netdb.TopTalkers.src:type_name -> netdb.Talker
	8,  // 45: netdb.TopTalkers.dst:type_name -> netdb.Talker
	11, // 46: netdb.TimeTrafficValue.traffic:type_name -> netdb.TrafficCounter
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_init() }
func file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_init() {
	if File_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto != nil {
		return
	}
	file_mmesh_protobuf_resources_v1_nstore_netdb_connection_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetFlowEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficMetricsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficMetricsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficByProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficByL5Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TrafficByDirection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopTalkers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Talker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeTrafficValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_depIdxs,
		EnumInfos:         file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_enumTypes,
		MessageInfos:      file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto = out.File
	file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_rawDesc = nil
	file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_goTypes = nil
	file_mmesh_protobuf_resources_v1_nstore_netdb_netflowTraffic_proto_depIdxs = nil
}
