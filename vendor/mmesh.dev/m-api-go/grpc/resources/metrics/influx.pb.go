// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: mmesh/protobuf/resources/v1/metrics/influx.proto

package metrics

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Measurement int32

const (
	Measurement_NET     Measurement = 0
	Measurement_HOST    Measurement = 1
	Measurement_EVENT   Measurement = 2
	Measurement_BILLING Measurement = 101
)

// Enum value maps for Measurement.
var (
	Measurement_name = map[int32]string{
		0:   "NET",
		1:   "HOST",
		2:   "EVENT",
		101: "BILLING",
	}
	Measurement_value = map[string]int32{
		"NET":     0,
		"HOST":    1,
		"EVENT":   2,
		"BILLING": 101,
	}
)

func (x Measurement) Enum() *Measurement {
	p := new(Measurement)
	*p = x
	return p
}

func (x Measurement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Measurement) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_enumTypes[0].Descriptor()
}

func (Measurement) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_metrics_influx_proto_enumTypes[0]
}

func (x Measurement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Measurement.Descriptor instead.
func (Measurement) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescGZIP(), []int{0}
}

type DataPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp   int64       `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Measurement Measurement `protobuf:"varint,5,opt,name=measurement,proto3,enum=metrics.Measurement" json:"measurement,omitempty"`
	// tags
	AccountID string `protobuf:"bytes,11,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID  string `protobuf:"bytes,12,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID     string `protobuf:"bytes,13,opt,name=netID,proto3" json:"netID,omitempty"`
	VRFID     string `protobuf:"bytes,14,opt,name=VRFID,proto3" json:"VRFID,omitempty"`
	NodeID    string `protobuf:"bytes,15,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	UserEmail string `protobuf:"bytes,21,opt,name=userEmail,proto3" json:"userEmail,omitempty"`
	// fields
	// NET measurement
	// double netRxBps = 101;
	// double netTxBps = 102;
	NetRxBytes uint64 `protobuf:"varint,103,opt,name=netRxBytes,proto3" json:"netRxBytes,omitempty"`
	NetTxBytes uint64 `protobuf:"varint,104,opt,name=netTxBytes,proto3" json:"netTxBytes,omitempty"`
	// uint64 netRxPkts = 105;
	// uint64 netTxPkts = 106;
	NetDroppedPkts uint64 `protobuf:"varint,107,opt,name=netDroppedPkts,proto3" json:"netDroppedPkts,omitempty"`
	// HOST measurement
	HostLoadAvg   float64 `protobuf:"fixed64,201,opt,name=hostLoadAvg,proto3" json:"hostLoadAvg,omitempty"`
	HostCpuUsage  uint64  `protobuf:"varint,211,opt,name=hostCpuUsage,proto3" json:"hostCpuUsage,omitempty"`
	HostMemUsage  uint64  `protobuf:"varint,221,opt,name=hostMemUsage,proto3" json:"hostMemUsage,omitempty"`
	HostDiskUsage uint64  `protobuf:"varint,231,opt,name=hostDiskUsage,proto3" json:"hostDiskUsage,omitempty"`
	// EVENT measurement
	EventActivity string `protobuf:"bytes,301,opt,name=eventActivity,proto3" json:"eventActivity,omitempty"`
	EventSuccess  bool   `protobuf:"varint,302,opt,name=eventSuccess,proto3" json:"eventSuccess,omitempty"` // bool eventFail = 303;
	// BILLING measurement
	Amount float64 `protobuf:"fixed64,1001,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *DataPoint) Reset() {
	*x = DataPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoint) ProtoMessage() {}

func (x *DataPoint) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoint.ProtoReflect.Descriptor instead.
func (*DataPoint) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescGZIP(), []int{0}
}

func (x *DataPoint) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *DataPoint) GetMeasurement() Measurement {
	if x != nil {
		return x.Measurement
	}
	return Measurement_NET
}

func (x *DataPoint) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *DataPoint) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *DataPoint) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *DataPoint) GetVRFID() string {
	if x != nil {
		return x.VRFID
	}
	return ""
}

func (x *DataPoint) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DataPoint) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *DataPoint) GetNetRxBytes() uint64 {
	if x != nil {
		return x.NetRxBytes
	}
	return 0
}

func (x *DataPoint) GetNetTxBytes() uint64 {
	if x != nil {
		return x.NetTxBytes
	}
	return 0
}

func (x *DataPoint) GetNetDroppedPkts() uint64 {
	if x != nil {
		return x.NetDroppedPkts
	}
	return 0
}

func (x *DataPoint) GetHostLoadAvg() float64 {
	if x != nil {
		return x.HostLoadAvg
	}
	return 0
}

func (x *DataPoint) GetHostCpuUsage() uint64 {
	if x != nil {
		return x.HostCpuUsage
	}
	return 0
}

func (x *DataPoint) GetHostMemUsage() uint64 {
	if x != nil {
		return x.HostMemUsage
	}
	return 0
}

func (x *DataPoint) GetHostDiskUsage() uint64 {
	if x != nil {
		return x.HostDiskUsage
	}
	return 0
}

func (x *DataPoint) GetEventActivity() string {
	if x != nil {
		return x.EventActivity
	}
	return ""
}

func (x *DataPoint) GetEventSuccess() bool {
	if x != nil {
		return x.EventSuccess
	}
	return false
}

func (x *DataPoint) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DataPoints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID  string       `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID   string       `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID      string       `protobuf:"bytes,3,opt,name=netID,proto3" json:"netID,omitempty"`
	VRFID      string       `protobuf:"bytes,4,opt,name=VRFID,proto3" json:"VRFID,omitempty"`
	NodeID     string       `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	DataPoints []*DataPoint `protobuf:"bytes,11,rep,name=dataPoints,proto3" json:"dataPoints,omitempty"`
}

func (x *DataPoints) Reset() {
	*x = DataPoints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataPoints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataPoints) ProtoMessage() {}

func (x *DataPoints) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataPoints.ProtoReflect.Descriptor instead.
func (*DataPoints) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescGZIP(), []int{1}
}

func (x *DataPoints) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *DataPoints) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *DataPoints) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *DataPoints) GetVRFID() string {
	if x != nil {
		return x.VRFID
	}
	return ""
}

func (x *DataPoints) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *DataPoints) GetDataPoints() []*DataPoint {
	if x != nil {
		return x.DataPoints
	}
	return nil
}

type InfluxQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID string `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Query     string `protobuf:"bytes,11,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *InfluxQuery) Reset() {
	*x = InfluxQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfluxQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfluxQuery) ProtoMessage() {}

func (x *InfluxQuery) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfluxQuery.ProtoReflect.Descriptor instead.
func (*InfluxQuery) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescGZIP(), []int{2}
}

func (x *InfluxQuery) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *InfluxQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

type InfluxQueryResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics []*InfluxMetricRecord  `protobuf:"bytes,11,rep,name=metrics,proto3" json:"metrics,omitempty"`
	Events  []*InfluxEventRecord   `protobuf:"bytes,21,rep,name=events,proto3" json:"events,omitempty"`
	Billing []*InfluxBillingRecord `protobuf:"bytes,31,rep,name=billing,proto3" json:"billing,omitempty"`
}

func (x *InfluxQueryResult) Reset() {
	*x = InfluxQueryResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfluxQueryResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfluxQueryResult) ProtoMessage() {}

func (x *InfluxQueryResult) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfluxQueryResult.ProtoReflect.Descriptor instead.
func (*InfluxQueryResult) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescGZIP(), []int{3}
}

func (x *InfluxQueryResult) GetMetrics() []*InfluxMetricRecord {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *InfluxQueryResult) GetEvents() []*InfluxEventRecord {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *InfluxQueryResult) GetBilling() []*InfluxBillingRecord {
	if x != nil {
		return x.Billing
	}
	return nil
}

type InfluxMetricRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID   string  `protobuf:"bytes,11,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID    string  `protobuf:"bytes,12,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID       string  `protobuf:"bytes,13,opt,name=netID,proto3" json:"netID,omitempty"`
	VRFID       string  `protobuf:"bytes,14,opt,name=VRFID,proto3" json:"VRFID,omitempty"`
	NodeID      string  `protobuf:"bytes,15,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Start       int64   `protobuf:"varint,101,opt,name=start,proto3" json:"start,omitempty"`
	Stop        int64   `protobuf:"varint,102,opt,name=stop,proto3" json:"stop,omitempty"`
	Time        int64   `protobuf:"varint,103,opt,name=time,proto3" json:"time,omitempty"`
	Measurement string  `protobuf:"bytes,111,opt,name=measurement,proto3" json:"measurement,omitempty"`
	Field       string  `protobuf:"bytes,121,opt,name=field,proto3" json:"field,omitempty"`
	Value       float64 `protobuf:"fixed64,122,opt,name=value,proto3" json:"value,omitempty"` // specific for metric-type measurements (NET, HOST)
}

func (x *InfluxMetricRecord) Reset() {
	*x = InfluxMetricRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfluxMetricRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfluxMetricRecord) ProtoMessage() {}

func (x *InfluxMetricRecord) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfluxMetricRecord.ProtoReflect.Descriptor instead.
func (*InfluxMetricRecord) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescGZIP(), []int{4}
}

func (x *InfluxMetricRecord) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *InfluxMetricRecord) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *InfluxMetricRecord) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *InfluxMetricRecord) GetVRFID() string {
	if x != nil {
		return x.VRFID
	}
	return ""
}

func (x *InfluxMetricRecord) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *InfluxMetricRecord) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *InfluxMetricRecord) GetStop() int64 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *InfluxMetricRecord) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *InfluxMetricRecord) GetMeasurement() string {
	if x != nil {
		return x.Measurement
	}
	return ""
}

func (x *InfluxMetricRecord) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *InfluxMetricRecord) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type InfluxEventRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID   string `protobuf:"bytes,11,opt,name=accountID,proto3" json:"accountID,omitempty"`
	UserEmail   string `protobuf:"bytes,21,opt,name=userEmail,proto3" json:"userEmail,omitempty"`
	Start       int64  `protobuf:"varint,101,opt,name=start,proto3" json:"start,omitempty"`
	Stop        int64  `protobuf:"varint,102,opt,name=stop,proto3" json:"stop,omitempty"`
	Time        int64  `protobuf:"varint,103,opt,name=time,proto3" json:"time,omitempty"`
	Measurement string `protobuf:"bytes,111,opt,name=measurement,proto3" json:"measurement,omitempty"`
	Field       string `protobuf:"bytes,121,opt,name=field,proto3" json:"field,omitempty"`
	Value       bool   `protobuf:"varint,122,opt,name=value,proto3" json:"value,omitempty"` // specific for event-type measurements (EVENT)
}

func (x *InfluxEventRecord) Reset() {
	*x = InfluxEventRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfluxEventRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfluxEventRecord) ProtoMessage() {}

func (x *InfluxEventRecord) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfluxEventRecord.ProtoReflect.Descriptor instead.
func (*InfluxEventRecord) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescGZIP(), []int{5}
}

func (x *InfluxEventRecord) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *InfluxEventRecord) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *InfluxEventRecord) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *InfluxEventRecord) GetStop() int64 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *InfluxEventRecord) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *InfluxEventRecord) GetMeasurement() string {
	if x != nil {
		return x.Measurement
	}
	return ""
}

func (x *InfluxEventRecord) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *InfluxEventRecord) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type InfluxBillingRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID   string  `protobuf:"bytes,11,opt,name=accountID,proto3" json:"accountID,omitempty"`
	Start       int64   `protobuf:"varint,101,opt,name=start,proto3" json:"start,omitempty"`
	Stop        int64   `protobuf:"varint,102,opt,name=stop,proto3" json:"stop,omitempty"`
	Time        int64   `protobuf:"varint,103,opt,name=time,proto3" json:"time,omitempty"`
	Measurement string  `protobuf:"bytes,111,opt,name=measurement,proto3" json:"measurement,omitempty"`
	Field       string  `protobuf:"bytes,121,opt,name=field,proto3" json:"field,omitempty"`
	Value       float64 `protobuf:"fixed64,122,opt,name=value,proto3" json:"value,omitempty"` // specific for billing-type measurements (BILLING)
}

func (x *InfluxBillingRecord) Reset() {
	*x = InfluxBillingRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfluxBillingRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfluxBillingRecord) ProtoMessage() {}

func (x *InfluxBillingRecord) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfluxBillingRecord.ProtoReflect.Descriptor instead.
func (*InfluxBillingRecord) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescGZIP(), []int{6}
}

func (x *InfluxBillingRecord) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *InfluxBillingRecord) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *InfluxBillingRecord) GetStop() int64 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *InfluxBillingRecord) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *InfluxBillingRecord) GetMeasurement() string {
	if x != nil {
		return x.Measurement
	}
	return ""
}

func (x *InfluxBillingRecord) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *InfluxBillingRecord) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

var File_mmesh_protobuf_resources_v1_metrics_influx_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDesc = []byte{
	0x0a, 0x30, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xde, 0x04, 0x0a, 0x09,
	0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x56, 0x52, 0x46, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x56, 0x52, 0x46, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x65, 0x74, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x67, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6e, 0x65, 0x74, 0x52, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6e,
	0x65, 0x74, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x68, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6e, 0x65, 0x74, 0x54, 0x78, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x6e,
	0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50, 0x6b, 0x74, 0x73, 0x18, 0x6b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x50,
	0x6b, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x41,
	0x76, 0x67, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x4c,
	0x6f, 0x61, 0x64, 0x41, 0x76, 0x67, 0x12, 0x23, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x43, 0x70,
	0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0xd3, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x68,
	0x6f, 0x73, 0x74, 0x43, 0x70, 0x75, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x68,
	0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0xdd, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x25, 0x0a, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xe7, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x69,
	0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0xae,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xe9, 0x07,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbe, 0x01, 0x0a,
	0x0a, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x52, 0x46, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x52, 0x46, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x0a, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x41, 0x0a,
	0x0b, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x22, 0xb6, 0x01, 0x0a, 0x11, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x32, 0x0a,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x66, 0x6c, 0x75, 0x78, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x49, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x07, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x9e, 0x02, 0x0a, 0x12, 0x49, 0x6e,
	0x66, 0x6c, 0x75, 0x78, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x52, 0x46, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x52, 0x46, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x7a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x11, 0x49,
	0x6e, 0x66, 0x6c, 0x75, 0x78, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x66, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x67,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x7a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x13, 0x49, 0x6e, 0x66,
	0x6c, 0x75, 0x78, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x65, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x66, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x67, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x79, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x7a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x38, 0x0a, 0x0b, 0x4d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x45, 0x54,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x49, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x10, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65,
	0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescData = file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDesc
)

func file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescData)
	})
	return file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDescData
}

var file_mmesh_protobuf_resources_v1_metrics_influx_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_mmesh_protobuf_resources_v1_metrics_influx_proto_goTypes = []interface{}{
	(Measurement)(0),            // 0: metrics.Measurement
	(*DataPoint)(nil),           // 1: metrics.DataPoint
	(*DataPoints)(nil),          // 2: metrics.DataPoints
	(*InfluxQuery)(nil),         // 3: metrics.InfluxQuery
	(*InfluxQueryResult)(nil),   // 4: metrics.InfluxQueryResult
	(*InfluxMetricRecord)(nil),  // 5: metrics.InfluxMetricRecord
	(*InfluxEventRecord)(nil),   // 6: metrics.InfluxEventRecord
	(*InfluxBillingRecord)(nil), // 7: metrics.InfluxBillingRecord
}
var file_mmesh_protobuf_resources_v1_metrics_influx_proto_depIdxs = []int32{
	0, // 0: metrics.DataPoint.measurement:type_name -> metrics.Measurement
	1, // 1: metrics.DataPoints.dataPoints:type_name -> metrics.DataPoint
	5, // 2: metrics.InfluxQueryResult.metrics:type_name -> metrics.InfluxMetricRecord
	6, // 3: metrics.InfluxQueryResult.events:type_name -> metrics.InfluxEventRecord
	7, // 4: metrics.InfluxQueryResult.billing:type_name -> metrics.InfluxBillingRecord
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_resources_v1_metrics_influx_proto_init() }
func file_mmesh_protobuf_resources_v1_metrics_influx_proto_init() {
	if File_mmesh_protobuf_resources_v1_metrics_influx_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataPoints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfluxQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfluxQueryResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfluxMetricRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfluxEventRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfluxBillingRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_resources_v1_metrics_influx_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_resources_v1_metrics_influx_proto_depIdxs,
		EnumInfos:         file_mmesh_protobuf_resources_v1_metrics_influx_proto_enumTypes,
		MessageInfos:      file_mmesh_protobuf_resources_v1_metrics_influx_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_resources_v1_metrics_influx_proto = out.File
	file_mmesh_protobuf_resources_v1_metrics_influx_proto_rawDesc = nil
	file_mmesh_protobuf_resources_v1_metrics_influx_proto_goTypes = nil
	file_mmesh_protobuf_resources_v1_metrics_influx_proto_depIdxs = nil
}
