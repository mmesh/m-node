// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: mmesh/protobuf/resources/v1/itsm/issue.proto

package itsm

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	messaging "mmesh.dev/m-api-go/grpc/resources/messaging"
	resource "mmesh.dev/m-api-go/grpc/resources/resource"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IssueStatus int32

const (
	IssueStatus_ISSUE_OPEN   IssueStatus = 0
	IssueStatus_ISSUE_CLOSED IssueStatus = 1
)

// Enum value maps for IssueStatus.
var (
	IssueStatus_name = map[int32]string{
		0: "ISSUE_OPEN",
		1: "ISSUE_CLOSED",
	}
	IssueStatus_value = map[string]int32{
		"ISSUE_OPEN":   0,
		"ISSUE_CLOSED": 1,
	}
)

func (x IssueStatus) Enum() *IssueStatus {
	p := new(IssueStatus)
	*p = x
	return p
}

func (x IssueStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes[0].Descriptor()
}

func (IssueStatus) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes[0]
}

func (x IssueStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueStatus.Descriptor instead.
func (IssueStatus) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{0}
}

type IssueClass int32

const (
	IssueClass_PLATFORM         IssueClass = 0
	IssueClass_EXTERNAL_SERVICE IssueClass = 1
)

// Enum value maps for IssueClass.
var (
	IssueClass_name = map[int32]string{
		0: "PLATFORM",
		1: "EXTERNAL_SERVICE",
	}
	IssueClass_value = map[string]int32{
		"PLATFORM":         0,
		"EXTERNAL_SERVICE": 1,
	}
)

func (x IssueClass) Enum() *IssueClass {
	p := new(IssueClass)
	*p = x
	return p
}

func (x IssueClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueClass) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes[1].Descriptor()
}

func (IssueClass) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes[1]
}

func (x IssueClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueClass.Descriptor instead.
func (IssueClass) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{1}
}

type IssueType int32

const (
	IssueType_ASSISTANCE  IssueType = 0  // support
	IssueType_FEEDBACK    IssueType = 11 // feedback
	IssueType_INCIDENT    IssueType = 21 // incident
	IssueType_PROBLEM     IssueType = 31 // problem
	IssueType_CHANGE      IssueType = 41 // change
	IssueType_REQUEST     IssueType = 51 // non-billed request
	IssueType_UNSPECIFIED IssueType = 200
)

// Enum value maps for IssueType.
var (
	IssueType_name = map[int32]string{
		0:   "ASSISTANCE",
		11:  "FEEDBACK",
		21:  "INCIDENT",
		31:  "PROBLEM",
		41:  "CHANGE",
		51:  "REQUEST",
		200: "UNSPECIFIED",
	}
	IssueType_value = map[string]int32{
		"ASSISTANCE":  0,
		"FEEDBACK":    11,
		"INCIDENT":    21,
		"PROBLEM":     31,
		"CHANGE":      41,
		"REQUEST":     51,
		"UNSPECIFIED": 200,
	}
)

func (x IssueType) Enum() *IssueType {
	p := new(IssueType)
	*p = x
	return p
}

func (x IssueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueType) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes[2].Descriptor()
}

func (IssueType) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes[2]
}

func (x IssueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueType.Descriptor instead.
func (IssueType) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{2}
}

type IssueSubtype int32

const (
	IssueSubtype_ASSISTANCE_INFO                   IssueSubtype = 0  // general information
	IssueSubtype_ASSISTANCE_SUPPORT                IssueSubtype = 1  // technical support
	IssueSubtype_FEEDBACK_GENERAL_COMMENTS         IssueSubtype = 11 // general feedback
	IssueSubtype_FEEDBACK_FEATURE_REQUEST          IssueSubtype = 12 // suggest a new feature
	IssueSubtype_INCIDENT_BILLING                  IssueSubtype = 21 // billing problem
	IssueSubtype_INCIDENT_PLATFORM                 IssueSubtype = 22 // platform or internal service incident
	IssueSubtype_PROBLEM_PLATFORM                  IssueSubtype = 31 // unspecified problem
	IssueSubtype_CHANGE_REQUEST                    IssueSubtype = 41 // non-billed change request (server upgrades, app changes)
	IssueSubtype_REQUEST_UNCATEGORIZED             IssueSubtype = 51 // other uncategorized requests
	IssueSubtype_REQUEST_ADVISORY_SERVICE          IssueSubtype = 52 // advisory service request
	IssueSubtype_REQUEST_SPECIAL_PROJECT           IssueSubtype = 53 // special project request
	IssueSubtype_REQUEST_SPECIAL_TASK              IssueSubtype = 54 // special task request (help during emergency or incident response)
	IssueSubtype_REQUEST_SPECIFIC_FUNCTIONALITY    IssueSubtype = 55 // special requirement / specific functionality request
	IssueSubtype_REQUEST_EXTERNAL_SERVICE          IssueSubtype = 59 // external service request
	IssueSubtype_UNSPECIFIED_OTHER                 IssueSubtype = 201
	IssueSubtype_UNSPECIFIED_CHAT                  IssueSubtype = 202
	IssueSubtype_UNSPECIFIED_CHAT_EXTERNAL_SERVICE IssueSubtype = 209
)

// Enum value maps for IssueSubtype.
var (
	IssueSubtype_name = map[int32]string{
		0:   "ASSISTANCE_INFO",
		1:   "ASSISTANCE_SUPPORT",
		11:  "FEEDBACK_GENERAL_COMMENTS",
		12:  "FEEDBACK_FEATURE_REQUEST",
		21:  "INCIDENT_BILLING",
		22:  "INCIDENT_PLATFORM",
		31:  "PROBLEM_PLATFORM",
		41:  "CHANGE_REQUEST",
		51:  "REQUEST_UNCATEGORIZED",
		52:  "REQUEST_ADVISORY_SERVICE",
		53:  "REQUEST_SPECIAL_PROJECT",
		54:  "REQUEST_SPECIAL_TASK",
		55:  "REQUEST_SPECIFIC_FUNCTIONALITY",
		59:  "REQUEST_EXTERNAL_SERVICE",
		201: "UNSPECIFIED_OTHER",
		202: "UNSPECIFIED_CHAT",
		209: "UNSPECIFIED_CHAT_EXTERNAL_SERVICE",
	}
	IssueSubtype_value = map[string]int32{
		"ASSISTANCE_INFO":                   0,
		"ASSISTANCE_SUPPORT":                1,
		"FEEDBACK_GENERAL_COMMENTS":         11,
		"FEEDBACK_FEATURE_REQUEST":          12,
		"INCIDENT_BILLING":                  21,
		"INCIDENT_PLATFORM":                 22,
		"PROBLEM_PLATFORM":                  31,
		"CHANGE_REQUEST":                    41,
		"REQUEST_UNCATEGORIZED":             51,
		"REQUEST_ADVISORY_SERVICE":          52,
		"REQUEST_SPECIAL_PROJECT":           53,
		"REQUEST_SPECIAL_TASK":              54,
		"REQUEST_SPECIFIC_FUNCTIONALITY":    55,
		"REQUEST_EXTERNAL_SERVICE":          59,
		"UNSPECIFIED_OTHER":                 201,
		"UNSPECIFIED_CHAT":                  202,
		"UNSPECIFIED_CHAT_EXTERNAL_SERVICE": 209,
	}
)

func (x IssueSubtype) Enum() *IssueSubtype {
	p := new(IssueSubtype)
	*p = x
	return p
}

func (x IssueSubtype) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueSubtype) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes[3].Descriptor()
}

func (IssueSubtype) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes[3]
}

func (x IssueSubtype) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueSubtype.Descriptor instead.
func (IssueSubtype) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{3}
}

// Issues are itsm tickets
type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID                       string                          `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	IssueID                         string                          `protobuf:"bytes,2,opt,name=issueID,proto3" json:"issueID,omitempty"`
	ServiceID                       string                          `protobuf:"bytes,11,opt,name=serviceID,proto3" json:"serviceID,omitempty"`             // mmesh
	ProviderID                      string                          `protobuf:"bytes,12,opt,name=providerID,proto3" json:"providerID,omitempty"`           // m-one
	ProviderChannel                 string                          `protobuf:"bytes,21,opt,name=providerChannel,proto3" json:"providerChannel,omitempty"` // _m-one (slack org m-gate at m-xs.slack.com)
	OwnerUserEmail                  string                          `protobuf:"bytes,31,opt,name=ownerUserEmail,proto3" json:"ownerUserEmail,omitempty"`
	OwnerUserNickname               string                          `protobuf:"bytes,32,opt,name=ownerUserNickname,proto3" json:"ownerUserNickname,omitempty"`
	Class                           IssueClass                      `protobuf:"varint,41,opt,name=class,proto3,enum=itsm.IssueClass" json:"class,omitempty"`
	IssueType                       IssueType                       `protobuf:"varint,51,opt,name=issueType,proto3,enum=itsm.IssueType" json:"issueType,omitempty"`
	IssueSubtype                    IssueSubtype                    `protobuf:"varint,52,opt,name=issueSubtype,proto3,enum=itsm.IssueSubtype" json:"issueSubtype,omitempty"`
	RelatedToExternalServiceRequest bool                            `protobuf:"varint,61,opt,name=relatedToExternalServiceRequest,proto3" json:"relatedToExternalServiceRequest,omitempty"`
	ExternalServiceRequest          *ExternalServiceRequest         `protobuf:"bytes,62,opt,name=externalServiceRequest,proto3" json:"externalServiceRequest,omitempty"`
	Summary                         string                          `protobuf:"bytes,71,opt,name=summary,proto3" json:"summary,omitempty"`
	Description                     string                          `protobuf:"bytes,72,opt,name=description,proto3" json:"description,omitempty"`
	Status                          IssueStatus                     `protobuf:"varint,81,opt,name=status,proto3,enum=itsm.IssueStatus" json:"status,omitempty"`
	Jira                            *JiraData                       `protobuf:"bytes,91,opt,name=jira,proto3" json:"jira,omitempty"`
	Comments                        map[string]*IssueComment        `protobuf:"bytes,101,rep,name=comments,proto3" json:"comments,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`        // jira comments: map[timestamp]*IssueComment
	ChatThreads                     map[int64]*messaging.ChatThread `protobuf:"bytes,102,rep,name=chatThreads,proto3" json:"chatThreads,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[timestamp]*ChatThread
	CreationDate                    int64                           `protobuf:"varint,201,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	LastModified                    int64                           `protobuf:"varint,202,opt,name=lastModified,proto3" json:"lastModified,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{0}
}

func (x *Issue) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *Issue) GetIssueID() string {
	if x != nil {
		return x.IssueID
	}
	return ""
}

func (x *Issue) GetServiceID() string {
	if x != nil {
		return x.ServiceID
	}
	return ""
}

func (x *Issue) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

func (x *Issue) GetProviderChannel() string {
	if x != nil {
		return x.ProviderChannel
	}
	return ""
}

func (x *Issue) GetOwnerUserEmail() string {
	if x != nil {
		return x.OwnerUserEmail
	}
	return ""
}

func (x *Issue) GetOwnerUserNickname() string {
	if x != nil {
		return x.OwnerUserNickname
	}
	return ""
}

func (x *Issue) GetClass() IssueClass {
	if x != nil {
		return x.Class
	}
	return IssueClass_PLATFORM
}

func (x *Issue) GetIssueType() IssueType {
	if x != nil {
		return x.IssueType
	}
	return IssueType_ASSISTANCE
}

func (x *Issue) GetIssueSubtype() IssueSubtype {
	if x != nil {
		return x.IssueSubtype
	}
	return IssueSubtype_ASSISTANCE_INFO
}

func (x *Issue) GetRelatedToExternalServiceRequest() bool {
	if x != nil {
		return x.RelatedToExternalServiceRequest
	}
	return false
}

func (x *Issue) GetExternalServiceRequest() *ExternalServiceRequest {
	if x != nil {
		return x.ExternalServiceRequest
	}
	return nil
}

func (x *Issue) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Issue) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Issue) GetStatus() IssueStatus {
	if x != nil {
		return x.Status
	}
	return IssueStatus_ISSUE_OPEN
}

func (x *Issue) GetJira() *JiraData {
	if x != nil {
		return x.Jira
	}
	return nil
}

func (x *Issue) GetComments() map[string]*IssueComment {
	if x != nil {
		return x.Comments
	}
	return nil
}

func (x *Issue) GetChatThreads() map[int64]*messaging.ChatThread {
	if x != nil {
		return x.ChatThreads
	}
	return nil
}

func (x *Issue) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Issue) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

type Issues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta   *resource.ListResponse `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Issues []*Issue               `protobuf:"bytes,2,rep,name=issues,proto3" json:"issues,omitempty"`
}

func (x *Issues) Reset() {
	*x = Issues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issues) ProtoMessage() {}

func (x *Issues) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issues.ProtoReflect.Descriptor instead.
func (*Issues) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{1}
}

func (x *Issues) GetMeta() *resource.ListResponse {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Issues) GetIssues() []*Issue {
	if x != nil {
		return x.Issues
	}
	return nil
}

type ListIssuesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta      *resource.ListRequest `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	AccountID string                `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *ListIssuesRequest) Reset() {
	*x = ListIssuesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListIssuesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListIssuesRequest) ProtoMessage() {}

func (x *ListIssuesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListIssuesRequest.ProtoReflect.Descriptor instead.
func (*ListIssuesRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{2}
}

func (x *ListIssuesRequest) GetMeta() *resource.ListRequest {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ListIssuesRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type JiraData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IssueID        string `protobuf:"bytes,1,opt,name=issueID,proto3" json:"issueID,omitempty"`
	IssueKey       string `protobuf:"bytes,2,opt,name=issueKey,proto3" json:"issueKey,omitempty"`
	RequestTypeID  string `protobuf:"bytes,3,opt,name=requestTypeID,proto3" json:"requestTypeID,omitempty"`
	ServiceDeskID  string `protobuf:"bytes,4,opt,name=serviceDeskID,proto3" json:"serviceDeskID,omitempty"`
	StatusText     string `protobuf:"bytes,11,opt,name=statusText,proto3" json:"statusText,omitempty"`         // jira issue.status.name
	ResolutionText string `protobuf:"bytes,21,opt,name=resolutionText,proto3" json:"resolutionText,omitempty"` // jira issue.resolution.name
}

func (x *JiraData) Reset() {
	*x = JiraData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JiraData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JiraData) ProtoMessage() {}

func (x *JiraData) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JiraData.ProtoReflect.Descriptor instead.
func (*JiraData) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{3}
}

func (x *JiraData) GetIssueID() string {
	if x != nil {
		return x.IssueID
	}
	return ""
}

func (x *JiraData) GetIssueKey() string {
	if x != nil {
		return x.IssueKey
	}
	return ""
}

func (x *JiraData) GetRequestTypeID() string {
	if x != nil {
		return x.RequestTypeID
	}
	return ""
}

func (x *JiraData) GetServiceDeskID() string {
	if x != nil {
		return x.ServiceDeskID
	}
	return ""
}

func (x *JiraData) GetStatusText() string {
	if x != nil {
		return x.StatusText
	}
	return ""
}

func (x *JiraData) GetResolutionText() string {
	if x != nil {
		return x.ResolutionText
	}
	return ""
}

type IssueComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Author    string `protobuf:"bytes,2,opt,name=author,proto3" json:"author,omitempty"`
	Text      string `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	Internal  bool   `protobuf:"varint,11,opt,name=internal,proto3" json:"internal,omitempty"`
	Timestamp int64  `protobuf:"varint,21,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *IssueComment) Reset() {
	*x = IssueComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueComment) ProtoMessage() {}

func (x *IssueComment) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueComment.ProtoReflect.Descriptor instead.
func (*IssueComment) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{4}
}

func (x *IssueComment) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *IssueComment) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *IssueComment) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *IssueComment) GetInternal() bool {
	if x != nil {
		return x.Internal
	}
	return false
}

func (x *IssueComment) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ExternalServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderAccountID     string `protobuf:"bytes,1,opt,name=providerAccountID,proto3" json:"providerAccountID,omitempty"`
	ProviderOpportunityID string `protobuf:"bytes,2,opt,name=providerOpportunityID,proto3" json:"providerOpportunityID,omitempty"`
}

func (x *ExternalServiceRequest) Reset() {
	*x = ExternalServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalServiceRequest) ProtoMessage() {}

func (x *ExternalServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalServiceRequest.ProtoReflect.Descriptor instead.
func (*ExternalServiceRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{5}
}

func (x *ExternalServiceRequest) GetProviderAccountID() string {
	if x != nil {
		return x.ProviderAccountID
	}
	return ""
}

func (x *ExternalServiceRequest) GetProviderOpportunityID() string {
	if x != nil {
		return x.ProviderOpportunityID
	}
	return ""
}

type IssueNewCommentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID    string `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	IssueID      string `protobuf:"bytes,2,opt,name=issueID,proto3" json:"issueID,omitempty"`
	ServiceID    string `protobuf:"bytes,11,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	ProviderID   string `protobuf:"bytes,12,opt,name=providerID,proto3" json:"providerID,omitempty"`
	UserEmail    string `protobuf:"bytes,31,opt,name=userEmail,proto3" json:"userEmail,omitempty"`
	UserNickname string `protobuf:"bytes,32,opt,name=userNickname,proto3" json:"userNickname,omitempty"`
	Comment      string `protobuf:"bytes,41,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *IssueNewCommentRequest) Reset() {
	*x = IssueNewCommentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IssueNewCommentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueNewCommentRequest) ProtoMessage() {}

func (x *IssueNewCommentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueNewCommentRequest.ProtoReflect.Descriptor instead.
func (*IssueNewCommentRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP(), []int{6}
}

func (x *IssueNewCommentRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *IssueNewCommentRequest) GetIssueID() string {
	if x != nil {
		return x.IssueID
	}
	return ""
}

func (x *IssueNewCommentRequest) GetServiceID() string {
	if x != nil {
		return x.ServiceID
	}
	return ""
}

func (x *IssueNewCommentRequest) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

func (x *IssueNewCommentRequest) GetUserEmail() string {
	if x != nil {
		return x.UserEmail
	}
	return ""
}

func (x *IssueNewCommentRequest) GetUserNickname() string {
	if x != nil {
		return x.UserNickname
	}
	return ""
}

func (x *IssueNewCommentRequest) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

var File_mmesh_protobuf_resources_v1_itsm_issue_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x74,
	0x73, 0x6d, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04,
	0x69, 0x74, 0x73, 0x6d, 0x1a, 0x2f, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76,
	0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa0, 0x08, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4e,
	0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x69, 0x74, 0x73, 0x6d, 0x2e, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x2d, 0x0a, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x69, 0x74, 0x73, 0x6d, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36,
	0x0a, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x69, 0x74, 0x73, 0x6d, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x1f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1f, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x54, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x69, 0x74, 0x73, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x16,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x18, 0x47, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x48, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x51, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x74, 0x73, 0x6d, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a,
	0x04, 0x6a, 0x69, 0x72, 0x61, 0x18, 0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x74,
	0x73, 0x6d, 0x2e, 0x4a, 0x69, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x6a, 0x69, 0x72,
	0x61, 0x12, 0x35, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x65, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x74, 0x73, 0x6d, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x69, 0x74, 0x73, 0x6d, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a,
	0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0xca, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x1a, 0x4f, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x74, 0x73, 0x6d, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x55, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x59, 0x0a, 0x06, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x69, 0x74, 0x73, 0x6d, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x22, 0xd4, 0x01, 0x0a, 0x08, 0x4a, 0x69, 0x72, 0x61, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x65, 0x73, 0x6b,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65, 0x78, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x65, 0x78, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x22, 0x84, 0x01, 0x0a, 0x0c, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x22, 0x7c, 0x0a, 0x16, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x4f, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x49, 0x44, 0x22,
	0xea, 0x01, 0x0a, 0x16, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4e, 0x65, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x22,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2a, 0x2f, 0x0a, 0x0b,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49,
	0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x01, 0x2a, 0x30, 0x0a,
	0x0a, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x50,
	0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x54,
	0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x01, 0x2a,
	0x6f, 0x0a, 0x09, 0x49, 0x73, 0x73, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a,
	0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e,
	0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x10, 0x15, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x42,
	0x4c, 0x45, 0x4d, 0x10, 0x1f, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10,
	0x29, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x33, 0x12, 0x10,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0xc8, 0x01,
	0x2a, 0xd8, 0x03, 0x0a, 0x0c, 0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x49, 0x53, 0x54,
	0x41, 0x4e, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x01, 0x12, 0x1d,
	0x0a, 0x19, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x53, 0x10, 0x0b, 0x12, 0x1c, 0x0a,
	0x18, 0x46, 0x45, 0x45, 0x44, 0x42, 0x41, 0x43, 0x4b, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52,
	0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x49,
	0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x10,
	0x15, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x4c,
	0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x16, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x52, 0x4f, 0x42,
	0x4c, 0x45, 0x4d, 0x5f, 0x50, 0x4c, 0x41, 0x54, 0x46, 0x4f, 0x52, 0x4d, 0x10, 0x1f, 0x12, 0x12,
	0x0a, 0x0e, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x29, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x55, 0x4e,
	0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x33, 0x12, 0x1c, 0x0a,
	0x18, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52,
	0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x34, 0x12, 0x1b, 0x0a, 0x17, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x35, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x10, 0x36, 0x12, 0x22, 0x0a, 0x1e, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x49, 0x54, 0x59, 0x10, 0x37, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x10, 0x3b, 0x12, 0x16, 0x0a, 0x11, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0xc9, 0x01, 0x12, 0x15, 0x0a, 0x10,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54,
	0x10, 0xca, 0x01, 0x12, 0x26, 0x0a, 0x21, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0xd1, 0x01, 0x42, 0x28, 0x5a, 0x26, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67,
	0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x69, 0x74, 0x73, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescData = file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDesc
)

func file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescData)
	})
	return file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDescData
}

var file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_mmesh_protobuf_resources_v1_itsm_issue_proto_goTypes = []interface{}{
	(IssueStatus)(0),               // 0: itsm.IssueStatus
	(IssueClass)(0),                // 1: itsm.IssueClass
	(IssueType)(0),                 // 2: itsm.IssueType
	(IssueSubtype)(0),              // 3: itsm.IssueSubtype
	(*Issue)(nil),                  // 4: itsm.Issue
	(*Issues)(nil),                 // 5: itsm.Issues
	(*ListIssuesRequest)(nil),      // 6: itsm.ListIssuesRequest
	(*JiraData)(nil),               // 7: itsm.JiraData
	(*IssueComment)(nil),           // 8: itsm.IssueComment
	(*ExternalServiceRequest)(nil), // 9: itsm.ExternalServiceRequest
	(*IssueNewCommentRequest)(nil), // 10: itsm.IssueNewCommentRequest
	nil,                            // 11: itsm.Issue.CommentsEntry
	nil,                            // 12: itsm.Issue.ChatThreadsEntry
	(*resource.ListResponse)(nil),  // 13: resource.ListResponse
	(*resource.ListRequest)(nil),   // 14: resource.ListRequest
	(*messaging.ChatThread)(nil),   // 15: messaging.ChatThread
}
var file_mmesh_protobuf_resources_v1_itsm_issue_proto_depIdxs = []int32{
	1,  // 0: itsm.Issue.class:type_name -> itsm.IssueClass
	2,  // 1: itsm.Issue.issueType:type_name -> itsm.IssueType
	3,  // 2: itsm.Issue.issueSubtype:type_name -> itsm.IssueSubtype
	9,  // 3: itsm.Issue.externalServiceRequest:type_name -> itsm.ExternalServiceRequest
	0,  // 4: itsm.Issue.status:type_name -> itsm.IssueStatus
	7,  // 5: itsm.Issue.jira:type_name -> itsm.JiraData
	11, // 6: itsm.Issue.comments:type_name -> itsm.Issue.CommentsEntry
	12, // 7: itsm.Issue.chatThreads:type_name -> itsm.Issue.ChatThreadsEntry
	13, // 8: itsm.Issues.meta:type_name -> resource.ListResponse
	4,  // 9: itsm.Issues.issues:type_name -> itsm.Issue
	14, // 10: itsm.ListIssuesRequest.meta:type_name -> resource.ListRequest
	8,  // 11: itsm.Issue.CommentsEntry.value:type_name -> itsm.IssueComment
	15, // 12: itsm.Issue.ChatThreadsEntry.value:type_name -> messaging.ChatThread
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_resources_v1_itsm_issue_proto_init() }
func file_mmesh_protobuf_resources_v1_itsm_issue_proto_init() {
	if File_mmesh_protobuf_resources_v1_itsm_issue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListIssuesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JiraData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IssueNewCommentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_resources_v1_itsm_issue_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_resources_v1_itsm_issue_proto_depIdxs,
		EnumInfos:         file_mmesh_protobuf_resources_v1_itsm_issue_proto_enumTypes,
		MessageInfos:      file_mmesh_protobuf_resources_v1_itsm_issue_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_resources_v1_itsm_issue_proto = out.File
	file_mmesh_protobuf_resources_v1_itsm_issue_proto_rawDesc = nil
	file_mmesh_protobuf_resources_v1_itsm_issue_proto_goTypes = nil
	file_mmesh_protobuf_resources_v1_itsm_issue_proto_depIdxs = nil
}
