// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: mmesh/protobuf/resources/v1/network/node.proto

package network

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	datetime "mmesh.dev/m-api-go/grpc/common/datetime"
	metrics "mmesh.dev/m-api-go/grpc/resources/metrics"
	resource "mmesh.dev/m-api-go/grpc/resources/resource"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkObjectClass int32

const (
	NetworkObjectClass_NETWORK_HOST       NetworkObjectClass = 0 // host
	NetworkObjectClass_NETWORK_SERVICE    NetworkObjectClass = 1 // svc
	NetworkObjectClass_KUBERNETES_SERVICE NetworkObjectClass = 2 // k8sSvc
)

// Enum value maps for NetworkObjectClass.
var (
	NetworkObjectClass_name = map[int32]string{
		0: "NETWORK_HOST",
		1: "NETWORK_SERVICE",
		2: "KUBERNETES_SERVICE",
	}
	NetworkObjectClass_value = map[string]int32{
		"NETWORK_HOST":       0,
		"NETWORK_SERVICE":    1,
		"KUBERNETES_SERVICE": 2,
	}
)

func (x NetworkObjectClass) Enum() *NetworkObjectClass {
	p := new(NetworkObjectClass)
	*p = x
	return p
}

func (x NetworkObjectClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkObjectClass) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_network_node_proto_enumTypes[0].Descriptor()
}

func (NetworkObjectClass) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_network_node_proto_enumTypes[0]
}

func (x NetworkObjectClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkObjectClass.Descriptor instead.
func (NetworkObjectClass) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{0}
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID    string                      `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID     string                      `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID        string                      `protobuf:"bytes,3,opt,name=netID,proto3" json:"netID,omitempty"`
	VRFID        string                      `protobuf:"bytes,4,opt,name=VRFID,proto3" json:"VRFID,omitempty"`
	NodeID       string                      `protobuf:"bytes,5,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Agent        *Agent                      `protobuf:"bytes,6,opt,name=agent,proto3" json:"agent,omitempty"`
	Endpoints    map[string]*NetworkEndpoint `protobuf:"bytes,7,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[endpointID]*NetworkEndpoint
	EventMetrics *metrics.EventMetrics       `protobuf:"bytes,8,opt,name=eventMetrics,proto3" json:"eventMetrics,omitempty"`
	// NodeStatus status = 8;
	ReplicaSet bool `protobuf:"varint,11,opt,name=replicaSet,proto3" json:"replicaSet,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *Node) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *Node) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *Node) GetVRFID() string {
	if x != nil {
		return x.VRFID
	}
	return ""
}

func (x *Node) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *Node) GetAgent() *Agent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *Node) GetEndpoints() map[string]*NetworkEndpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Node) GetEventMetrics() *metrics.EventMetrics {
	if x != nil {
		return x.EventMetrics
	}
	return nil
}

func (x *Node) GetReplicaSet() bool {
	if x != nil {
		return x.ReplicaSet
	}
	return false
}

type Nodes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta  *resource.ListResponse `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Nodes []*Node                `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *Nodes) Reset() {
	*x = Nodes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodes) ProtoMessage() {}

func (x *Nodes) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodes.ProtoReflect.Descriptor instead.
func (*Nodes) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{1}
}

func (x *Nodes) GetMeta() *resource.ListResponse {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Nodes) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ListNodesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta *resource.ListRequest `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	VRF  *VRF                  `protobuf:"bytes,2,opt,name=VRF,proto3" json:"VRF,omitempty"`
}

func (x *ListNodesRequest) Reset() {
	*x = ListNodesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListNodesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListNodesRequest) ProtoMessage() {}

func (x *ListNodesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListNodesRequest.ProtoReflect.Descriptor instead.
func (*ListNodesRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{2}
}

func (x *ListNodesRequest) GetMeta() *resource.ListRequest {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ListNodesRequest) GetVRF() *VRF {
	if x != nil {
		return x.VRF
	}
	return nil
}

type MMIDs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MMIDs []string `protobuf:"bytes,1,rep,name=MMIDs,proto3" json:"MMIDs,omitempty"`
}

func (x *MMIDs) Reset() {
	*x = MMIDs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MMIDs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MMIDs) ProtoMessage() {}

func (x *MMIDs) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MMIDs.ProtoReflect.Descriptor instead.
func (*MMIDs) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{3}
}

func (x *MMIDs) GetMMIDs() []string {
	if x != nil {
		return x.MMIDs
	}
	return nil
}

type Agent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentID      string            `protobuf:"bytes,1,opt,name=agentID,proto3" json:"agentID,omitempty"` // hostname usually
	NxHostID     string            `protobuf:"bytes,2,opt,name=nxHostID,proto3" json:"nxHostID,omitempty"`
	MAddrs       []string          `protobuf:"bytes,3,rep,name=MAddrs,proto3" json:"MAddrs,omitempty"`
	ExternalIPv4 string            `protobuf:"bytes,4,opt,name=externalIPv4,proto3" json:"externalIPv4,omitempty"`
	Port         int32             `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"`
	Priority     int32             `protobuf:"varint,6,opt,name=priority,proto3" json:"priority,omitempty"`
	IsRelay      bool              `protobuf:"varint,7,opt,name=isRelay,proto3" json:"isRelay,omitempty"`
	Routes       *Routes           `protobuf:"bytes,8,opt,name=routes,proto3" json:"routes,omitempty"`
	Options      *AgentOptions     `protobuf:"bytes,9,opt,name=options,proto3" json:"options,omitempty"`
	Metrics      *AgentMetrics     `protobuf:"bytes,10,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Management   *AgentManagement  `protobuf:"bytes,11,opt,name=management,proto3" json:"management,omitempty"`
	Maintenance  *AgentMaintenance `protobuf:"bytes,12,opt,name=maintenance,proto3" json:"maintenance,omitempty"`
	Healthy      bool              `protobuf:"varint,13,opt,name=healthy,proto3" json:"healthy,omitempty"`
	IsMRS        bool              `protobuf:"varint,101,opt,name=isMRS,proto3" json:"isMRS,omitempty"`
}

func (x *Agent) Reset() {
	*x = Agent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{4}
}

func (x *Agent) GetAgentID() string {
	if x != nil {
		return x.AgentID
	}
	return ""
}

func (x *Agent) GetNxHostID() string {
	if x != nil {
		return x.NxHostID
	}
	return ""
}

func (x *Agent) GetMAddrs() []string {
	if x != nil {
		return x.MAddrs
	}
	return nil
}

func (x *Agent) GetExternalIPv4() string {
	if x != nil {
		return x.ExternalIPv4
	}
	return ""
}

func (x *Agent) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Agent) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *Agent) GetIsRelay() bool {
	if x != nil {
		return x.IsRelay
	}
	return false
}

func (x *Agent) GetRoutes() *Routes {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Agent) GetOptions() *AgentOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Agent) GetMetrics() *AgentMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Agent) GetManagement() *AgentManagement {
	if x != nil {
		return x.Management
	}
	return nil
}

func (x *Agent) GetMaintenance() *AgentMaintenance {
	if x != nil {
		return x.Maintenance
	}
	return nil
}

func (x *Agent) GetHealthy() bool {
	if x != nil {
		return x.Healthy
	}
	return false
}

func (x *Agent) GetIsMRS() bool {
	if x != nil {
		return x.IsMRS
	}
	return false
}

type Routes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Export []string `protobuf:"bytes,1,rep,name=export,proto3" json:"export,omitempty"`
	Import []string `protobuf:"bytes,2,rep,name=import,proto3" json:"import,omitempty"`
}

func (x *Routes) Reset() {
	*x = Routes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Routes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Routes) ProtoMessage() {}

func (x *Routes) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Routes.ProtoReflect.Descriptor instead.
func (*Routes) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{5}
}

func (x *Routes) GetExport() []string {
	if x != nil {
		return x.Export
	}
	return nil
}

func (x *Routes) GetImport() []string {
	if x != nil {
		return x.Import
	}
	return nil
}

type NetworkEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointID         string             `protobuf:"bytes,1,opt,name=endpointID,proto3" json:"endpointID,omitempty"`
	IPv4               string             `protobuf:"bytes,2,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	IPv6               string             `protobuf:"bytes,3,opt,name=IPv6,proto3" json:"IPv6,omitempty"`
	DNSName            string             `protobuf:"bytes,4,opt,name=DNSName,proto3" json:"DNSName,omitempty"`
	DNSDomain          string             `protobuf:"bytes,5,opt,name=DNSDomain,proto3" json:"DNSDomain,omitempty"`
	FQDN               string             `protobuf:"bytes,6,opt,name=FQDN,proto3" json:"FQDN,omitempty"`
	ReqIPv4            string             `protobuf:"bytes,7,opt,name=reqIPv4,proto3" json:"reqIPv4,omitempty"` // string QoS_network_class = 9;
	NetworkObjectClass NetworkObjectClass `protobuf:"varint,10,opt,name=networkObjectClass,proto3,enum=network.NetworkObjectClass" json:"networkObjectClass,omitempty"`
}

func (x *NetworkEndpoint) Reset() {
	*x = NetworkEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkEndpoint) ProtoMessage() {}

func (x *NetworkEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkEndpoint.ProtoReflect.Descriptor instead.
func (*NetworkEndpoint) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{6}
}

func (x *NetworkEndpoint) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *NetworkEndpoint) GetIPv4() string {
	if x != nil {
		return x.IPv4
	}
	return ""
}

func (x *NetworkEndpoint) GetIPv6() string {
	if x != nil {
		return x.IPv6
	}
	return ""
}

func (x *NetworkEndpoint) GetDNSName() string {
	if x != nil {
		return x.DNSName
	}
	return ""
}

func (x *NetworkEndpoint) GetDNSDomain() string {
	if x != nil {
		return x.DNSDomain
	}
	return ""
}

func (x *NetworkEndpoint) GetFQDN() string {
	if x != nil {
		return x.FQDN
	}
	return ""
}

func (x *NetworkEndpoint) GetReqIPv4() string {
	if x != nil {
		return x.ReqIPv4
	}
	return ""
}

func (x *NetworkEndpoint) GetNetworkObjectClass() NetworkObjectClass {
	if x != nil {
		return x.NetworkObjectClass
	}
	return NetworkObjectClass_NETWORK_HOST
}

type AgentMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastUpdated    int64                   `protobuf:"varint,1,opt,name=lastUpdated,proto3" json:"lastUpdated,omitempty"`
	HostMetrics    *metrics.HostMetrics    `protobuf:"bytes,2,opt,name=hostMetrics,proto3" json:"hostMetrics,omitempty"`
	NetworkMetrics *metrics.NetworkMetrics `protobuf:"bytes,3,opt,name=networkMetrics,proto3" json:"networkMetrics,omitempty"`
	MMPMetrics     *metrics.NetworkMetrics `protobuf:"bytes,4,opt,name=MMPMetrics,proto3" json:"MMPMetrics,omitempty"`
	// metrics.NetworkMetrics netDevStats = 5;
	NetworkHourlyHistory  map[string]*metrics.NetworkMetrics `protobuf:"bytes,6,rep,name=networkHourlyHistory,proto3" json:"networkHourlyHistory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NetworkDailyHistory   map[string]*metrics.NetworkMetrics `protobuf:"bytes,7,rep,name=networkDailyHistory,proto3" json:"networkDailyHistory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NetworkMonthlyHistory map[string]*metrics.NetworkMetrics `protobuf:"bytes,8,rep,name=networkMonthlyHistory,proto3" json:"networkMonthlyHistory,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	NetworkTraffic        map[string]*metrics.NetworkMetrics `protobuf:"bytes,9,rep,name=networkTraffic,proto3" json:"networkTraffic,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RelayMetrics          map[string]*metrics.RelayMetrics   `protobuf:"bytes,10,rep,name=relayMetrics,proto3" json:"relayMetrics,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *AgentMetrics) Reset() {
	*x = AgentMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMetrics) ProtoMessage() {}

func (x *AgentMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMetrics.ProtoReflect.Descriptor instead.
func (*AgentMetrics) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{7}
}

func (x *AgentMetrics) GetLastUpdated() int64 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *AgentMetrics) GetHostMetrics() *metrics.HostMetrics {
	if x != nil {
		return x.HostMetrics
	}
	return nil
}

func (x *AgentMetrics) GetNetworkMetrics() *metrics.NetworkMetrics {
	if x != nil {
		return x.NetworkMetrics
	}
	return nil
}

func (x *AgentMetrics) GetMMPMetrics() *metrics.NetworkMetrics {
	if x != nil {
		return x.MMPMetrics
	}
	return nil
}

func (x *AgentMetrics) GetNetworkHourlyHistory() map[string]*metrics.NetworkMetrics {
	if x != nil {
		return x.NetworkHourlyHistory
	}
	return nil
}

func (x *AgentMetrics) GetNetworkDailyHistory() map[string]*metrics.NetworkMetrics {
	if x != nil {
		return x.NetworkDailyHistory
	}
	return nil
}

func (x *AgentMetrics) GetNetworkMonthlyHistory() map[string]*metrics.NetworkMetrics {
	if x != nil {
		return x.NetworkMonthlyHistory
	}
	return nil
}

func (x *AgentMetrics) GetNetworkTraffic() map[string]*metrics.NetworkMetrics {
	if x != nil {
		return x.NetworkTraffic
	}
	return nil
}

func (x *AgentMetrics) GetRelayMetrics() map[string]*metrics.RelayMetrics {
	if x != nil {
		return x.RelayMetrics
	}
	return nil
}

type AgentManagement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisableExec           bool `protobuf:"varint,1,opt,name=disableExec,proto3" json:"disableExec,omitempty"`
	DisableTransfer       bool `protobuf:"varint,2,opt,name=disableTransfer,proto3" json:"disableTransfer,omitempty"`
	DisablePortForwarding bool `protobuf:"varint,3,opt,name=disablePortForwarding,proto3" json:"disablePortForwarding,omitempty"`
	DisableOps            bool `protobuf:"varint,11,opt,name=disableOps,proto3" json:"disableOps,omitempty"`
}

func (x *AgentManagement) Reset() {
	*x = AgentManagement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentManagement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentManagement) ProtoMessage() {}

func (x *AgentManagement) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentManagement.ProtoReflect.Descriptor instead.
func (*AgentManagement) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{8}
}

func (x *AgentManagement) GetDisableExec() bool {
	if x != nil {
		return x.DisableExec
	}
	return false
}

func (x *AgentManagement) GetDisableTransfer() bool {
	if x != nil {
		return x.DisableTransfer
	}
	return false
}

func (x *AgentManagement) GetDisablePortForwarding() bool {
	if x != nil {
		return x.DisablePortForwarding
	}
	return false
}

func (x *AgentManagement) GetDisableOps() bool {
	if x != nil {
		return x.DisableOps
	}
	return false
}

type AgentOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DNSPort      int32 `protobuf:"varint,1,opt,name=DNSPort,proto3" json:"DNSPort,omitempty"`
	KubernetesGw bool  `protobuf:"varint,2,opt,name=kubernetesGw,proto3" json:"kubernetesGw,omitempty"`
}

func (x *AgentOptions) Reset() {
	*x = AgentOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentOptions) ProtoMessage() {}

func (x *AgentOptions) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentOptions.ProtoReflect.Descriptor instead.
func (*AgentOptions) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{9}
}

func (x *AgentOptions) GetDNSPort() int32 {
	if x != nil {
		return x.DNSPort
	}
	return 0
}

func (x *AgentOptions) GetKubernetesGw() bool {
	if x != nil {
		return x.KubernetesGw
	}
	return false
}

type AgentMaintenance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AutoUpdate bool               `protobuf:"varint,1,opt,name=autoUpdate,proto3" json:"autoUpdate,omitempty"`
	Schedule   *datetime.DateTime `protobuf:"bytes,2,opt,name=schedule,proto3" json:"schedule,omitempty"`
}

func (x *AgentMaintenance) Reset() {
	*x = AgentMaintenance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentMaintenance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentMaintenance) ProtoMessage() {}

func (x *AgentMaintenance) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentMaintenance.ProtoReflect.Descriptor instead.
func (*AgentMaintenance) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{10}
}

func (x *AgentMaintenance) GetAutoUpdate() bool {
	if x != nil {
		return x.AutoUpdate
	}
	return false
}

func (x *AgentMaintenance) GetSchedule() *datetime.DateTime {
	if x != nil {
		return x.Schedule
	}
	return nil
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndpointID string `protobuf:"bytes,1,opt,name=endpointID,proto3" json:"endpointID,omitempty"`
	Node       *Node  `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"` // parent node
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP(), []int{11}
}

func (x *Endpoint) GetEndpointID() string {
	if x != nil {
		return x.EndpointID
	}
	return ""
}

func (x *Endpoint) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

var File_mmesh_protobuf_resources_v1_network_node_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_resources_v1_network_node_proto_rawDesc = []byte{
	0x0a, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x2f, 0x6d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6d, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f,
	0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x6d, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x64, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x03, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x52, 0x46, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x52, 0x46, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x52, 0x0c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x65, 0x74,
	0x1a, 0x56, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x58, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x23, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x22, 0x5d, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x12, 0x1e, 0x0a, 0x03, 0x56, 0x52, 0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x52, 0x03, 0x56, 0x52,
	0x46, 0x22, 0x1d, 0x0a, 0x05, 0x4d, 0x4d, 0x49, 0x44, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x4d,
	0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x4d, 0x49, 0x44, 0x73,
	0x22, 0xf5, 0x03, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x78, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x78, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x4d, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x4d, 0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x69, 0x73, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69,
	0x73, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x2f, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2f, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x6d,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x6d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x4d, 0x52, 0x53, 0x18, 0x65, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x69, 0x73, 0x4d, 0x52, 0x53, 0x22, 0x38, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6d,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6d, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50,
	0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x50, 0x76, 0x36, 0x12, 0x18,
	0x0a, 0x07, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x44, 0x4e, 0x53, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x4e, 0x53, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x44, 0x4e, 0x53,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x51, 0x44, 0x4e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x51, 0x44, 0x4e, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x71, 0x49, 0x50, 0x76, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x71,
	0x49, 0x50, 0x76, 0x34, 0x12, 0x4b, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x12, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x22, 0x8b, 0x09, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x0b, 0x68, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x3f, 0x0a, 0x0e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x37, 0x0a,
	0x0a, 0x4d, 0x4d, 0x50, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x4d, 0x4d, 0x50, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x48, 0x6f,
	0x75, 0x72, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x60, 0x0a, 0x13, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x13, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x66, 0x0a,
	0x15, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6e, 0x74, 0x68,
	0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x51, 0x0a, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66,
	0x66, 0x69, 0x63, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x12, 0x4b, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x60, 0x0a, 0x19, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x18, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x1a, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5a, 0x0a, 0x13, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x56, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xb3, 0x01, 0x0a, 0x0f, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78,
	0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x65, 0x63, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x4f, 0x70, 0x73, 0x22, 0x4c, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x4e, 0x53, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x44, 0x4e, 0x53, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x47, 0x77, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x47, 0x77, 0x22, 0x62, 0x0a, 0x10, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x6f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x75, 0x74,
	0x6f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x74, 0x65,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x22, 0x4d, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x2a, 0x53, 0x0a, 0x12, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x0c,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45,
	0x53, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x02, 0x42, 0x2b, 0x5a, 0x29, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67,
	0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_resources_v1_network_node_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_resources_v1_network_node_proto_rawDescData = file_mmesh_protobuf_resources_v1_network_node_proto_rawDesc
)

func file_mmesh_protobuf_resources_v1_network_node_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_resources_v1_network_node_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_resources_v1_network_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_resources_v1_network_node_proto_rawDescData)
	})
	return file_mmesh_protobuf_resources_v1_network_node_proto_rawDescData
}

var file_mmesh_protobuf_resources_v1_network_node_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_mmesh_protobuf_resources_v1_network_node_proto_goTypes = []interface{}{
	(NetworkObjectClass)(0),        // 0: network.NetworkObjectClass
	(*Node)(nil),                   // 1: network.Node
	(*Nodes)(nil),                  // 2: network.Nodes
	(*ListNodesRequest)(nil),       // 3: network.ListNodesRequest
	(*MMIDs)(nil),                  // 4: network.MMIDs
	(*Agent)(nil),                  // 5: network.Agent
	(*Routes)(nil),                 // 6: network.Routes
	(*NetworkEndpoint)(nil),        // 7: network.NetworkEndpoint
	(*AgentMetrics)(nil),           // 8: network.AgentMetrics
	(*AgentManagement)(nil),        // 9: network.AgentManagement
	(*AgentOptions)(nil),           // 10: network.AgentOptions
	(*AgentMaintenance)(nil),       // 11: network.AgentMaintenance
	(*Endpoint)(nil),               // 12: network.Endpoint
	nil,                            // 13: network.Node.EndpointsEntry
	nil,                            // 14: network.AgentMetrics.NetworkHourlyHistoryEntry
	nil,                            // 15: network.AgentMetrics.NetworkDailyHistoryEntry
	nil,                            // 16: network.AgentMetrics.NetworkMonthlyHistoryEntry
	nil,                            // 17: network.AgentMetrics.NetworkTrafficEntry
	nil,                            // 18: network.AgentMetrics.RelayMetricsEntry
	(*metrics.EventMetrics)(nil),   // 19: metrics.EventMetrics
	(*resource.ListResponse)(nil),  // 20: resource.ListResponse
	(*resource.ListRequest)(nil),   // 21: resource.ListRequest
	(*VRF)(nil),                    // 22: network.VRF
	(*metrics.HostMetrics)(nil),    // 23: metrics.HostMetrics
	(*metrics.NetworkMetrics)(nil), // 24: metrics.NetworkMetrics
	(*datetime.DateTime)(nil),      // 25: datetime.DateTime
	(*metrics.RelayMetrics)(nil),   // 26: metrics.RelayMetrics
}
var file_mmesh_protobuf_resources_v1_network_node_proto_depIdxs = []int32{
	5,  // 0: network.Node.agent:type_name -> network.Agent
	13, // 1: network.Node.endpoints:type_name -> network.Node.EndpointsEntry
	19, // 2: network.Node.eventMetrics:type_name -> metrics.EventMetrics
	20, // 3: network.Nodes.meta:type_name -> resource.ListResponse
	1,  // 4: network.Nodes.nodes:type_name -> network.Node
	21, // 5: network.ListNodesRequest.meta:type_name -> resource.ListRequest
	22, // 6: network.ListNodesRequest.VRF:type_name -> network.VRF
	6,  // 7: network.Agent.routes:type_name -> network.Routes
	10, // 8: network.Agent.options:type_name -> network.AgentOptions
	8,  // 9: network.Agent.metrics:type_name -> network.AgentMetrics
	9,  // 10: network.Agent.management:type_name -> network.AgentManagement
	11, // 11: network.Agent.maintenance:type_name -> network.AgentMaintenance
	0,  // 12: network.NetworkEndpoint.networkObjectClass:type_name -> network.NetworkObjectClass
	23, // 13: network.AgentMetrics.hostMetrics:type_name -> metrics.HostMetrics
	24, // 14: network.AgentMetrics.networkMetrics:type_name -> metrics.NetworkMetrics
	24, // 15: network.AgentMetrics.MMPMetrics:type_name -> metrics.NetworkMetrics
	14, // 16: network.AgentMetrics.networkHourlyHistory:type_name -> network.AgentMetrics.NetworkHourlyHistoryEntry
	15, // 17: network.AgentMetrics.networkDailyHistory:type_name -> network.AgentMetrics.NetworkDailyHistoryEntry
	16, // 18: network.AgentMetrics.networkMonthlyHistory:type_name -> network.AgentMetrics.NetworkMonthlyHistoryEntry
	17, // 19: network.AgentMetrics.networkTraffic:type_name -> network.AgentMetrics.NetworkTrafficEntry
	18, // 20: network.AgentMetrics.relayMetrics:type_name -> network.AgentMetrics.RelayMetricsEntry
	25, // 21: network.AgentMaintenance.schedule:type_name -> datetime.DateTime
	1,  // 22: network.Endpoint.node:type_name -> network.Node
	7,  // 23: network.Node.EndpointsEntry.value:type_name -> network.NetworkEndpoint
	24, // 24: network.AgentMetrics.NetworkHourlyHistoryEntry.value:type_name -> metrics.NetworkMetrics
	24, // 25: network.AgentMetrics.NetworkDailyHistoryEntry.value:type_name -> metrics.NetworkMetrics
	24, // 26: network.AgentMetrics.NetworkMonthlyHistoryEntry.value:type_name -> metrics.NetworkMetrics
	24, // 27: network.AgentMetrics.NetworkTrafficEntry.value:type_name -> metrics.NetworkMetrics
	26, // 28: network.AgentMetrics.RelayMetricsEntry.value:type_name -> metrics.RelayMetrics
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_resources_v1_network_node_proto_init() }
func file_mmesh_protobuf_resources_v1_network_node_proto_init() {
	if File_mmesh_protobuf_resources_v1_network_node_proto != nil {
		return
	}
	file_mmesh_protobuf_resources_v1_network_vrf_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListNodesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MMIDs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Agent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Routes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentManagement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentMaintenance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_resources_v1_network_node_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_resources_v1_network_node_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_resources_v1_network_node_proto_depIdxs,
		EnumInfos:         file_mmesh_protobuf_resources_v1_network_node_proto_enumTypes,
		MessageInfos:      file_mmesh_protobuf_resources_v1_network_node_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_resources_v1_network_node_proto = out.File
	file_mmesh_protobuf_resources_v1_network_node_proto_rawDesc = nil
	file_mmesh_protobuf_resources_v1_network_node_proto_goTypes = nil
	file_mmesh_protobuf_resources_v1_network_node_proto_depIdxs = nil
}
