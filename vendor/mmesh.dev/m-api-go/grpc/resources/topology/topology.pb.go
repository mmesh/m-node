// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.0--rc2
// source: mmesh/protobuf/resources/v1/topology/topology.proto

package topology

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopologyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID string `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID  string `protobuf:"bytes,11,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
}

func (x *TopologyRequest) Reset() {
	*x = TopologyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyRequest) ProtoMessage() {}

func (x *TopologyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyRequest.ProtoReflect.Descriptor instead.
func (*TopologyRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{0}
}

func (x *TopologyRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *TopologyRequest) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

type Topology struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats    *Stats             `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty"`
	Networks []*TopologyNetwork `protobuf:"bytes,11,rep,name=networks,proto3" json:"networks,omitempty"`
}

func (x *Topology) Reset() {
	*x = Topology{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topology) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topology) ProtoMessage() {}

func (x *Topology) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topology.ProtoReflect.Descriptor instead.
func (*Topology) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{1}
}

func (x *Topology) GetStats() *Stats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Topology) GetNetworks() []*TopologyNetwork {
	if x != nil {
		return x.Networks
	}
	return nil
}

type TopologyNetwork struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network *Network          `protobuf:"bytes,1,opt,name=network,proto3" json:"network,omitempty"`
	Subnets []*TopologySubnet `protobuf:"bytes,11,rep,name=subnets,proto3" json:"subnets,omitempty"`
	Metrics *Metrics          `protobuf:"bytes,101,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *TopologyNetwork) Reset() {
	*x = TopologyNetwork{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyNetwork) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyNetwork) ProtoMessage() {}

func (x *TopologyNetwork) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyNetwork.ProtoReflect.Descriptor instead.
func (*TopologyNetwork) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{2}
}

func (x *TopologyNetwork) GetNetwork() *Network {
	if x != nil {
		return x.Network
	}
	return nil
}

func (x *TopologyNetwork) GetSubnets() []*TopologySubnet {
	if x != nil {
		return x.Subnets
	}
	return nil
}

func (x *TopologyNetwork) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type TopologySubnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet  *Subnet         `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	Nodes   []*TopologyNode `protobuf:"bytes,11,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Metrics *Metrics        `protobuf:"bytes,101,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *TopologySubnet) Reset() {
	*x = TopologySubnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologySubnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologySubnet) ProtoMessage() {}

func (x *TopologySubnet) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologySubnet.ProtoReflect.Descriptor instead.
func (*TopologySubnet) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{3}
}

func (x *TopologySubnet) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *TopologySubnet) GetNodes() []*TopologyNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *TopologySubnet) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type TopologyNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node      *Node         `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	Endpoints []*Endpoint   `protobuf:"bytes,11,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	Online    bool          `protobuf:"varint,101,opt,name=online,proto3" json:"online,omitempty"`
	Alerts    *AlertMetrics `protobuf:"bytes,111,opt,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *TopologyNode) Reset() {
	*x = TopologyNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyNode) ProtoMessage() {}

func (x *TopologyNode) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyNode.ProtoReflect.Descriptor instead.
func (*TopologyNode) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{4}
}

func (x *TopologyNode) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *TopologyNode) GetEndpoints() []*Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *TopologyNode) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *TopologyNode) GetAlerts() *AlertMetrics {
	if x != nil {
		return x.Alerts
	}
	return nil
}

type Stats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNetworks  int32    `protobuf:"varint,11,opt,name=totalNetworks,proto3" json:"totalNetworks,omitempty"`
	TotalSubnets   int32    `protobuf:"varint,21,opt,name=totalSubnets,proto3" json:"totalSubnets,omitempty"`
	TotalNodes     int32    `protobuf:"varint,31,opt,name=totalNodes,proto3" json:"totalNodes,omitempty"`
	TotalEndpoints int32    `protobuf:"varint,37,opt,name=totalEndpoints,proto3" json:"totalEndpoints,omitempty"`
	Metrics        *Metrics `protobuf:"bytes,101,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *Stats) Reset() {
	*x = Stats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stats) ProtoMessage() {}

func (x *Stats) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stats.ProtoReflect.Descriptor instead.
func (*Stats) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{5}
}

func (x *Stats) GetTotalNetworks() int32 {
	if x != nil {
		return x.TotalNetworks
	}
	return 0
}

func (x *Stats) GetTotalSubnets() int32 {
	if x != nil {
		return x.TotalSubnets
	}
	return 0
}

func (x *Stats) GetTotalNodes() int32 {
	if x != nil {
		return x.TotalNodes
	}
	return 0
}

func (x *Stats) GetTotalEndpoints() int32 {
	if x != nil {
		return x.TotalEndpoints
	}
	return 0
}

func (x *Stats) GetMetrics() *Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LinkStatus *LinkStatus   `protobuf:"bytes,11,opt,name=linkStatus,proto3" json:"linkStatus,omitempty"`
	Hosts      *HostStats    `protobuf:"bytes,21,opt,name=hosts,proto3" json:"hosts,omitempty"`
	Alerts     *AlertMetrics `protobuf:"bytes,31,opt,name=alerts,proto3" json:"alerts,omitempty"`
}

func (x *Metrics) Reset() {
	*x = Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metrics) ProtoMessage() {}

func (x *Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metrics.ProtoReflect.Descriptor instead.
func (*Metrics) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{6}
}

func (x *Metrics) GetLinkStatus() *LinkStatus {
	if x != nil {
		return x.LinkStatus
	}
	return nil
}

func (x *Metrics) GetHosts() *HostStats {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *Metrics) GetAlerts() *AlertMetrics {
	if x != nil {
		return x.Alerts
	}
	return nil
}

type LinkStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalNodes   int32 `protobuf:"varint,1,opt,name=totalNodes,proto3" json:"totalNodes,omitempty"`
	OnlineNodes  int32 `protobuf:"varint,11,opt,name=onlineNodes,proto3" json:"onlineNodes,omitempty"`
	OfflineNodes int32 `protobuf:"varint,12,opt,name=offlineNodes,proto3" json:"offlineNodes,omitempty"`
}

func (x *LinkStatus) Reset() {
	*x = LinkStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkStatus) ProtoMessage() {}

func (x *LinkStatus) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkStatus.ProtoReflect.Descriptor instead.
func (*LinkStatus) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{7}
}

func (x *LinkStatus) GetTotalNodes() int32 {
	if x != nil {
		return x.TotalNodes
	}
	return 0
}

func (x *LinkStatus) GetOnlineNodes() int32 {
	if x != nil {
		return x.OnlineNodes
	}
	return 0
}

func (x *LinkStatus) GetOfflineNodes() int32 {
	if x != nil {
		return x.OfflineNodes
	}
	return 0
}

type HostStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalLinux   int32 `protobuf:"varint,11,opt,name=totalLinux,proto3" json:"totalLinux,omitempty"`
	TotalMac     int32 `protobuf:"varint,12,opt,name=totalMac,proto3" json:"totalMac,omitempty"`
	TotalWindows int32 `protobuf:"varint,13,opt,name=totalWindows,proto3" json:"totalWindows,omitempty"`
}

func (x *HostStats) Reset() {
	*x = HostStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostStats) ProtoMessage() {}

func (x *HostStats) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HostStats.ProtoReflect.Descriptor instead.
func (*HostStats) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{8}
}

func (x *HostStats) GetTotalLinux() int32 {
	if x != nil {
		return x.TotalLinux
	}
	return 0
}

func (x *HostStats) GetTotalMac() int32 {
	if x != nil {
		return x.TotalMac
	}
	return 0
}

func (x *HostStats) GetTotalWindows() int32 {
	if x != nil {
		return x.TotalWindows
	}
	return 0
}

type AlertMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalAlerts    int32 `protobuf:"varint,1,opt,name=totalAlerts,proto3" json:"totalAlerts,omitempty"`
	TotalTriggered int32 `protobuf:"varint,11,opt,name=totalTriggered,proto3" json:"totalTriggered,omitempty"`
	TotalResolved  int32 `protobuf:"varint,12,opt,name=totalResolved,proto3" json:"totalResolved,omitempty"`
	TotalInfo      int32 `protobuf:"varint,21,opt,name=totalInfo,proto3" json:"totalInfo,omitempty"`
	TotalWarning   int32 `protobuf:"varint,22,opt,name=totalWarning,proto3" json:"totalWarning,omitempty"`
	TotalError     int32 `protobuf:"varint,23,opt,name=totalError,proto3" json:"totalError,omitempty"`
	TotalCritical  int32 `protobuf:"varint,24,opt,name=totalCritical,proto3" json:"totalCritical,omitempty"`
}

func (x *AlertMetrics) Reset() {
	*x = AlertMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlertMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlertMetrics) ProtoMessage() {}

func (x *AlertMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlertMetrics.ProtoReflect.Descriptor instead.
func (*AlertMetrics) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{9}
}

func (x *AlertMetrics) GetTotalAlerts() int32 {
	if x != nil {
		return x.TotalAlerts
	}
	return 0
}

func (x *AlertMetrics) GetTotalTriggered() int32 {
	if x != nil {
		return x.TotalTriggered
	}
	return 0
}

func (x *AlertMetrics) GetTotalResolved() int32 {
	if x != nil {
		return x.TotalResolved
	}
	return 0
}

func (x *AlertMetrics) GetTotalInfo() int32 {
	if x != nil {
		return x.TotalInfo
	}
	return 0
}

func (x *AlertMetrics) GetTotalWarning() int32 {
	if x != nil {
		return x.TotalWarning
	}
	return 0
}

func (x *AlertMetrics) GetTotalError() int32 {
	if x != nil {
		return x.TotalError
	}
	return 0
}

func (x *AlertMetrics) GetTotalCritical() int32 {
	if x != nil {
		return x.TotalCritical
	}
	return 0
}

type NodeSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID          string `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID           string `protobuf:"bytes,11,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	TenantName         string `protobuf:"bytes,12,opt,name=tenantName,proto3" json:"tenantName,omitempty"`
	TenantDescription  string `protobuf:"bytes,13,opt,name=tenantDescription,proto3" json:"tenantDescription,omitempty"`
	NetID              string `protobuf:"bytes,21,opt,name=netID,proto3" json:"netID,omitempty"`
	NetworkDescription string `protobuf:"bytes,22,opt,name=networkDescription,proto3" json:"networkDescription,omitempty"`
	NetworkCIDR        string `protobuf:"bytes,23,opt,name=networkCIDR,proto3" json:"networkCIDR,omitempty"`
	NetworkLocationID  string `protobuf:"bytes,24,opt,name=networkLocationID,proto3" json:"networkLocationID,omitempty"`
	SubnetID           string `protobuf:"bytes,31,opt,name=subnetID,proto3" json:"subnetID,omitempty"`
	SubnetDescription  string `protobuf:"bytes,32,opt,name=subnetDescription,proto3" json:"subnetDescription,omitempty"`
	SubnetCIDR         string `protobuf:"bytes,33,opt,name=subnetCIDR,proto3" json:"subnetCIDR,omitempty"`
	NodeID             string `protobuf:"bytes,41,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	NodeName           string `protobuf:"bytes,42,opt,name=nodeName,proto3" json:"nodeName,omitempty"`
	NodeDescription    string `protobuf:"bytes,43,opt,name=nodeDescription,proto3" json:"nodeDescription,omitempty"`
	NodeCanRelay       bool   `protobuf:"varint,47,opt,name=nodeCanRelay,proto3" json:"nodeCanRelay,omitempty"`
	NodeKubernetesGw   bool   `protobuf:"varint,48,opt,name=nodeKubernetesGw,proto3" json:"nodeKubernetesGw,omitempty"`
	NodeOffline        bool   `protobuf:"varint,49,opt,name=nodeOffline,proto3" json:"nodeOffline,omitempty"`
}

func (x *NodeSummary) Reset() {
	*x = NodeSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSummary) ProtoMessage() {}

func (x *NodeSummary) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSummary.ProtoReflect.Descriptor instead.
func (*NodeSummary) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{10}
}

func (x *NodeSummary) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *NodeSummary) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *NodeSummary) GetTenantName() string {
	if x != nil {
		return x.TenantName
	}
	return ""
}

func (x *NodeSummary) GetTenantDescription() string {
	if x != nil {
		return x.TenantDescription
	}
	return ""
}

func (x *NodeSummary) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *NodeSummary) GetNetworkDescription() string {
	if x != nil {
		return x.NetworkDescription
	}
	return ""
}

func (x *NodeSummary) GetNetworkCIDR() string {
	if x != nil {
		return x.NetworkCIDR
	}
	return ""
}

func (x *NodeSummary) GetNetworkLocationID() string {
	if x != nil {
		return x.NetworkLocationID
	}
	return ""
}

func (x *NodeSummary) GetSubnetID() string {
	if x != nil {
		return x.SubnetID
	}
	return ""
}

func (x *NodeSummary) GetSubnetDescription() string {
	if x != nil {
		return x.SubnetDescription
	}
	return ""
}

func (x *NodeSummary) GetSubnetCIDR() string {
	if x != nil {
		return x.SubnetCIDR
	}
	return ""
}

func (x *NodeSummary) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeSummary) GetNodeName() string {
	if x != nil {
		return x.NodeName
	}
	return ""
}

func (x *NodeSummary) GetNodeDescription() string {
	if x != nil {
		return x.NodeDescription
	}
	return ""
}

func (x *NodeSummary) GetNodeCanRelay() bool {
	if x != nil {
		return x.NodeCanRelay
	}
	return false
}

func (x *NodeSummary) GetNodeKubernetesGw() bool {
	if x != nil {
		return x.NodeKubernetesGw
	}
	return false
}

func (x *NodeSummary) GetNodeOffline() bool {
	if x != nil {
		return x.NodeOffline
	}
	return false
}

type NodeSummaryMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes map[string]*NodeSummary `protobuf:"bytes,11,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[nodeID]*NodeSummary
}

func (x *NodeSummaryMap) Reset() {
	*x = NodeSummaryMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeSummaryMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeSummaryMap) ProtoMessage() {}

func (x *NodeSummaryMap) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeSummaryMap.ProtoReflect.Descriptor instead.
func (*NodeSummaryMap) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP(), []int{11}
}

func (x *NodeSummaryMap) GetNodes() map[string]*NodeSummary {
	if x != nil {
		return x.Nodes
	}
	return nil
}

var File_mmesh_protobuf_resources_v1_topology_topology_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDesc = []byte{
	0x0a, 0x33, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x1a,
	0x32, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x31, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4b, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x49, 0x44, 0x22, 0x68, 0x0a, 0x08, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x22, 0x9f,
	0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x12, 0x2b, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12,
	0x32, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x95, 0x01, 0x0a, 0x0e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x2c, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x0c, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52,
	0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0xc6, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x65,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x22, 0x9a, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x34, 0x0a, 0x0a,
	0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x48, 0x6f, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x06, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x22, 0x72, 0x0a,
	0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x22, 0x6b, 0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x75, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x63, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x22, 0x86,
	0x02, 0x0a, 0x0c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x6c, 0x65, 0x72, 0x74,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a,
	0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x72, 0x69, 0x74, 0x69, 0x63,
	0x61, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43,
	0x72, 0x69, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x22, 0xe5, 0x04, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6e, 0x65, 0x74, 0x49, 0x44, 0x12, 0x2e, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x43, 0x49, 0x44, 0x52, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x43, 0x49, 0x44, 0x52, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x49, 0x44, 0x52, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x49, 0x44, 0x52, 0x12,
	0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6e, 0x6f,
	0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x6e, 0x6f, 0x64, 0x65, 0x43, 0x61, 0x6e, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x6f, 0x64, 0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x47, 0x77, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x6f, 0x64,
	0x65, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x47, 0x77, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x6e, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x9c, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d,
	0x61, 0x70, 0x12, 0x39, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x4d, 0x61, 0x70, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x4f, 0x0a,
	0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x2c,
	0x5a, 0x2a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70,
	0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescData = file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDesc
)

func file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescData)
	})
	return file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDescData
}

var file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mmesh_protobuf_resources_v1_topology_topology_proto_goTypes = []interface{}{
	(*TopologyRequest)(nil), // 0: topology.TopologyRequest
	(*Topology)(nil),        // 1: topology.Topology
	(*TopologyNetwork)(nil), // 2: topology.TopologyNetwork
	(*TopologySubnet)(nil),  // 3: topology.TopologySubnet
	(*TopologyNode)(nil),    // 4: topology.TopologyNode
	(*Stats)(nil),           // 5: topology.Stats
	(*Metrics)(nil),         // 6: topology.Metrics
	(*LinkStatus)(nil),      // 7: topology.LinkStatus
	(*HostStats)(nil),       // 8: topology.HostStats
	(*AlertMetrics)(nil),    // 9: topology.AlertMetrics
	(*NodeSummary)(nil),     // 10: topology.NodeSummary
	(*NodeSummaryMap)(nil),  // 11: topology.NodeSummaryMap
	nil,                     // 12: topology.NodeSummaryMap.NodesEntry
	(*Network)(nil),         // 13: topology.Network
	(*Subnet)(nil),          // 14: topology.Subnet
	(*Node)(nil),            // 15: topology.Node
	(*Endpoint)(nil),        // 16: topology.Endpoint
}
var file_mmesh_protobuf_resources_v1_topology_topology_proto_depIdxs = []int32{
	5,  // 0: topology.Topology.stats:type_name -> topology.Stats
	2,  // 1: topology.Topology.networks:type_name -> topology.TopologyNetwork
	13, // 2: topology.TopologyNetwork.network:type_name -> topology.Network
	3,  // 3: topology.TopologyNetwork.subnets:type_name -> topology.TopologySubnet
	6,  // 4: topology.TopologyNetwork.metrics:type_name -> topology.Metrics
	14, // 5: topology.TopologySubnet.subnet:type_name -> topology.Subnet
	4,  // 6: topology.TopologySubnet.nodes:type_name -> topology.TopologyNode
	6,  // 7: topology.TopologySubnet.metrics:type_name -> topology.Metrics
	15, // 8: topology.TopologyNode.node:type_name -> topology.Node
	16, // 9: topology.TopologyNode.endpoints:type_name -> topology.Endpoint
	9,  // 10: topology.TopologyNode.alerts:type_name -> topology.AlertMetrics
	6,  // 11: topology.Stats.metrics:type_name -> topology.Metrics
	7,  // 12: topology.Metrics.linkStatus:type_name -> topology.LinkStatus
	8,  // 13: topology.Metrics.hosts:type_name -> topology.HostStats
	9,  // 14: topology.Metrics.alerts:type_name -> topology.AlertMetrics
	12, // 15: topology.NodeSummaryMap.nodes:type_name -> topology.NodeSummaryMap.NodesEntry
	10, // 16: topology.NodeSummaryMap.NodesEntry.value:type_name -> topology.NodeSummary
	17, // [17:17] is the sub-list for method output_type
	17, // [17:17] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_resources_v1_topology_topology_proto_init() }
func file_mmesh_protobuf_resources_v1_topology_topology_proto_init() {
	if File_mmesh_protobuf_resources_v1_topology_topology_proto != nil {
		return
	}
	file_mmesh_protobuf_resources_v1_topology_network_proto_init()
	file_mmesh_protobuf_resources_v1_topology_subnet_proto_init()
	file_mmesh_protobuf_resources_v1_topology_node_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topology); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyNetwork); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologySubnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlertMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeSummaryMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_resources_v1_topology_topology_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_resources_v1_topology_topology_proto_depIdxs,
		MessageInfos:      file_mmesh_protobuf_resources_v1_topology_topology_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_resources_v1_topology_topology_proto = out.File
	file_mmesh_protobuf_resources_v1_topology_topology_proto_rawDesc = nil
	file_mmesh_protobuf_resources_v1_topology_topology_proto_goTypes = nil
	file_mmesh_protobuf_resources_v1_topology_topology_proto_depIdxs = nil
}
