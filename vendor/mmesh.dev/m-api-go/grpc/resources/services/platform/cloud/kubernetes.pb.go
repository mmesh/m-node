// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: mmesh/protobuf/resources/v1/services/platform/cloud/kubernetes.proto

package cloud

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	network "mmesh.dev/m-api-go/grpc/resources/network"
	resource "mmesh.dev/m-api-go/grpc/resources/resource"
	compute "mmesh.dev/m-api-go/grpc/resources/services/catalog/cloud/compute"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KubernetesCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceID                   string                 `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	ProviderID                  string                 `protobuf:"bytes,2,opt,name=providerID,proto3" json:"providerID,omitempty"`
	ProductID                   string                 `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	PriceID                     string                 `protobuf:"bytes,4,opt,name=priceID,proto3" json:"priceID,omitempty"`
	AccountID                   string                 `protobuf:"bytes,21,opt,name=accountID,proto3" json:"accountID,omitempty"`
	ResourceGroupID             string                 `protobuf:"bytes,22,opt,name=resourceGroupID,proto3" json:"resourceGroupID,omitempty"`
	KubernetesClusterID         string                 `protobuf:"bytes,31,opt,name=kubernetesClusterID,proto3" json:"kubernetesClusterID,omitempty"` // mmID
	Name                        string                 `protobuf:"bytes,32,opt,name=name,proto3" json:"name,omitempty"`
	Description                 string                 `protobuf:"bytes,33,opt,name=description,proto3" json:"description,omitempty"`
	ProviderKubernetesClusterID string                 `protobuf:"bytes,35,opt,name=providerKubernetesClusterID,proto3" json:"providerKubernetesClusterID,omitempty"`
	Region                      string                 `protobuf:"bytes,41,opt,name=region,proto3" json:"region,omitempty"`
	Version                     string                 `protobuf:"bytes,42,opt,name=version,proto3" json:"version,omitempty"`
	Tags                        []string               `protobuf:"bytes,43,rep,name=tags,proto3" json:"tags,omitempty"`
	Kubeconfig                  []byte                 `protobuf:"bytes,47,opt,name=kubeconfig,proto3" json:"kubeconfig,omitempty"`
	IPv4                        string                 `protobuf:"bytes,51,opt,name=IPv4,proto3" json:"IPv4,omitempty"`
	Endpoint                    string                 `protobuf:"bytes,52,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	ClusterSubnet               string                 `protobuf:"bytes,53,opt,name=clusterSubnet,proto3" json:"clusterSubnet,omitempty"`
	ServiceSubnet               string                 `protobuf:"bytes,54,opt,name=serviceSubnet,proto3" json:"serviceSubnet,omitempty"`
	VPCUUID                     string                 `protobuf:"bytes,58,opt,name=VPCUUID,proto3" json:"VPCUUID,omitempty"`
	DefaultRelay                *network.NodeInstance  `protobuf:"bytes,61,opt,name=defaultRelay,proto3" json:"defaultRelay,omitempty"`
	CreationDate                int64                  `protobuf:"varint,71,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	LastModified                int64                  `protobuf:"varint,72,opt,name=lastModified,proto3" json:"lastModified,omitempty"`
	StartDate                   int64                  `protobuf:"varint,75,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate                     int64                  `protobuf:"varint,76,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Managed                     bool                   `protobuf:"varint,81,opt,name=managed,proto3" json:"managed,omitempty"`
	Status                      string                 `protobuf:"bytes,91,opt,name=status,proto3" json:"status,omitempty"`
	Spec                        *KubernetesClusterSpec `protobuf:"bytes,101,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *KubernetesCluster) Reset() {
	*x = KubernetesCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesCluster) ProtoMessage() {}

func (x *KubernetesCluster) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesCluster.ProtoReflect.Descriptor instead.
func (*KubernetesCluster) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{0}
}

func (x *KubernetesCluster) GetServiceID() string {
	if x != nil {
		return x.ServiceID
	}
	return ""
}

func (x *KubernetesCluster) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

func (x *KubernetesCluster) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *KubernetesCluster) GetPriceID() string {
	if x != nil {
		return x.PriceID
	}
	return ""
}

func (x *KubernetesCluster) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *KubernetesCluster) GetResourceGroupID() string {
	if x != nil {
		return x.ResourceGroupID
	}
	return ""
}

func (x *KubernetesCluster) GetKubernetesClusterID() string {
	if x != nil {
		return x.KubernetesClusterID
	}
	return ""
}

func (x *KubernetesCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesCluster) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *KubernetesCluster) GetProviderKubernetesClusterID() string {
	if x != nil {
		return x.ProviderKubernetesClusterID
	}
	return ""
}

func (x *KubernetesCluster) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *KubernetesCluster) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *KubernetesCluster) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *KubernetesCluster) GetKubeconfig() []byte {
	if x != nil {
		return x.Kubeconfig
	}
	return nil
}

func (x *KubernetesCluster) GetIPv4() string {
	if x != nil {
		return x.IPv4
	}
	return ""
}

func (x *KubernetesCluster) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *KubernetesCluster) GetClusterSubnet() string {
	if x != nil {
		return x.ClusterSubnet
	}
	return ""
}

func (x *KubernetesCluster) GetServiceSubnet() string {
	if x != nil {
		return x.ServiceSubnet
	}
	return ""
}

func (x *KubernetesCluster) GetVPCUUID() string {
	if x != nil {
		return x.VPCUUID
	}
	return ""
}

func (x *KubernetesCluster) GetDefaultRelay() *network.NodeInstance {
	if x != nil {
		return x.DefaultRelay
	}
	return nil
}

func (x *KubernetesCluster) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *KubernetesCluster) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *KubernetesCluster) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *KubernetesCluster) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *KubernetesCluster) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *KubernetesCluster) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *KubernetesCluster) GetSpec() *KubernetesClusterSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type KubernetesClusters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta               *resource.ListResponse `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	KubernetesClusters []*KubernetesCluster   `protobuf:"bytes,2,rep,name=kubernetesClusters,proto3" json:"kubernetesClusters,omitempty"`
}

func (x *KubernetesClusters) Reset() {
	*x = KubernetesClusters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesClusters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusters) ProtoMessage() {}

func (x *KubernetesClusters) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusters.ProtoReflect.Descriptor instead.
func (*KubernetesClusters) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{1}
}

func (x *KubernetesClusters) GetMeta() *resource.ListResponse {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *KubernetesClusters) GetKubernetesClusters() []*KubernetesCluster {
	if x != nil {
		return x.KubernetesClusters
	}
	return nil
}

type ListKubernetesClustersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta      *resource.ListRequest `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	AccountID string                `protobuf:"bytes,2,opt,name=accountID,proto3" json:"accountID,omitempty"`
}

func (x *ListKubernetesClustersRequest) Reset() {
	*x = ListKubernetesClustersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListKubernetesClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListKubernetesClustersRequest) ProtoMessage() {}

func (x *ListKubernetesClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListKubernetesClustersRequest.ProtoReflect.Descriptor instead.
func (*ListKubernetesClustersRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{2}
}

func (x *ListKubernetesClustersRequest) GetMeta() *resource.ListRequest {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ListKubernetesClustersRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

type KubernetesNodePool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodePoolID         string                              `protobuf:"bytes,1,opt,name=nodePoolID,proto3" json:"nodePoolID,omitempty"`
	Name               string                              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	ProviderNodePoolID string                              `protobuf:"bytes,5,opt,name=providerNodePoolID,proto3" json:"providerNodePoolID,omitempty"`
	NodeInstanceType   *compute.KubernetesNodeInstanceType `protobuf:"bytes,11,opt,name=nodeInstanceType,proto3" json:"nodeInstanceType,omitempty"`
	NumNodes           int32                               `protobuf:"varint,21,opt,name=numNodes,proto3" json:"numNodes,omitempty"`
	AutoScale          bool                                `protobuf:"varint,31,opt,name=autoScale,proto3" json:"autoScale,omitempty"`
	MinNodes           int32                               `protobuf:"varint,32,opt,name=minNodes,proto3" json:"minNodes,omitempty"`
	MaxNodes           int32                               `protobuf:"varint,33,opt,name=maxNodes,proto3" json:"maxNodes,omitempty"`
	Nodes              map[string]*KubernetesNode          `protobuf:"bytes,41,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[nodeName]*cloud.KubernetesNode
}

func (x *KubernetesNodePool) Reset() {
	*x = KubernetesNodePool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesNodePool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodePool) ProtoMessage() {}

func (x *KubernetesNodePool) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodePool.ProtoReflect.Descriptor instead.
func (*KubernetesNodePool) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{3}
}

func (x *KubernetesNodePool) GetNodePoolID() string {
	if x != nil {
		return x.NodePoolID
	}
	return ""
}

func (x *KubernetesNodePool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesNodePool) GetProviderNodePoolID() string {
	if x != nil {
		return x.ProviderNodePoolID
	}
	return ""
}

func (x *KubernetesNodePool) GetNodeInstanceType() *compute.KubernetesNodeInstanceType {
	if x != nil {
		return x.NodeInstanceType
	}
	return nil
}

func (x *KubernetesNodePool) GetNumNodes() int32 {
	if x != nil {
		return x.NumNodes
	}
	return 0
}

func (x *KubernetesNodePool) GetAutoScale() bool {
	if x != nil {
		return x.AutoScale
	}
	return false
}

func (x *KubernetesNodePool) GetMinNodes() int32 {
	if x != nil {
		return x.MinNodes
	}
	return 0
}

func (x *KubernetesNodePool) GetMaxNodes() int32 {
	if x != nil {
		return x.MaxNodes
	}
	return 0
}

func (x *KubernetesNodePool) GetNodes() map[string]*KubernetesNode {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type KubernetesNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceID                string `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	ProviderID               string `protobuf:"bytes,2,opt,name=providerID,proto3" json:"providerID,omitempty"`
	ProductID                string `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`
	PriceID                  string `protobuf:"bytes,4,opt,name=priceID,proto3" json:"priceID,omitempty"`
	AccountID                string `protobuf:"bytes,21,opt,name=accountID,proto3" json:"accountID,omitempty"`
	KubernetesNodeID         string `protobuf:"bytes,31,opt,name=kubernetesNodeID,proto3" json:"kubernetesNodeID,omitempty"`
	InstanceID               string `protobuf:"bytes,32,opt,name=instanceID,proto3" json:"instanceID,omitempty"`
	Name                     string `protobuf:"bytes,33,opt,name=name,proto3" json:"name,omitempty"`
	ProviderKubernetesNodeID string `protobuf:"bytes,41,opt,name=providerKubernetesNodeID,proto3" json:"providerKubernetesNodeID,omitempty"`
	ProviderInstanceID       string `protobuf:"bytes,42,opt,name=providerInstanceID,proto3" json:"providerInstanceID,omitempty"`
	CreationDate             int64  `protobuf:"varint,55,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	LastModified             int64  `protobuf:"varint,56,opt,name=lastModified,proto3" json:"lastModified,omitempty"`
	StartDate                int64  `protobuf:"varint,57,opt,name=startDate,proto3" json:"startDate,omitempty"`
	EndDate                  int64  `protobuf:"varint,58,opt,name=endDate,proto3" json:"endDate,omitempty"`
	Managed                  bool   `protobuf:"varint,61,opt,name=managed,proto3" json:"managed,omitempty"`
	Status                   string `protobuf:"bytes,65,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *KubernetesNode) Reset() {
	*x = KubernetesNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNode) ProtoMessage() {}

func (x *KubernetesNode) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNode.ProtoReflect.Descriptor instead.
func (*KubernetesNode) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{4}
}

func (x *KubernetesNode) GetServiceID() string {
	if x != nil {
		return x.ServiceID
	}
	return ""
}

func (x *KubernetesNode) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

func (x *KubernetesNode) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *KubernetesNode) GetPriceID() string {
	if x != nil {
		return x.PriceID
	}
	return ""
}

func (x *KubernetesNode) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *KubernetesNode) GetKubernetesNodeID() string {
	if x != nil {
		return x.KubernetesNodeID
	}
	return ""
}

func (x *KubernetesNode) GetInstanceID() string {
	if x != nil {
		return x.InstanceID
	}
	return ""
}

func (x *KubernetesNode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesNode) GetProviderKubernetesNodeID() string {
	if x != nil {
		return x.ProviderKubernetesNodeID
	}
	return ""
}

func (x *KubernetesNode) GetProviderInstanceID() string {
	if x != nil {
		return x.ProviderInstanceID
	}
	return ""
}

func (x *KubernetesNode) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *KubernetesNode) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

func (x *KubernetesNode) GetStartDate() int64 {
	if x != nil {
		return x.StartDate
	}
	return 0
}

func (x *KubernetesNode) GetEndDate() int64 {
	if x != nil {
		return x.EndDate
	}
	return 0
}

func (x *KubernetesNode) GetManaged() bool {
	if x != nil {
		return x.Managed
	}
	return false
}

func (x *KubernetesNode) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type KubernetesMaintenancePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartTimeHour   int32  `protobuf:"varint,1,opt,name=startTimeHour,proto3" json:"startTimeHour,omitempty"`
	StartTimeMinute int32  `protobuf:"varint,2,opt,name=startTimeMinute,proto3" json:"startTimeMinute,omitempty"`
	StartTime       string `protobuf:"bytes,3,opt,name=startTime,proto3" json:"startTime,omitempty"`
	Duration        string `protobuf:"bytes,5,opt,name=duration,proto3" json:"duration,omitempty"`
	Day             string `protobuf:"bytes,11,opt,name=day,proto3" json:"day,omitempty"`
}

func (x *KubernetesMaintenancePolicy) Reset() {
	*x = KubernetesMaintenancePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesMaintenancePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesMaintenancePolicy) ProtoMessage() {}

func (x *KubernetesMaintenancePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesMaintenancePolicy.ProtoReflect.Descriptor instead.
func (*KubernetesMaintenancePolicy) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{5}
}

func (x *KubernetesMaintenancePolicy) GetStartTimeHour() int32 {
	if x != nil {
		return x.StartTimeHour
	}
	return 0
}

func (x *KubernetesMaintenancePolicy) GetStartTimeMinute() int32 {
	if x != nil {
		return x.StartTimeMinute
	}
	return 0
}

func (x *KubernetesMaintenancePolicy) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *KubernetesMaintenancePolicy) GetDuration() string {
	if x != nil {
		return x.Duration
	}
	return ""
}

func (x *KubernetesMaintenancePolicy) GetDay() string {
	if x != nil {
		return x.Day
	}
	return ""
}

type KubernetesClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodePools         map[string]*KubernetesNodePool   `protobuf:"bytes,1,rep,name=nodePools,proto3" json:"nodePools,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`         // map[nodePoolID]*cloud.KubernetesNodePool
	InstanceTypes     map[string]*compute.InstanceType `protobuf:"bytes,2,rep,name=instanceTypes,proto3" json:"instanceTypes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // map[nodePoolID]*compute.InstanceType
	AutoUpgrade       bool                             `protobuf:"varint,11,opt,name=autoUpgrade,proto3" json:"autoUpgrade,omitempty"`
	SurgeUpgrade      bool                             `protobuf:"varint,12,opt,name=surgeUpgrade,proto3" json:"surgeUpgrade,omitempty"`
	RegistryEnabled   bool                             `protobuf:"varint,21,opt,name=registryEnabled,proto3" json:"registryEnabled,omitempty"`
	MaintenancePolicy *KubernetesMaintenancePolicy     `protobuf:"bytes,31,opt,name=maintenancePolicy,proto3" json:"maintenancePolicy,omitempty"`
}

func (x *KubernetesClusterSpec) Reset() {
	*x = KubernetesClusterSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusterSpec) ProtoMessage() {}

func (x *KubernetesClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusterSpec.ProtoReflect.Descriptor instead.
func (*KubernetesClusterSpec) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{6}
}

func (x *KubernetesClusterSpec) GetNodePools() map[string]*KubernetesNodePool {
	if x != nil {
		return x.NodePools
	}
	return nil
}

func (x *KubernetesClusterSpec) GetInstanceTypes() map[string]*compute.InstanceType {
	if x != nil {
		return x.InstanceTypes
	}
	return nil
}

func (x *KubernetesClusterSpec) GetAutoUpgrade() bool {
	if x != nil {
		return x.AutoUpgrade
	}
	return false
}

func (x *KubernetesClusterSpec) GetSurgeUpgrade() bool {
	if x != nil {
		return x.SurgeUpgrade
	}
	return false
}

func (x *KubernetesClusterSpec) GetRegistryEnabled() bool {
	if x != nil {
		return x.RegistryEnabled
	}
	return false
}

func (x *KubernetesClusterSpec) GetMaintenancePolicy() *KubernetesMaintenancePolicy {
	if x != nil {
		return x.MaintenancePolicy
	}
	return nil
}

type KubernetesClusterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID           string                     `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	VRF                 *network.VRF               `protobuf:"bytes,2,opt,name=VRF,proto3" json:"VRF,omitempty"`
	KubernetesClusterID string                     `protobuf:"bytes,3,opt,name=kubernetesClusterID,proto3" json:"kubernetesClusterID,omitempty"`
	Region              *compute.KubernetesRegion  `protobuf:"bytes,11,opt,name=region,proto3" json:"region,omitempty"`
	Version             *compute.KubernetesVersion `protobuf:"bytes,12,opt,name=version,proto3" json:"version,omitempty"`
	Spec                *KubernetesClusterSpec     `protobuf:"bytes,21,opt,name=spec,proto3" json:"spec,omitempty"`
}

func (x *KubernetesClusterRequest) Reset() {
	*x = KubernetesClusterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesClusterRequest) ProtoMessage() {}

func (x *KubernetesClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesClusterRequest.ProtoReflect.Descriptor instead.
func (*KubernetesClusterRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{7}
}

func (x *KubernetesClusterRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *KubernetesClusterRequest) GetVRF() *network.VRF {
	if x != nil {
		return x.VRF
	}
	return nil
}

func (x *KubernetesClusterRequest) GetKubernetesClusterID() string {
	if x != nil {
		return x.KubernetesClusterID
	}
	return ""
}

func (x *KubernetesClusterRequest) GetRegion() *compute.KubernetesRegion {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *KubernetesClusterRequest) GetVersion() *compute.KubernetesVersion {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *KubernetesClusterRequest) GetSpec() *KubernetesClusterSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type KubernetesNodePoolRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID           string                `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	KubernetesClusterID string                `protobuf:"bytes,2,opt,name=kubernetesClusterID,proto3" json:"kubernetesClusterID,omitempty"`
	ServiceID           string                `protobuf:"bytes,3,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	ProviderID          string                `protobuf:"bytes,4,opt,name=providerID,proto3" json:"providerID,omitempty"`
	NodePool            *KubernetesNodePool   `protobuf:"bytes,11,opt,name=nodePool,proto3" json:"nodePool,omitempty"`
	InstanceType        *compute.InstanceType `protobuf:"bytes,12,opt,name=instanceType,proto3" json:"instanceType,omitempty"`
}

func (x *KubernetesNodePoolRequest) Reset() {
	*x = KubernetesNodePoolRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesNodePoolRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodePoolRequest) ProtoMessage() {}

func (x *KubernetesNodePoolRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodePoolRequest.ProtoReflect.Descriptor instead.
func (*KubernetesNodePoolRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{8}
}

func (x *KubernetesNodePoolRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *KubernetesNodePoolRequest) GetKubernetesClusterID() string {
	if x != nil {
		return x.KubernetesClusterID
	}
	return ""
}

func (x *KubernetesNodePoolRequest) GetServiceID() string {
	if x != nil {
		return x.ServiceID
	}
	return ""
}

func (x *KubernetesNodePoolRequest) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

func (x *KubernetesNodePoolRequest) GetNodePool() *KubernetesNodePool {
	if x != nil {
		return x.NodePool
	}
	return nil
}

func (x *KubernetesNodePoolRequest) GetInstanceType() *compute.InstanceType {
	if x != nil {
		return x.InstanceType
	}
	return nil
}

type KubernetesNodeDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID           string              `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	KubernetesClusterID string              `protobuf:"bytes,2,opt,name=kubernetesClusterID,proto3" json:"kubernetesClusterID,omitempty"`
	ServiceID           string              `protobuf:"bytes,3,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	ProviderID          string              `protobuf:"bytes,4,opt,name=providerID,proto3" json:"providerID,omitempty"`
	NodePool            *KubernetesNodePool `protobuf:"bytes,11,opt,name=nodePool,proto3" json:"nodePool,omitempty"`
	Node                *KubernetesNode     `protobuf:"bytes,12,opt,name=node,proto3" json:"node,omitempty"`
}

func (x *KubernetesNodeDeleteRequest) Reset() {
	*x = KubernetesNodeDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesNodeDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesNodeDeleteRequest) ProtoMessage() {}

func (x *KubernetesNodeDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesNodeDeleteRequest.ProtoReflect.Descriptor instead.
func (*KubernetesNodeDeleteRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP(), []int{9}
}

func (x *KubernetesNodeDeleteRequest) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *KubernetesNodeDeleteRequest) GetKubernetesClusterID() string {
	if x != nil {
		return x.KubernetesClusterID
	}
	return ""
}

func (x *KubernetesNodeDeleteRequest) GetServiceID() string {
	if x != nil {
		return x.ServiceID
	}
	return ""
}

func (x *KubernetesNodeDeleteRequest) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

func (x *KubernetesNodeDeleteRequest) GetNodePool() *KubernetesNodePool {
	if x != nil {
		return x.NodePool
	}
	return nil
}

func (x *KubernetesNodeDeleteRequest) GetNode() *KubernetesNode {
	if x != nil {
		return x.Node
	}
	return nil
}

var File_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDesc = []byte{
	0x0a, 0x44, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x1a, 0x2f, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d,
	0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x72, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4d, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x4b, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x96, 0x07, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40,
	0x0a, 0x1b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x1b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x2b, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6b, 0x75, 0x62, 0x65, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6b, 0x75, 0x62, 0x65,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x34, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x50, 0x76, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x36, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x50, 0x43, 0x55, 0x55, 0x49, 0x44, 0x18, 0x3a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x56, 0x50, 0x43, 0x55, 0x55, 0x49, 0x44, 0x12, 0x39, 0x0a, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x48, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x4b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x64, 0x18, 0x51, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x5b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x8a, 0x01, 0x0a, 0x12,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x48,
	0x0a, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x12, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x22, 0x68, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x22, 0xc8, 0x03, 0x0a, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x6f, 0x64,
	0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x49, 0x44, 0x12, 0x4f, 0x0a,
	0x10, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x6e, 0x75, 0x6d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x4e,
	0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x3a, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x4f, 0x0a, 0x0a,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x04,
	0x0a, 0x0e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44,
	0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x37, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x18, 0x38, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x18, 0x3d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x41, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0xb9, 0x01, 0x0a, 0x1b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65,
	0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x48,
	0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6e, 0x75,
	0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x61, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x61, 0x79, 0x22, 0xad,
	0x04, 0x0a, 0x15, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x49, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x6f, 0x6c, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75,
	0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x61, 0x75, 0x74, 0x6f, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x72, 0x67, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x72, 0x67, 0x65, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x6d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x11, 0x6d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x1a, 0x57, 0x0a, 0x0e,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa5,
	0x02, 0x0a, 0x18, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x03, 0x56, 0x52, 0x46,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x56, 0x52, 0x46, 0x52, 0x03, 0x56, 0x52, 0x46, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74,
	0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x31, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x34,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e,
	0x65, 0x74, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x9b, 0x02, 0x0a, 0x19, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x35, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x02, 0x0a, 0x1b, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x30, 0x0a, 0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x13, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x35, 0x0a, 0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x6f, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x42, 0x3b, 0x5a, 0x39, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65,
	0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescData = file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDesc
)

func file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescData)
	})
	return file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDescData
}

var file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_goTypes = []interface{}{
	(*KubernetesCluster)(nil),                  // 0: cloud.KubernetesCluster
	(*KubernetesClusters)(nil),                 // 1: cloud.KubernetesClusters
	(*ListKubernetesClustersRequest)(nil),      // 2: cloud.ListKubernetesClustersRequest
	(*KubernetesNodePool)(nil),                 // 3: cloud.KubernetesNodePool
	(*KubernetesNode)(nil),                     // 4: cloud.KubernetesNode
	(*KubernetesMaintenancePolicy)(nil),        // 5: cloud.KubernetesMaintenancePolicy
	(*KubernetesClusterSpec)(nil),              // 6: cloud.KubernetesClusterSpec
	(*KubernetesClusterRequest)(nil),           // 7: cloud.KubernetesClusterRequest
	(*KubernetesNodePoolRequest)(nil),          // 8: cloud.KubernetesNodePoolRequest
	(*KubernetesNodeDeleteRequest)(nil),        // 9: cloud.KubernetesNodeDeleteRequest
	nil,                                        // 10: cloud.KubernetesNodePool.NodesEntry
	nil,                                        // 11: cloud.KubernetesClusterSpec.NodePoolsEntry
	nil,                                        // 12: cloud.KubernetesClusterSpec.InstanceTypesEntry
	(*network.NodeInstance)(nil),               // 13: network.NodeInstance
	(*resource.ListResponse)(nil),              // 14: resource.ListResponse
	(*resource.ListRequest)(nil),               // 15: resource.ListRequest
	(*compute.KubernetesNodeInstanceType)(nil), // 16: compute.KubernetesNodeInstanceType
	(*network.VRF)(nil),                        // 17: network.VRF
	(*compute.KubernetesRegion)(nil),           // 18: compute.KubernetesRegion
	(*compute.KubernetesVersion)(nil),          // 19: compute.KubernetesVersion
	(*compute.InstanceType)(nil),               // 20: compute.InstanceType
}
var file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_depIdxs = []int32{
	13, // 0: cloud.KubernetesCluster.defaultRelay:type_name -> network.NodeInstance
	6,  // 1: cloud.KubernetesCluster.spec:type_name -> cloud.KubernetesClusterSpec
	14, // 2: cloud.KubernetesClusters.meta:type_name -> resource.ListResponse
	0,  // 3: cloud.KubernetesClusters.kubernetesClusters:type_name -> cloud.KubernetesCluster
	15, // 4: cloud.ListKubernetesClustersRequest.meta:type_name -> resource.ListRequest
	16, // 5: cloud.KubernetesNodePool.nodeInstanceType:type_name -> compute.KubernetesNodeInstanceType
	10, // 6: cloud.KubernetesNodePool.nodes:type_name -> cloud.KubernetesNodePool.NodesEntry
	11, // 7: cloud.KubernetesClusterSpec.nodePools:type_name -> cloud.KubernetesClusterSpec.NodePoolsEntry
	12, // 8: cloud.KubernetesClusterSpec.instanceTypes:type_name -> cloud.KubernetesClusterSpec.InstanceTypesEntry
	5,  // 9: cloud.KubernetesClusterSpec.maintenancePolicy:type_name -> cloud.KubernetesMaintenancePolicy
	17, // 10: cloud.KubernetesClusterRequest.VRF:type_name -> network.VRF
	18, // 11: cloud.KubernetesClusterRequest.region:type_name -> compute.KubernetesRegion
	19, // 12: cloud.KubernetesClusterRequest.version:type_name -> compute.KubernetesVersion
	6,  // 13: cloud.KubernetesClusterRequest.spec:type_name -> cloud.KubernetesClusterSpec
	3,  // 14: cloud.KubernetesNodePoolRequest.nodePool:type_name -> cloud.KubernetesNodePool
	20, // 15: cloud.KubernetesNodePoolRequest.instanceType:type_name -> compute.InstanceType
	3,  // 16: cloud.KubernetesNodeDeleteRequest.nodePool:type_name -> cloud.KubernetesNodePool
	4,  // 17: cloud.KubernetesNodeDeleteRequest.node:type_name -> cloud.KubernetesNode
	4,  // 18: cloud.KubernetesNodePool.NodesEntry.value:type_name -> cloud.KubernetesNode
	3,  // 19: cloud.KubernetesClusterSpec.NodePoolsEntry.value:type_name -> cloud.KubernetesNodePool
	20, // 20: cloud.KubernetesClusterSpec.InstanceTypesEntry.value:type_name -> compute.InstanceType
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_init() }
func file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_init() {
	if File_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesClusters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListKubernetesClustersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesNodePool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesMaintenancePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesClusterSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesClusterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesNodePoolRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesNodeDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_depIdxs,
		MessageInfos:      file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto = out.File
	file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_rawDesc = nil
	file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_goTypes = nil
	file_mmesh_protobuf_resources_v1_services_platform_cloud_kubernetes_proto_depIdxs = nil
}
