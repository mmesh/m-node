// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.0
// source: mmesh/protobuf/resources/v1/services/product.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	resource "mmesh.dev/m-api-go/grpc/resources/resource"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PricingModel int32

const (
	PricingModel_PRICING_FREE    PricingModel = 0
	PricingModel_PRICING_CUSTOM  PricingModel = 11
	PricingModel_PRICING_FIXED   PricingModel = 21
	PricingModel_PRICING_HOURLY  PricingModel = 31
	PricingModel_PRICING_DAILY   PricingModel = 41
	PricingModel_PRICING_WEEKLY  PricingModel = 51
	PricingModel_PRICING_MONTHLY PricingModel = 61
	PricingModel_PRICING_YEARLY  PricingModel = 71
)

// Enum value maps for PricingModel.
var (
	PricingModel_name = map[int32]string{
		0:  "PRICING_FREE",
		11: "PRICING_CUSTOM",
		21: "PRICING_FIXED",
		31: "PRICING_HOURLY",
		41: "PRICING_DAILY",
		51: "PRICING_WEEKLY",
		61: "PRICING_MONTHLY",
		71: "PRICING_YEARLY",
	}
	PricingModel_value = map[string]int32{
		"PRICING_FREE":    0,
		"PRICING_CUSTOM":  11,
		"PRICING_FIXED":   21,
		"PRICING_HOURLY":  31,
		"PRICING_DAILY":   41,
		"PRICING_WEEKLY":  51,
		"PRICING_MONTHLY": 61,
		"PRICING_YEARLY":  71,
	}
)

func (x PricingModel) Enum() *PricingModel {
	p := new(PricingModel)
	*p = x
	return p
}

func (x PricingModel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PricingModel) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[0].Descriptor()
}

func (PricingModel) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[0]
}

func (x PricingModel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PricingModel.Descriptor instead.
func (PricingModel) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{0}
}

type ProductSLA int32

const (
	ProductSLA_BEST_EFFORT ProductSLA = 0
	ProductSLA_BASIC       ProductSLA = 1
	ProductSLA_PLUS        ProductSLA = 2
	ProductSLA_BUSINESS    ProductSLA = 3
	ProductSLA_ENTERPRISE  ProductSLA = 4
)

// Enum value maps for ProductSLA.
var (
	ProductSLA_name = map[int32]string{
		0: "BEST_EFFORT",
		1: "BASIC",
		2: "PLUS",
		3: "BUSINESS",
		4: "ENTERPRISE",
	}
	ProductSLA_value = map[string]int32{
		"BEST_EFFORT": 0,
		"BASIC":       1,
		"PLUS":        2,
		"BUSINESS":    3,
		"ENTERPRISE":  4,
	}
)

func (x ProductSLA) Enum() *ProductSLA {
	p := new(ProductSLA)
	*p = x
	return p
}

func (x ProductSLA) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductSLA) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[1].Descriptor()
}

func (ProductSLA) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[1]
}

func (x ProductSLA) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductSLA.Descriptor instead.
func (ProductSLA) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{1}
}

type ProductClass int32

const (
	ProductClass_CLASS_UNSPECIFIED ProductClass = 0
	ProductClass_CLASS_CLOUD       ProductClass = 11
	ProductClass_CLASS_SERVICE     ProductClass = 21
)

// Enum value maps for ProductClass.
var (
	ProductClass_name = map[int32]string{
		0:  "CLASS_UNSPECIFIED",
		11: "CLASS_CLOUD",
		21: "CLASS_SERVICE",
	}
	ProductClass_value = map[string]int32{
		"CLASS_UNSPECIFIED": 0,
		"CLASS_CLOUD":       11,
		"CLASS_SERVICE":     21,
	}
)

func (x ProductClass) Enum() *ProductClass {
	p := new(ProductClass)
	*p = x
	return p
}

func (x ProductClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProductClass) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[2].Descriptor()
}

func (ProductClass) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[2]
}

func (x ProductClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProductClass.Descriptor instead.
func (ProductClass) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{2}
}

type CloudCategory int32

const (
	CloudCategory_CLOUD_UNSPECIFIED CloudCategory = 0
	CloudCategory_CLOUD_NETWORK     CloudCategory = 11
	CloudCategory_CLOUD_COMPUTE     CloudCategory = 21
	CloudCategory_CLOUD_STORAGE     CloudCategory = 31
	CloudCategory_CLOUD_APP         CloudCategory = 41
	CloudCategory_CLOUD_DATABASE    CloudCategory = 51
	CloudCategory_CLOUD_FUNCTION    CloudCategory = 61
)

// Enum value maps for CloudCategory.
var (
	CloudCategory_name = map[int32]string{
		0:  "CLOUD_UNSPECIFIED",
		11: "CLOUD_NETWORK",
		21: "CLOUD_COMPUTE",
		31: "CLOUD_STORAGE",
		41: "CLOUD_APP",
		51: "CLOUD_DATABASE",
		61: "CLOUD_FUNCTION",
	}
	CloudCategory_value = map[string]int32{
		"CLOUD_UNSPECIFIED": 0,
		"CLOUD_NETWORK":     11,
		"CLOUD_COMPUTE":     21,
		"CLOUD_STORAGE":     31,
		"CLOUD_APP":         41,
		"CLOUD_DATABASE":    51,
		"CLOUD_FUNCTION":    61,
	}
)

func (x CloudCategory) Enum() *CloudCategory {
	p := new(CloudCategory)
	*p = x
	return p
}

func (x CloudCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[3].Descriptor()
}

func (CloudCategory) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[3]
}

func (x CloudCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudCategory.Descriptor instead.
func (CloudCategory) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{3}
}

type CloudType int32

const (
	CloudType_CLOUD_TYPE_UNSPECIFIED           CloudType = 0
	CloudType_CLOUD_NETWORK_BANDWIDTH          CloudType = 101
	CloudType_CLOUD_COMPUTE_INSTANCE           CloudType = 201
	CloudType_CLOUD_COMPUTE_KUBERNETES_CLUSTER CloudType = 211
	CloudType_CLOUD_COMPUTE_KUBERNETES_NODE    CloudType = 212
	CloudType_CLOUD_COMPUTE_NOMAD_CLUSTER      CloudType = 221
	CloudType_CLOUD_STORAGE_VOLUME             CloudType = 301
	CloudType_CLOUD_APP_CUSTOM                 CloudType = 401
	CloudType_CLOUD_DATABASE_REDIS             CloudType = 501
	CloudType_CLOUD_FUNCTION_LAMBDA            CloudType = 601
)

// Enum value maps for CloudType.
var (
	CloudType_name = map[int32]string{
		0:   "CLOUD_TYPE_UNSPECIFIED",
		101: "CLOUD_NETWORK_BANDWIDTH",
		201: "CLOUD_COMPUTE_INSTANCE",
		211: "CLOUD_COMPUTE_KUBERNETES_CLUSTER",
		212: "CLOUD_COMPUTE_KUBERNETES_NODE",
		221: "CLOUD_COMPUTE_NOMAD_CLUSTER",
		301: "CLOUD_STORAGE_VOLUME",
		401: "CLOUD_APP_CUSTOM",
		501: "CLOUD_DATABASE_REDIS",
		601: "CLOUD_FUNCTION_LAMBDA",
	}
	CloudType_value = map[string]int32{
		"CLOUD_TYPE_UNSPECIFIED":           0,
		"CLOUD_NETWORK_BANDWIDTH":          101,
		"CLOUD_COMPUTE_INSTANCE":           201,
		"CLOUD_COMPUTE_KUBERNETES_CLUSTER": 211,
		"CLOUD_COMPUTE_KUBERNETES_NODE":    212,
		"CLOUD_COMPUTE_NOMAD_CLUSTER":      221,
		"CLOUD_STORAGE_VOLUME":             301,
		"CLOUD_APP_CUSTOM":                 401,
		"CLOUD_DATABASE_REDIS":             501,
		"CLOUD_FUNCTION_LAMBDA":            601,
	}
)

func (x CloudType) Enum() *CloudType {
	p := new(CloudType)
	*p = x
	return p
}

func (x CloudType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudType) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[4].Descriptor()
}

func (CloudType) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[4]
}

func (x CloudType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudType.Descriptor instead.
func (CloudType) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{4}
}

type ServiceCategory int32

const (
	ServiceCategory_SERVICE_UNSPECIFIED            ServiceCategory = 0
	ServiceCategory_SERVICE_ADVISORY_SERVICE       ServiceCategory = 11 // consulting services
	ServiceCategory_SERVICE_MANAGED_SERVICE        ServiceCategory = 21 // managed services
	ServiceCategory_SERVICE_INFRASTRUCTURE_PROJECT ServiceCategory = 31 // cloud migration, infra modernization, networkarch.
	ServiceCategory_SERVICE_AUTOMATION_PROJECT     ServiceCategory = 41 // automation project
	ServiceCategory_SERVICE_SOFTWARE_DEVELOPMENT   ServiceCategory = 51 // software project
	ServiceCategory_SERVICE_PROJECT_MANAGEMENT     ServiceCategory = 61 // project management
	ServiceCategory_SERVICE_SPECIAL_PROJECT        ServiceCategory = 71 // special project
	ServiceCategory_SERVICE_SPECIAL_TASK           ServiceCategory = 81 // special task (help during emergency or incident response)
)

// Enum value maps for ServiceCategory.
var (
	ServiceCategory_name = map[int32]string{
		0:  "SERVICE_UNSPECIFIED",
		11: "SERVICE_ADVISORY_SERVICE",
		21: "SERVICE_MANAGED_SERVICE",
		31: "SERVICE_INFRASTRUCTURE_PROJECT",
		41: "SERVICE_AUTOMATION_PROJECT",
		51: "SERVICE_SOFTWARE_DEVELOPMENT",
		61: "SERVICE_PROJECT_MANAGEMENT",
		71: "SERVICE_SPECIAL_PROJECT",
		81: "SERVICE_SPECIAL_TASK",
	}
	ServiceCategory_value = map[string]int32{
		"SERVICE_UNSPECIFIED":            0,
		"SERVICE_ADVISORY_SERVICE":       11,
		"SERVICE_MANAGED_SERVICE":        21,
		"SERVICE_INFRASTRUCTURE_PROJECT": 31,
		"SERVICE_AUTOMATION_PROJECT":     41,
		"SERVICE_SOFTWARE_DEVELOPMENT":   51,
		"SERVICE_PROJECT_MANAGEMENT":     61,
		"SERVICE_SPECIAL_PROJECT":        71,
		"SERVICE_SPECIAL_TASK":           81,
	}
)

func (x ServiceCategory) Enum() *ServiceCategory {
	p := new(ServiceCategory)
	*p = x
	return p
}

func (x ServiceCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[5].Descriptor()
}

func (ServiceCategory) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[5]
}

func (x ServiceCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceCategory.Descriptor instead.
func (ServiceCategory) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{5}
}

type ServiceType int32

const (
	ServiceType_SERVICE_TYPE_UNSPECIFIED                           ServiceType = 0
	ServiceType_SERVICE_ADVISORY_SERVICE_ARCHITECTURE              ServiceType = 101
	ServiceType_SERVICE_ADVISORY_SERVICE_SUPPORT                   ServiceType = 111
	ServiceType_SERVICE_MANAGED_SERVICE_CLOUD                      ServiceType = 201 // monitoring, alerting, backup..
	ServiceType_SERVICE_MANAGED_SERVICE_ONPREM                     ServiceType = 211 // monitoring, alerting, backup..
	ServiceType_SERVICE_MANAGED_SERVICE_INFRASTRUCTURE_MAINTENANCE ServiceType = 221 // upgrades, patches..
	ServiceType_SERVICE_MANAGED_SERVICE_SOFTWARE_MAINTENANCE       ServiceType = 231 // upgrades, patches..
	ServiceType_SERVICE_INFRASTRUCTURE_PROJECT_NETWORK             ServiceType = 301 // design, build network
	ServiceType_SERVICE_INFRASTRUCTURE_PROJECT_CLOUD               ServiceType = 311 // design, build network, VM, container (mongodb, jenkins..)
	ServiceType_SERVICE_INFRASTRUCTURE_PROJECT_ONPREM              ServiceType = 321 // design, build network, VM, container (mongodb, jenkins..)
	ServiceType_SERVICE_INFRASTRUCTURE_PROJECT_MIGRATION           ServiceType = 331
	ServiceType_SERVICE_AUTOMATION_PROJECT_SIMPLE                  ServiceType = 401
	ServiceType_SERVICE_AUTOMATION_PROJECT_COMPLEX                 ServiceType = 411
	ServiceType_SERVICE_SOFTWARE_DEVELOPMENT_SIMPLE                ServiceType = 501
	ServiceType_SERVICE_SOFTWARE_DEVELOPMENT_COMPLEX               ServiceType = 511
	ServiceType_SERVICE_SOFTWARE_DEVELOPMENT_SUPPORT               ServiceType = 521
	ServiceType_SERVICE_SOFTWARE_DEVELOPMENT_MAINTENANCE           ServiceType = 531 // upgrades, patches..
	ServiceType_SERVICE_SOFTWARE_DEVELOPMENT_FEATURE_REQUEST       ServiceType = 551 // new features, integrations
	ServiceType_SERVICE_PROJECT_MANAGEMENT_SIMPLE                  ServiceType = 601
	ServiceType_SERVICE_PROJECT_MANAGEMENT_COMPLEX                 ServiceType = 611
	ServiceType_SERVICE_SPECIAL_PROJECT_SIMPLE                     ServiceType = 701
	ServiceType_SERVICE_SPECIAL_PROJECT_COMPLEX                    ServiceType = 711
	ServiceType_SERVICE_SPECIAL_TASK_SIMPLE                        ServiceType = 801
	ServiceType_SERVICE_SPECIAL_TASK_COMPLEX                       ServiceType = 811
	ServiceType_SERVICE_SPECIAL_TASK_INCIDENT_RESPONSE             ServiceType = 821
	ServiceType_SERVICE_SPECIAL_TASK_SECURITY_ASSESSMENT           ServiceType = 831 // security & virus scans, reports..
	ServiceType_SERVICE_SPECIAL_TASK_HEALTH_CHECKING               ServiceType = 841
	ServiceType_SERVICE_SPECIAL_TASK_COMPLIANCE_ASSESSMENT         ServiceType = 851
)

// Enum value maps for ServiceType.
var (
	ServiceType_name = map[int32]string{
		0:   "SERVICE_TYPE_UNSPECIFIED",
		101: "SERVICE_ADVISORY_SERVICE_ARCHITECTURE",
		111: "SERVICE_ADVISORY_SERVICE_SUPPORT",
		201: "SERVICE_MANAGED_SERVICE_CLOUD",
		211: "SERVICE_MANAGED_SERVICE_ONPREM",
		221: "SERVICE_MANAGED_SERVICE_INFRASTRUCTURE_MAINTENANCE",
		231: "SERVICE_MANAGED_SERVICE_SOFTWARE_MAINTENANCE",
		301: "SERVICE_INFRASTRUCTURE_PROJECT_NETWORK",
		311: "SERVICE_INFRASTRUCTURE_PROJECT_CLOUD",
		321: "SERVICE_INFRASTRUCTURE_PROJECT_ONPREM",
		331: "SERVICE_INFRASTRUCTURE_PROJECT_MIGRATION",
		401: "SERVICE_AUTOMATION_PROJECT_SIMPLE",
		411: "SERVICE_AUTOMATION_PROJECT_COMPLEX",
		501: "SERVICE_SOFTWARE_DEVELOPMENT_SIMPLE",
		511: "SERVICE_SOFTWARE_DEVELOPMENT_COMPLEX",
		521: "SERVICE_SOFTWARE_DEVELOPMENT_SUPPORT",
		531: "SERVICE_SOFTWARE_DEVELOPMENT_MAINTENANCE",
		551: "SERVICE_SOFTWARE_DEVELOPMENT_FEATURE_REQUEST",
		601: "SERVICE_PROJECT_MANAGEMENT_SIMPLE",
		611: "SERVICE_PROJECT_MANAGEMENT_COMPLEX",
		701: "SERVICE_SPECIAL_PROJECT_SIMPLE",
		711: "SERVICE_SPECIAL_PROJECT_COMPLEX",
		801: "SERVICE_SPECIAL_TASK_SIMPLE",
		811: "SERVICE_SPECIAL_TASK_COMPLEX",
		821: "SERVICE_SPECIAL_TASK_INCIDENT_RESPONSE",
		831: "SERVICE_SPECIAL_TASK_SECURITY_ASSESSMENT",
		841: "SERVICE_SPECIAL_TASK_HEALTH_CHECKING",
		851: "SERVICE_SPECIAL_TASK_COMPLIANCE_ASSESSMENT",
	}
	ServiceType_value = map[string]int32{
		"SERVICE_TYPE_UNSPECIFIED":                           0,
		"SERVICE_ADVISORY_SERVICE_ARCHITECTURE":              101,
		"SERVICE_ADVISORY_SERVICE_SUPPORT":                   111,
		"SERVICE_MANAGED_SERVICE_CLOUD":                      201,
		"SERVICE_MANAGED_SERVICE_ONPREM":                     211,
		"SERVICE_MANAGED_SERVICE_INFRASTRUCTURE_MAINTENANCE": 221,
		"SERVICE_MANAGED_SERVICE_SOFTWARE_MAINTENANCE":       231,
		"SERVICE_INFRASTRUCTURE_PROJECT_NETWORK":             301,
		"SERVICE_INFRASTRUCTURE_PROJECT_CLOUD":               311,
		"SERVICE_INFRASTRUCTURE_PROJECT_ONPREM":              321,
		"SERVICE_INFRASTRUCTURE_PROJECT_MIGRATION":           331,
		"SERVICE_AUTOMATION_PROJECT_SIMPLE":                  401,
		"SERVICE_AUTOMATION_PROJECT_COMPLEX":                 411,
		"SERVICE_SOFTWARE_DEVELOPMENT_SIMPLE":                501,
		"SERVICE_SOFTWARE_DEVELOPMENT_COMPLEX":               511,
		"SERVICE_SOFTWARE_DEVELOPMENT_SUPPORT":               521,
		"SERVICE_SOFTWARE_DEVELOPMENT_MAINTENANCE":           531,
		"SERVICE_SOFTWARE_DEVELOPMENT_FEATURE_REQUEST":       551,
		"SERVICE_PROJECT_MANAGEMENT_SIMPLE":                  601,
		"SERVICE_PROJECT_MANAGEMENT_COMPLEX":                 611,
		"SERVICE_SPECIAL_PROJECT_SIMPLE":                     701,
		"SERVICE_SPECIAL_PROJECT_COMPLEX":                    711,
		"SERVICE_SPECIAL_TASK_SIMPLE":                        801,
		"SERVICE_SPECIAL_TASK_COMPLEX":                       811,
		"SERVICE_SPECIAL_TASK_INCIDENT_RESPONSE":             821,
		"SERVICE_SPECIAL_TASK_SECURITY_ASSESSMENT":           831,
		"SERVICE_SPECIAL_TASK_HEALTH_CHECKING":               841,
		"SERVICE_SPECIAL_TASK_COMPLIANCE_ASSESSMENT":         851,
	}
)

func (x ServiceType) Enum() *ServiceType {
	p := new(ServiceType)
	*p = x
	return p
}

func (x ServiceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceType) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[6].Descriptor()
}

func (ServiceType) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[6]
}

func (x ServiceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceType.Descriptor instead.
func (ServiceType) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{6}
}

type ServiceScope int32

const (
	ServiceScope_SCOPE_UNDEFINED      ServiceScope = 0
	ServiceScope_SCOPE_ALL            ServiceScope = 11
	ServiceScope_SCOPE_DESIGN         ServiceScope = 21
	ServiceScope_SCOPE_IMPLEMENTATION ServiceScope = 31
	ServiceScope_SCOPE_MAINTENANCE    ServiceScope = 41
	ServiceScope_SCOPE_SUPPORT        ServiceScope = 51
)

// Enum value maps for ServiceScope.
var (
	ServiceScope_name = map[int32]string{
		0:  "SCOPE_UNDEFINED",
		11: "SCOPE_ALL",
		21: "SCOPE_DESIGN",
		31: "SCOPE_IMPLEMENTATION",
		41: "SCOPE_MAINTENANCE",
		51: "SCOPE_SUPPORT",
	}
	ServiceScope_value = map[string]int32{
		"SCOPE_UNDEFINED":      0,
		"SCOPE_ALL":            11,
		"SCOPE_DESIGN":         21,
		"SCOPE_IMPLEMENTATION": 31,
		"SCOPE_MAINTENANCE":    41,
		"SCOPE_SUPPORT":        51,
	}
)

func (x ServiceScope) Enum() *ServiceScope {
	p := new(ServiceScope)
	*p = x
	return p
}

func (x ServiceScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceScope) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[7].Descriptor()
}

func (ServiceScope) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes[7]
}

func (x ServiceScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceScope.Descriptor instead.
func (ServiceScope) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{7}
}

type Product struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceID       string       `protobuf:"bytes,1,opt,name=serviceID,proto3" json:"serviceID,omitempty"`
	ProviderID      string       `protobuf:"bytes,2,opt,name=providerID,proto3" json:"providerID,omitempty"` // == accountID since mmesh customers can be external providers
	ProductID       string       `protobuf:"bytes,3,opt,name=productID,proto3" json:"productID,omitempty"`   // naming convention: providerPrefix_providerProductName
	StripeProductID string       `protobuf:"bytes,11,opt,name=stripeProductID,proto3" json:"stripeProductID,omitempty"`
	Name            string       `protobuf:"bytes,21,opt,name=name,proto3" json:"name,omitempty"`
	Description     string       `protobuf:"bytes,22,opt,name=description,proto3" json:"description,omitempty"`
	UnitLabel       string       `protobuf:"bytes,25,opt,name=unitLabel,proto3" json:"unitLabel,omitempty"`
	Available       bool         `protobuf:"varint,27,opt,name=available,proto3" json:"available,omitempty"`
	PricingModel    PricingModel `protobuf:"varint,30,opt,name=pricingModel,proto3,enum=services.PricingModel" json:"pricingModel,omitempty"`
	PriceFixed      float64      `protobuf:"fixed64,31,opt,name=priceFixed,proto3" json:"priceFixed,omitempty"`
	PriceHourly     float64      `protobuf:"fixed64,32,opt,name=priceHourly,proto3" json:"priceHourly,omitempty"`
	PriceDaily      float64      `protobuf:"fixed64,33,opt,name=priceDaily,proto3" json:"priceDaily,omitempty"`
	PriceWeekly     float64      `protobuf:"fixed64,34,opt,name=priceWeekly,proto3" json:"priceWeekly,omitempty"`
	PriceMonthly    float64      `protobuf:"fixed64,35,opt,name=priceMonthly,proto3" json:"priceMonthly,omitempty"`
	PriceYearly     float64      `protobuf:"fixed64,36,opt,name=priceYearly,proto3" json:"priceYearly,omitempty"`
	// managed tasks (uber-style): incidents, changes, maintenance...
	SLA             ProductSLA      `protobuf:"varint,41,opt,name=SLA,proto3,enum=services.ProductSLA" json:"SLA,omitempty"`
	Class           ProductClass    `protobuf:"varint,43,opt,name=class,proto3,enum=services.ProductClass" json:"class,omitempty"`
	CloudCategory   CloudCategory   `protobuf:"varint,51,opt,name=cloudCategory,proto3,enum=services.CloudCategory" json:"cloudCategory,omitempty"`
	CloudType       CloudType       `protobuf:"varint,52,opt,name=cloudType,proto3,enum=services.CloudType" json:"cloudType,omitempty"`
	ServiceCategory ServiceCategory `protobuf:"varint,61,opt,name=serviceCategory,proto3,enum=services.ServiceCategory" json:"serviceCategory,omitempty"`
	ServiceType     ServiceType     `protobuf:"varint,62,opt,name=serviceType,proto3,enum=services.ServiceType" json:"serviceType,omitempty"`
	ServiceScope    ServiceScope    `protobuf:"varint,63,opt,name=serviceScope,proto3,enum=services.ServiceScope" json:"serviceScope,omitempty"`
	Locations       []string        `protobuf:"bytes,101,rep,name=locations,proto3" json:"locations,omitempty"`
	Langs           []string        `protobuf:"bytes,102,rep,name=langs,proto3" json:"langs,omitempty"`
	OpMgrs          []string        `protobuf:"bytes,111,rep,name=opMgrs,proto3" json:"opMgrs,omitempty"`
	SalesReps       []string        `protobuf:"bytes,112,rep,name=salesReps,proto3" json:"salesReps,omitempty"`
	CreationDate    int64           `protobuf:"varint,201,opt,name=creationDate,proto3" json:"creationDate,omitempty"`
	LastModified    int64           `protobuf:"varint,202,opt,name=lastModified,proto3" json:"lastModified,omitempty"`
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{0}
}

func (x *Product) GetServiceID() string {
	if x != nil {
		return x.ServiceID
	}
	return ""
}

func (x *Product) GetProviderID() string {
	if x != nil {
		return x.ProviderID
	}
	return ""
}

func (x *Product) GetProductID() string {
	if x != nil {
		return x.ProductID
	}
	return ""
}

func (x *Product) GetStripeProductID() string {
	if x != nil {
		return x.StripeProductID
	}
	return ""
}

func (x *Product) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetUnitLabel() string {
	if x != nil {
		return x.UnitLabel
	}
	return ""
}

func (x *Product) GetAvailable() bool {
	if x != nil {
		return x.Available
	}
	return false
}

func (x *Product) GetPricingModel() PricingModel {
	if x != nil {
		return x.PricingModel
	}
	return PricingModel_PRICING_FREE
}

func (x *Product) GetPriceFixed() float64 {
	if x != nil {
		return x.PriceFixed
	}
	return 0
}

func (x *Product) GetPriceHourly() float64 {
	if x != nil {
		return x.PriceHourly
	}
	return 0
}

func (x *Product) GetPriceDaily() float64 {
	if x != nil {
		return x.PriceDaily
	}
	return 0
}

func (x *Product) GetPriceWeekly() float64 {
	if x != nil {
		return x.PriceWeekly
	}
	return 0
}

func (x *Product) GetPriceMonthly() float64 {
	if x != nil {
		return x.PriceMonthly
	}
	return 0
}

func (x *Product) GetPriceYearly() float64 {
	if x != nil {
		return x.PriceYearly
	}
	return 0
}

func (x *Product) GetSLA() ProductSLA {
	if x != nil {
		return x.SLA
	}
	return ProductSLA_BEST_EFFORT
}

func (x *Product) GetClass() ProductClass {
	if x != nil {
		return x.Class
	}
	return ProductClass_CLASS_UNSPECIFIED
}

func (x *Product) GetCloudCategory() CloudCategory {
	if x != nil {
		return x.CloudCategory
	}
	return CloudCategory_CLOUD_UNSPECIFIED
}

func (x *Product) GetCloudType() CloudType {
	if x != nil {
		return x.CloudType
	}
	return CloudType_CLOUD_TYPE_UNSPECIFIED
}

func (x *Product) GetServiceCategory() ServiceCategory {
	if x != nil {
		return x.ServiceCategory
	}
	return ServiceCategory_SERVICE_UNSPECIFIED
}

func (x *Product) GetServiceType() ServiceType {
	if x != nil {
		return x.ServiceType
	}
	return ServiceType_SERVICE_TYPE_UNSPECIFIED
}

func (x *Product) GetServiceScope() ServiceScope {
	if x != nil {
		return x.ServiceScope
	}
	return ServiceScope_SCOPE_UNDEFINED
}

func (x *Product) GetLocations() []string {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *Product) GetLangs() []string {
	if x != nil {
		return x.Langs
	}
	return nil
}

func (x *Product) GetOpMgrs() []string {
	if x != nil {
		return x.OpMgrs
	}
	return nil
}

func (x *Product) GetSalesReps() []string {
	if x != nil {
		return x.SalesReps
	}
	return nil
}

func (x *Product) GetCreationDate() int64 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Product) GetLastModified() int64 {
	if x != nil {
		return x.LastModified
	}
	return 0
}

type Products struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta     *resource.ListResponse `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Products []*Product             `protobuf:"bytes,2,rep,name=products,proto3" json:"products,omitempty"`
}

func (x *Products) Reset() {
	*x = Products{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Products) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Products) ProtoMessage() {}

func (x *Products) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Products.ProtoReflect.Descriptor instead.
func (*Products) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{1}
}

func (x *Products) GetMeta() *resource.ListResponse {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Products) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

type ListProductsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meta     *resource.ListRequest `protobuf:"bytes,1,opt,name=meta,proto3" json:"meta,omitempty"`
	Provider *Provider             `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
}

func (x *ListProductsRequest) Reset() {
	*x = ListProductsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListProductsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProductsRequest) ProtoMessage() {}

func (x *ListProductsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProductsRequest.ProtoReflect.Descriptor instead.
func (*ListProductsRequest) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP(), []int{2}
}

func (x *ListProductsRequest) GetMeta() *resource.ListRequest {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *ListProductsRequest) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

var File_mmesh_protobuf_resources_v1_services_product_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_resources_v1_services_product_proto_rawDesc = []byte{
	0x0a, 0x32, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x2f,
	0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x33, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x08, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x6e, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x6e, 0x69, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x48, 0x6f, 0x75,
	0x72, 0x6c, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x48, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x57,
	0x65, 0x65, 0x6b, 0x6c, 0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x12, 0x20, 0x0a, 0x0b,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x63, 0x65, 0x59, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x12, 0x26,
	0x0a, 0x03, 0x53, 0x4c, 0x41, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x4c,
	0x41, 0x52, 0x03, 0x53, 0x4c, 0x41, 0x12, 0x2c, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x05, 0x63,
	0x6c, 0x61, 0x73, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x34, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x6f,
	0x70, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x65, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x6e, 0x67, 0x73, 0x18, 0x66, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x4d, 0x67, 0x72, 0x73, 0x18, 0x6f,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x70, 0x4d, 0x67, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x73, 0x18, 0x70, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x52, 0x65, 0x70, 0x73, 0x12, 0x23, 0x0a, 0x0c, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0xc9, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18,
	0xca, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x22, 0x65, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73,
	0x12, 0x2a, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x22, 0x70, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x12, 0x2e, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2a, 0xab, 0x01,
	0x0a, 0x0c, 0x50, 0x72, 0x69, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x43, 0x55, 0x53, 0x54,
	0x4f, 0x4d, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f,
	0x46, 0x49, 0x58, 0x45, 0x44, 0x10, 0x15, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x43, 0x49,
	0x4e, 0x47, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x4c, 0x59, 0x10, 0x1f, 0x12, 0x11, 0x0a, 0x0d, 0x50,
	0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x29, 0x12, 0x12,
	0x0a, 0x0e, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59,
	0x10, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x52, 0x49, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f,
	0x4e, 0x54, 0x48, 0x4c, 0x59, 0x10, 0x3d, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x52, 0x49, 0x43, 0x49,
	0x4e, 0x47, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x4c, 0x59, 0x10, 0x47, 0x2a, 0x50, 0x0a, 0x0a, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x53, 0x4c, 0x41, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x45, 0x53,
	0x54, 0x5f, 0x45, 0x46, 0x46, 0x4f, 0x52, 0x54, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41,
	0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x4c, 0x55, 0x53, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x50, 0x52, 0x49, 0x53, 0x45, 0x10, 0x04, 0x2a, 0x49, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x15, 0x2a, 0x96, 0x01, 0x0a, 0x0d, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x10, 0x0b, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x53, 0x54, 0x4f, 0x52, 0x41, 0x47, 0x45, 0x10, 0x1f, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x10, 0x29, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x4f,
	0x55, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x33, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x3d, 0x2a, 0xb7, 0x02, 0x0a, 0x09, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43,
	0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x42, 0x41, 0x4e,
	0x44, 0x57, 0x49, 0x44, 0x54, 0x48, 0x10, 0x65, 0x12, 0x1b, 0x0a, 0x16, 0x43, 0x4c, 0x4f, 0x55,
	0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e,
	0x43, 0x45, 0x10, 0xc9, 0x01, 0x12, 0x25, 0x0a, 0x20, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43,
	0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x4b, 0x55, 0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45,
	0x53, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10, 0xd3, 0x01, 0x12, 0x22, 0x0a, 0x1d,
	0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x4b, 0x55,
	0x42, 0x45, 0x52, 0x4e, 0x45, 0x54, 0x45, 0x53, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0xd4, 0x01,
	0x12, 0x20, 0x0a, 0x1b, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54,
	0x45, 0x5f, 0x4e, 0x4f, 0x4d, 0x41, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x10,
	0xdd, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x53, 0x54, 0x4f, 0x52,
	0x41, 0x47, 0x45, 0x5f, 0x56, 0x4f, 0x4c, 0x55, 0x4d, 0x45, 0x10, 0xad, 0x02, 0x12, 0x15, 0x0a,
	0x10, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x41, 0x50, 0x50, 0x5f, 0x43, 0x55, 0x53, 0x54, 0x4f,
	0x4d, 0x10, 0x91, 0x03, 0x12, 0x19, 0x0a, 0x14, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x49, 0x53, 0x10, 0xf5, 0x03, 0x12,
	0x1a, 0x0a, 0x15, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x4c, 0x41, 0x4d, 0x42, 0x44, 0x41, 0x10, 0xd9, 0x04, 0x2a, 0xa2, 0x02, 0x0a, 0x0f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x15, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49,
	0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x1f, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x29, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x45,
	0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x33, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x3d, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x10, 0x47, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x51,
	0x2a, 0xb0, 0x09, 0x0a, 0x0b, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x29,
	0x0a, 0x25, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f,
	0x52, 0x59, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49,
	0x54, 0x45, 0x43, 0x54, 0x55, 0x52, 0x45, 0x10, 0x65, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x45, 0x52,
	0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x59, 0x5f, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x6f, 0x12,
	0x22, 0x0a, 0x1d, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x10, 0xc9, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d,
	0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4f,
	0x4e, 0x50, 0x52, 0x45, 0x4d, 0x10, 0xd3, 0x01, 0x12, 0x37, 0x0a, 0x32, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0xdd,
	0x01, 0x12, 0x31, 0x0a, 0x2c, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x4d, 0x41, 0x4e,
	0x41, 0x47, 0x45, 0x44, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x46,
	0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43,
	0x45, 0x10, 0xe7, 0x01, 0x12, 0x2b, 0x0a, 0x26, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0xad,
	0x02, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46,
	0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a,
	0x45, 0x43, 0x54, 0x5f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x10, 0xb7, 0x02, 0x12, 0x2a, 0x0a, 0x25,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4f,
	0x4e, 0x50, 0x52, 0x45, 0x4d, 0x10, 0xc1, 0x02, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x52, 0x41, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55,
	0x52, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x49, 0x47, 0x52, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0xcb, 0x02, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0x91, 0x03, 0x12,
	0x27, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x55, 0x54, 0x4f, 0x4d,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x58, 0x10, 0x9b, 0x03, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x56,
	0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10,
	0xf5, 0x03, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x4f,
	0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x10, 0xff, 0x03, 0x12, 0x29, 0x0a,
	0x24, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52,
	0x45, 0x5f, 0x44, 0x45, 0x56, 0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55,
	0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x89, 0x04, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x56,
	0x45, 0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e,
	0x41, 0x4e, 0x43, 0x45, 0x10, 0x93, 0x04, 0x12, 0x31, 0x0a, 0x2c, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x4f, 0x46, 0x54, 0x57, 0x41, 0x52, 0x45, 0x5f, 0x44, 0x45, 0x56, 0x45,
	0x4c, 0x4f, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5f,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0xa7, 0x04, 0x12, 0x26, 0x0a, 0x21, 0x53, 0x45,
	0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41,
	0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10,
	0xd9, 0x04, 0x12, 0x27, 0x0a, 0x22, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x52,
	0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x10, 0xe3, 0x04, 0x12, 0x23, 0x0a, 0x1e, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x50,
	0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0xbd, 0x05,
	0x12, 0x24, 0x0a, 0x1f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x41, 0x4c, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x43, 0x4f, 0x4d, 0x50,
	0x4c, 0x45, 0x58, 0x10, 0xc7, 0x05, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43,
	0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53,
	0x49, 0x4d, 0x50, 0x4c, 0x45, 0x10, 0xa1, 0x06, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x58, 0x10, 0xab, 0x06, 0x12, 0x2b, 0x0a, 0x26, 0x53,
	0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54,
	0x41, 0x53, 0x4b, 0x5f, 0x49, 0x4e, 0x43, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0xb5, 0x06, 0x12, 0x2d, 0x0a, 0x28, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0xbf, 0x06, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x45, 0x52, 0x56, 0x49,
	0x43, 0x45, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f,
	0x48, 0x45, 0x41, 0x4c, 0x54, 0x48, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x47, 0x10,
	0xc9, 0x06, 0x12, 0x2f, 0x0a, 0x2a, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c,
	0x49, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x41, 0x53, 0x53, 0x45, 0x53, 0x53, 0x4d, 0x45, 0x4e, 0x54,
	0x10, 0xd3, 0x06, 0x2a, 0x88, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x53,
	0x63, 0x6f, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x43, 0x4f,
	0x50, 0x45, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x0b, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x5f, 0x44, 0x45, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x15, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x43,
	0x4f, 0x50, 0x45, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x1f, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4d, 0x41,
	0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x29, 0x12, 0x11, 0x0a, 0x0d, 0x53,
	0x43, 0x4f, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x33, 0x42, 0x2c,
	0x5a, 0x2a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70,
	0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_resources_v1_services_product_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_resources_v1_services_product_proto_rawDescData = file_mmesh_protobuf_resources_v1_services_product_proto_rawDesc
)

func file_mmesh_protobuf_resources_v1_services_product_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_resources_v1_services_product_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_resources_v1_services_product_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_resources_v1_services_product_proto_rawDescData)
	})
	return file_mmesh_protobuf_resources_v1_services_product_proto_rawDescData
}

var file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mmesh_protobuf_resources_v1_services_product_proto_goTypes = []interface{}{
	(PricingModel)(0),             // 0: services.PricingModel
	(ProductSLA)(0),               // 1: services.ProductSLA
	(ProductClass)(0),             // 2: services.ProductClass
	(CloudCategory)(0),            // 3: services.CloudCategory
	(CloudType)(0),                // 4: services.CloudType
	(ServiceCategory)(0),          // 5: services.ServiceCategory
	(ServiceType)(0),              // 6: services.ServiceType
	(ServiceScope)(0),             // 7: services.ServiceScope
	(*Product)(nil),               // 8: services.Product
	(*Products)(nil),              // 9: services.Products
	(*ListProductsRequest)(nil),   // 10: services.ListProductsRequest
	(*resource.ListResponse)(nil), // 11: resource.ListResponse
	(*resource.ListRequest)(nil),  // 12: resource.ListRequest
	(*Provider)(nil),              // 13: services.Provider
}
var file_mmesh_protobuf_resources_v1_services_product_proto_depIdxs = []int32{
	0,  // 0: services.Product.pricingModel:type_name -> services.PricingModel
	1,  // 1: services.Product.SLA:type_name -> services.ProductSLA
	2,  // 2: services.Product.class:type_name -> services.ProductClass
	3,  // 3: services.Product.cloudCategory:type_name -> services.CloudCategory
	4,  // 4: services.Product.cloudType:type_name -> services.CloudType
	5,  // 5: services.Product.serviceCategory:type_name -> services.ServiceCategory
	6,  // 6: services.Product.serviceType:type_name -> services.ServiceType
	7,  // 7: services.Product.serviceScope:type_name -> services.ServiceScope
	11, // 8: services.Products.meta:type_name -> resource.ListResponse
	8,  // 9: services.Products.products:type_name -> services.Product
	12, // 10: services.ListProductsRequest.meta:type_name -> resource.ListRequest
	13, // 11: services.ListProductsRequest.provider:type_name -> services.Provider
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_resources_v1_services_product_proto_init() }
func file_mmesh_protobuf_resources_v1_services_product_proto_init() {
	if File_mmesh_protobuf_resources_v1_services_product_proto != nil {
		return
	}
	file_mmesh_protobuf_resources_v1_services_provider_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Products); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListProductsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_resources_v1_services_product_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_resources_v1_services_product_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_resources_v1_services_product_proto_depIdxs,
		EnumInfos:         file_mmesh_protobuf_resources_v1_services_product_proto_enumTypes,
		MessageInfos:      file_mmesh_protobuf_resources_v1_services_product_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_resources_v1_services_product_proto = out.File
	file_mmesh_protobuf_resources_v1_services_product_proto_rawDesc = nil
	file_mmesh_protobuf_resources_v1_services_product_proto_goTypes = nil
	file_mmesh_protobuf_resources_v1_services_product_proto_depIdxs = nil
}
