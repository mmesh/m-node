// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: mmesh/protobuf/network/v1/resources/network/vrf.proto

package network

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	auth "mmesh.dev/m-api-go/grpc/network/resources/iam/auth"
	location "mmesh.dev/m-api-go/grpc/network/resources/location"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VRF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountID     string        `protobuf:"bytes,1,opt,name=accountID,proto3" json:"accountID,omitempty"`
	TenantID      string        `protobuf:"bytes,2,opt,name=tenantID,proto3" json:"tenantID,omitempty"`
	NetID         string        `protobuf:"bytes,3,opt,name=netID,proto3" json:"netID,omitempty"`
	VRFID         string        `protobuf:"bytes,4,opt,name=VRFID,proto3" json:"VRFID,omitempty"`
	Description   string        `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	IPAM          *IPAM         `protobuf:"bytes,6,opt,name=IPAM,proto3" json:"IPAM,omitempty"`
	NetworkPolicy *Policy       `protobuf:"bytes,7,opt,name=networkPolicy,proto3" json:"networkPolicy,omitempty"`
	AuthKey       *auth.AuthKey `protobuf:"bytes,8,opt,name=authKey,proto3" json:"authKey,omitempty"`
	AuthSecret    string        `protobuf:"bytes,9,opt,name=authSecret,proto3" json:"authSecret,omitempty"`
	RelayService  *RelayService `protobuf:"bytes,10,opt,name=relayService,proto3" json:"relayService,omitempty"`
}

func (x *VRF) Reset() {
	*x = VRF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VRF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VRF) ProtoMessage() {}

func (x *VRF) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VRF.ProtoReflect.Descriptor instead.
func (*VRF) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescGZIP(), []int{0}
}

func (x *VRF) GetAccountID() string {
	if x != nil {
		return x.AccountID
	}
	return ""
}

func (x *VRF) GetTenantID() string {
	if x != nil {
		return x.TenantID
	}
	return ""
}

func (x *VRF) GetNetID() string {
	if x != nil {
		return x.NetID
	}
	return ""
}

func (x *VRF) GetVRFID() string {
	if x != nil {
		return x.VRFID
	}
	return ""
}

func (x *VRF) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *VRF) GetIPAM() *IPAM {
	if x != nil {
		return x.IPAM
	}
	return nil
}

func (x *VRF) GetNetworkPolicy() *Policy {
	if x != nil {
		return x.NetworkPolicy
	}
	return nil
}

func (x *VRF) GetAuthKey() *auth.AuthKey {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *VRF) GetAuthSecret() string {
	if x != nil {
		return x.AuthSecret
	}
	return ""
}

func (x *VRF) GetRelayService() *RelayService {
	if x != nil {
		return x.RelayService
	}
	return nil
}

type VRFs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VRFs []*VRF `protobuf:"bytes,1,rep,name=VRFs,proto3" json:"VRFs,omitempty"`
}

func (x *VRFs) Reset() {
	*x = VRFs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VRFs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VRFs) ProtoMessage() {}

func (x *VRFs) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VRFs.ProtoReflect.Descriptor instead.
func (*VRFs) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescGZIP(), []int{1}
}

func (x *VRFs) GetVRFs() []*VRF {
	if x != nil {
		return x.VRFs
	}
	return nil
}

type IPAM struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkCIDR    string                       `protobuf:"bytes,1,opt,name=networkCIDR,proto3" json:"networkCIDR,omitempty"`
	SubnetCIDR     string                       `protobuf:"bytes,2,opt,name=subnetCIDR,proto3" json:"subnetCIDR,omitempty"`
	Endpoints      map[string]string            `protobuf:"bytes,3,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`  // map[endpointID]ipv4
	Leased         map[string]*LeaseEndpointMap `protobuf:"bytes,4,rep,name=leased,proto3" json:"leased,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`        // map[ipv4]map[endpointID]bool
	Available      map[string]bool              `protobuf:"bytes,5,rep,name=available,proto3" json:"available,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // map[ipv4]bool
	TotalAvailable int32                        `protobuf:"varint,6,opt,name=totalAvailable,proto3" json:"totalAvailable,omitempty"`
	TotalLeased    int32                        `protobuf:"varint,7,opt,name=totalLeased,proto3" json:"totalLeased,omitempty"`
}

func (x *IPAM) Reset() {
	*x = IPAM{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IPAM) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPAM) ProtoMessage() {}

func (x *IPAM) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPAM.ProtoReflect.Descriptor instead.
func (*IPAM) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescGZIP(), []int{2}
}

func (x *IPAM) GetNetworkCIDR() string {
	if x != nil {
		return x.NetworkCIDR
	}
	return ""
}

func (x *IPAM) GetSubnetCIDR() string {
	if x != nil {
		return x.SubnetCIDR
	}
	return ""
}

func (x *IPAM) GetEndpoints() map[string]string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *IPAM) GetLeased() map[string]*LeaseEndpointMap {
	if x != nil {
		return x.Leased
	}
	return nil
}

func (x *IPAM) GetAvailable() map[string]bool {
	if x != nil {
		return x.Available
	}
	return nil
}

func (x *IPAM) GetTotalAvailable() int32 {
	if x != nil {
		return x.TotalAvailable
	}
	return 0
}

func (x *IPAM) GetTotalLeased() int32 {
	if x != nil {
		return x.TotalLeased
	}
	return 0
}

type LeaseEndpointMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints map[string]bool `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // map[endpointID]bool
}

func (x *LeaseEndpointMap) Reset() {
	*x = LeaseEndpointMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaseEndpointMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaseEndpointMap) ProtoMessage() {}

func (x *LeaseEndpointMap) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaseEndpointMap.ProtoReflect.Descriptor instead.
func (*LeaseEndpointMap) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescGZIP(), []int{3}
}

func (x *LeaseEndpointMap) GetEndpoints() map[string]bool {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type RelayService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool               `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Suspended    bool               `protobuf:"varint,2,opt,name=suspended,proto3" json:"suspended,omitempty"`
	Ns           string             `protobuf:"bytes,3,opt,name=ns,proto3" json:"ns,omitempty"` // namespace
	Name         string             `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Image        string             `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	Version      string             `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty"`
	Location     *location.Location `protobuf:"bytes,7,opt,name=location,proto3" json:"location,omitempty"`
	FederationID string             `protobuf:"bytes,8,opt,name=federationID,proto3" json:"federationID,omitempty"`
	ControllerID string             `protobuf:"bytes,9,opt,name=controllerID,proto3" json:"controllerID,omitempty"`
	ExternalIPv4 string             `protobuf:"bytes,10,opt,name=externalIPv4,proto3" json:"externalIPv4,omitempty"`
	ExternalPort int32              `protobuf:"varint,11,opt,name=externalPort,proto3" json:"externalPort,omitempty"`
	Agent        *NetworkAgent      `protobuf:"bytes,12,opt,name=agent,proto3" json:"agent,omitempty"`
}

func (x *RelayService) Reset() {
	*x = RelayService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayService) ProtoMessage() {}

func (x *RelayService) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayService.ProtoReflect.Descriptor instead.
func (*RelayService) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescGZIP(), []int{4}
}

func (x *RelayService) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RelayService) GetSuspended() bool {
	if x != nil {
		return x.Suspended
	}
	return false
}

func (x *RelayService) GetNs() string {
	if x != nil {
		return x.Ns
	}
	return ""
}

func (x *RelayService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelayService) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RelayService) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RelayService) GetLocation() *location.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *RelayService) GetFederationID() string {
	if x != nil {
		return x.FederationID
	}
	return ""
}

func (x *RelayService) GetControllerID() string {
	if x != nil {
		return x.ControllerID
	}
	return ""
}

func (x *RelayService) GetExternalIPv4() string {
	if x != nil {
		return x.ExternalIPv4
	}
	return ""
}

func (x *RelayService) GetExternalPort() int32 {
	if x != nil {
		return x.ExternalPort
	}
	return 0
}

func (x *RelayService) GetAgent() *NetworkAgent {
	if x != nil {
		return x.Agent
	}
	return nil
}

type NetworkAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node       *Node         `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"`
	AuthKey    *auth.AuthKey `protobuf:"bytes,2,opt,name=authKey,proto3" json:"authKey,omitempty"`
	AuthSecret string        `protobuf:"bytes,3,opt,name=authSecret,proto3" json:"authSecret,omitempty"`
}

func (x *NetworkAgent) Reset() {
	*x = NetworkAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkAgent) ProtoMessage() {}

func (x *NetworkAgent) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkAgent.ProtoReflect.Descriptor instead.
func (*NetworkAgent) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescGZIP(), []int{5}
}

func (x *NetworkAgent) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NetworkAgent) GetAuthKey() *auth.AuthKey {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *NetworkAgent) GetAuthSecret() string {
	if x != nil {
		return x.AuthSecret
	}
	return ""
}

var File_mmesh_protobuf_network_v1_resources_network_vrf_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDesc = []byte{
	0x0a, 0x35, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x72,
	0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x1a, 0x37, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x38, 0x6d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x3b, 0x6d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x02, 0x0a, 0x03, 0x56, 0x52, 0x46,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x65, 0x74, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x56, 0x52, 0x46, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x56, 0x52, 0x46, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x04, 0x49, 0x50, 0x41, 0x4d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x49, 0x50, 0x41, 0x4d, 0x52, 0x04, 0x49, 0x50, 0x41, 0x4d, 0x12, 0x35, 0x0a, 0x0d, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x04, 0x56, 0x52, 0x46, 0x73, 0x12, 0x20,
	0x0a, 0x04, 0x56, 0x52, 0x46, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x56, 0x52, 0x46, 0x52, 0x04, 0x56, 0x52, 0x46, 0x73,
	0x22, 0x8f, 0x04, 0x0a, 0x04, 0x49, 0x50, 0x41, 0x4d, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x43, 0x49, 0x44, 0x52, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x43, 0x49, 0x44, 0x52, 0x12, 0x1e, 0x0a, 0x0a, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x49, 0x44, 0x52, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x49, 0x44, 0x52, 0x12, 0x3a, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x2e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x49, 0x50, 0x41, 0x4d, 0x2e, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64,
	0x1a, 0x3c, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x54,
	0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x98, 0x01, 0x0a, 0x10, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x46, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x4d, 0x61, 0x70, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a,
	0x3c, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x87, 0x03,
	0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x73, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x50,
	0x76, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x50, 0x76, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x2b, 0x0a, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x22, 0x7a, 0x0a, 0x0c, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x75,
	0x74, 0x68, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x4b, 0x65, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x42, 0x33, 0x5a, 0x31, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65, 0x76,
	0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescData = file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDesc
)

func file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescData)
	})
	return file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDescData
}

var file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_mmesh_protobuf_network_v1_resources_network_vrf_proto_goTypes = []interface{}{
	(*VRF)(nil),               // 0: network.VRF
	(*VRFs)(nil),              // 1: network.VRFs
	(*IPAM)(nil),              // 2: network.IPAM
	(*LeaseEndpointMap)(nil),  // 3: network.LeaseEndpointMap
	(*RelayService)(nil),      // 4: network.RelayService
	(*NetworkAgent)(nil),      // 5: network.NetworkAgent
	nil,                       // 6: network.IPAM.EndpointsEntry
	nil,                       // 7: network.IPAM.LeasedEntry
	nil,                       // 8: network.IPAM.AvailableEntry
	nil,                       // 9: network.LeaseEndpointMap.EndpointsEntry
	(*Policy)(nil),            // 10: network.Policy
	(*auth.AuthKey)(nil),      // 11: auth.AuthKey
	(*location.Location)(nil), // 12: location.Location
	(*Node)(nil),              // 13: network.Node
}
var file_mmesh_protobuf_network_v1_resources_network_vrf_proto_depIdxs = []int32{
	2,  // 0: network.VRF.IPAM:type_name -> network.IPAM
	10, // 1: network.VRF.networkPolicy:type_name -> network.Policy
	11, // 2: network.VRF.authKey:type_name -> auth.AuthKey
	4,  // 3: network.VRF.relayService:type_name -> network.RelayService
	0,  // 4: network.VRFs.VRFs:type_name -> network.VRF
	6,  // 5: network.IPAM.endpoints:type_name -> network.IPAM.EndpointsEntry
	7,  // 6: network.IPAM.leased:type_name -> network.IPAM.LeasedEntry
	8,  // 7: network.IPAM.available:type_name -> network.IPAM.AvailableEntry
	9,  // 8: network.LeaseEndpointMap.endpoints:type_name -> network.LeaseEndpointMap.EndpointsEntry
	12, // 9: network.RelayService.location:type_name -> location.Location
	5,  // 10: network.RelayService.agent:type_name -> network.NetworkAgent
	13, // 11: network.NetworkAgent.node:type_name -> network.Node
	11, // 12: network.NetworkAgent.authKey:type_name -> auth.AuthKey
	3,  // 13: network.IPAM.LeasedEntry.value:type_name -> network.LeaseEndpointMap
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_network_v1_resources_network_vrf_proto_init() }
func file_mmesh_protobuf_network_v1_resources_network_vrf_proto_init() {
	if File_mmesh_protobuf_network_v1_resources_network_vrf_proto != nil {
		return
	}
	file_mmesh_protobuf_network_v1_resources_network_policy_proto_init()
	file_mmesh_protobuf_network_v1_resources_network_node_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VRF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VRFs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IPAM); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaseEndpointMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_network_v1_resources_network_vrf_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_network_v1_resources_network_vrf_proto_depIdxs,
		MessageInfos:      file_mmesh_protobuf_network_v1_resources_network_vrf_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_network_v1_resources_network_vrf_proto = out.File
	file_mmesh_protobuf_network_v1_resources_network_vrf_proto_rawDesc = nil
	file_mmesh_protobuf_network_v1_resources_network_vrf_proto_goTypes = nil
	file_mmesh_protobuf_network_v1_resources_network_vrf_proto_depIdxs = nil
}
