// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: mmesh/protobuf/network/v1/mmsp/transfer.proto

package transfer

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Transfer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	TransferType int32      `protobuf:"varint,2,opt,name=transferType,proto3" json:"transferType,omitempty"`
	Paths        *Paths     `protobuf:"bytes,3,opt,name=paths,proto3" json:"paths,omitempty"`
	FileChunk    *FileChunk `protobuf:"bytes,4,opt,name=fileChunk,proto3" json:"fileChunk,omitempty"`
	FileAck      *FileAck   `protobuf:"bytes,5,opt,name=fileAck,proto3" json:"fileAck,omitempty"`
}

func (x *Transfer) Reset() {
	*x = Transfer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transfer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transfer) ProtoMessage() {}

func (x *Transfer) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transfer.ProtoReflect.Descriptor instead.
func (*Transfer) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescGZIP(), []int{0}
}

func (x *Transfer) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Transfer) GetTransferType() int32 {
	if x != nil {
		return x.TransferType
	}
	return 0
}

func (x *Transfer) GetPaths() *Paths {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *Transfer) GetFileChunk() *FileChunk {
	if x != nil {
		return x.FileChunk
	}
	return nil
}

func (x *Transfer) GetFileAck() *FileAck {
	if x != nil {
		return x.FileAck
	}
	return nil
}

type Paths struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcNodeID   string `protobuf:"bytes,1,opt,name=srcNodeID,proto3" json:"srcNodeID,omitempty"`
	SrcFilePath string `protobuf:"bytes,2,opt,name=srcFilePath,proto3" json:"srcFilePath,omitempty"`
	SrcFileName string `protobuf:"bytes,3,opt,name=srcFileName,proto3" json:"srcFileName,omitempty"`
	SrcFileMode uint32 `protobuf:"varint,4,opt,name=srcFileMode,proto3" json:"srcFileMode,omitempty"`
	SrcIsDir    bool   `protobuf:"varint,5,opt,name=srcIsDir,proto3" json:"srcIsDir,omitempty"`
	DstNodeID   string `protobuf:"bytes,6,opt,name=dstNodeID,proto3" json:"dstNodeID,omitempty"`
	DstFilePath string `protobuf:"bytes,7,opt,name=dstFilePath,proto3" json:"dstFilePath,omitempty"`
}

func (x *Paths) Reset() {
	*x = Paths{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paths) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paths) ProtoMessage() {}

func (x *Paths) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paths.ProtoReflect.Descriptor instead.
func (*Paths) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescGZIP(), []int{1}
}

func (x *Paths) GetSrcNodeID() string {
	if x != nil {
		return x.SrcNodeID
	}
	return ""
}

func (x *Paths) GetSrcFilePath() string {
	if x != nil {
		return x.SrcFilePath
	}
	return ""
}

func (x *Paths) GetSrcFileName() string {
	if x != nil {
		return x.SrcFileName
	}
	return ""
}

func (x *Paths) GetSrcFileMode() uint32 {
	if x != nil {
		return x.SrcFileMode
	}
	return 0
}

func (x *Paths) GetSrcIsDir() bool {
	if x != nil {
		return x.SrcIsDir
	}
	return false
}

func (x *Paths) GetDstNodeID() string {
	if x != nil {
		return x.DstNodeID
	}
	return ""
}

func (x *Paths) GetDstFilePath() string {
	if x != nil {
		return x.DstFilePath
	}
	return ""
}

type FileChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeInBytes   int64  `protobuf:"varint,1,opt,name=sizeInBytes,proto3" json:"sizeInBytes,omitempty"` // len(Data) of sent filechunk
	SendTime      int64  `protobuf:"varint,2,opt,name=sendTime,proto3" json:"sendTime,omitempty"`
	ChunkChecksum []byte `protobuf:"bytes,3,opt,name=chunkChecksum,proto3" json:"chunkChecksum,omitempty"` // Blake2B checksum of filechunk data
	Data          []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`                   // 1MB chunk
	ChunkNumber   int64  `protobuf:"varint,5,opt,name=chunkNumber,proto3" json:"chunkNumber,omitempty"`
	IsLastChunk   bool   `protobuf:"varint,6,opt,name=isLastChunk,proto3" json:"isLastChunk,omitempty"`
	FileChecksum  []byte `protobuf:"bytes,7,opt,name=fileChecksum,proto3" json:"fileChecksum,omitempty"` // SHA256 checksum of the file
}

func (x *FileChunk) Reset() {
	*x = FileChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileChunk) ProtoMessage() {}

func (x *FileChunk) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileChunk.ProtoReflect.Descriptor instead.
func (*FileChunk) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescGZIP(), []int{2}
}

func (x *FileChunk) GetSizeInBytes() int64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *FileChunk) GetSendTime() int64 {
	if x != nil {
		return x.SendTime
	}
	return 0
}

func (x *FileChunk) GetChunkChecksum() []byte {
	if x != nil {
		return x.ChunkChecksum
	}
	return nil
}

func (x *FileChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *FileChunk) GetChunkNumber() int64 {
	if x != nil {
		return x.ChunkNumber
	}
	return 0
}

func (x *FileChunk) GetIsLastChunk() bool {
	if x != nil {
		return x.IsLastChunk
	}
	return false
}

func (x *FileChunk) GetFileChecksum() []byte {
	if x != nil {
		return x.FileChecksum
	}
	return nil
}

type FileAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath  string `protobuf:"bytes,1,opt,name=filePath,proto3" json:"filePath,omitempty"`
	RecvBytes int64  `protobuf:"varint,2,opt,name=recvBytes,proto3" json:"recvBytes,omitempty"` // total received bytes
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Err       string `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
}

func (x *FileAck) Reset() {
	*x = FileAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileAck) ProtoMessage() {}

func (x *FileAck) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileAck.ProtoReflect.Descriptor instead.
func (*FileAck) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescGZIP(), []int{3}
}

func (x *FileAck) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *FileAck) GetRecvBytes() int64 {
	if x != nil {
		return x.RecvBytes
	}
	return 0
}

func (x *FileAck) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *FileAck) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

var File_mmesh_protobuf_network_v1_mmsp_transfer_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDesc = []byte{
	0x0a, 0x2d, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6d, 0x73, 0x70,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0xc5, 0x01, 0x0a, 0x08, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x73, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68,
	0x73, 0x12, 0x31, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x12, 0x2b, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x6b, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x41, 0x63,
	0x6b, 0x22, 0xe7, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x68, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73,
	0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x73, 0x72, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x72, 0x63,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73,
	0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x73, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x73, 0x72, 0x63, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x49, 0x73, 0x44, 0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x73, 0x72, 0x63, 0x49, 0x73, 0x44, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x64,
	0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x64, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x73, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0xeb, 0x01, 0x0a, 0x09,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x69, 0x7a,
	0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x75, 0x6e, 0x6b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x63, 0x68, 0x75, 0x6e, 0x6b, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x66, 0x69, 0x6c,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x73, 0x0a, 0x07, 0x46, 0x69, 0x6c,
	0x65, 0x41, 0x63, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x76, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x63, 0x76, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x42, 0x2f,
	0x5a, 0x2d, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70,
	0x69, 0x2d, 0x67, 0x6f, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2f, 0x6d, 0x6d, 0x73, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescData = file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDesc
)

func file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescData)
	})
	return file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDescData
}

var file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_mmesh_protobuf_network_v1_mmsp_transfer_proto_goTypes = []interface{}{
	(*Transfer)(nil),  // 0: transfer.Transfer
	(*Paths)(nil),     // 1: transfer.Paths
	(*FileChunk)(nil), // 2: transfer.FileChunk
	(*FileAck)(nil),   // 3: transfer.FileAck
}
var file_mmesh_protobuf_network_v1_mmsp_transfer_proto_depIdxs = []int32{
	1, // 0: transfer.Transfer.paths:type_name -> transfer.Paths
	2, // 1: transfer.Transfer.fileChunk:type_name -> transfer.FileChunk
	3, // 2: transfer.Transfer.fileAck:type_name -> transfer.FileAck
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_network_v1_mmsp_transfer_proto_init() }
func file_mmesh_protobuf_network_v1_mmsp_transfer_proto_init() {
	if File_mmesh_protobuf_network_v1_mmsp_transfer_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transfer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paths); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_network_v1_mmsp_transfer_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_network_v1_mmsp_transfer_proto_depIdxs,
		MessageInfos:      file_mmesh_protobuf_network_v1_mmsp_transfer_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_network_v1_mmsp_transfer_proto = out.File
	file_mmesh_protobuf_network_v1_mmsp_transfer_proto_rawDesc = nil
	file_mmesh_protobuf_network_v1_mmsp_transfer_proto_goTypes = nil
	file_mmesh_protobuf_network_v1_mmsp_transfer_proto_depIdxs = nil
}
