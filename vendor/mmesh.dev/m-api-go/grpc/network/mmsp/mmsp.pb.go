// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.0
// source: mmesh/protobuf/network/v1/mmsp/mmsp.proto

package mmsp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	alert "mmesh.dev/m-api-go/grpc/network/mmsp/alert"
	command "mmesh.dev/m-api-go/grpc/network/mmsp/command"
	portFwd "mmesh.dev/m-api-go/grpc/network/mmsp/portFwd"
	transfer "mmesh.dev/m-api-go/grpc/network/mmsp/transfer"
	auth "mmesh.dev/m-api-go/grpc/resources/iam/auth"
	messaging "mmesh.dev/m-api-go/grpc/resources/messaging"
	network "mmesh.dev/m-api-go/grpc/resources/network"
	workflow "mmesh.dev/m-api-go/grpc/resources/ops/workflow"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PayloadType int32

const (
	PayloadType_NODE_INIT              PayloadType = 0
	PayloadType_NODE_KEEPALIVE         PayloadType = 1
	PayloadType_CANCEL_SESSION         PayloadType = 2
	PayloadType_COMMAND_SHELL_EXEC     PayloadType = 10
	PayloadType_COMMAND_SHELL_EXIT     PayloadType = 11
	PayloadType_COMMAND_SHELL_INPUT    PayloadType = 12
	PayloadType_COMMAND_SHELL_OUTPUT   PayloadType = 13
	PayloadType_COMMAND_SHELL_DISABLED PayloadType = 14
	PayloadType_TRANSFER_INIT          PayloadType = 20
	PayloadType_TRANSFER_DATA          PayloadType = 21
	PayloadType_TRANSFER_ACK           PayloadType = 22
	PayloadType_TRANSFER_DISABLED      PayloadType = 23
	PayloadType_PORTFWD_LISTEN         PayloadType = 30
	PayloadType_PORTFWD_DIAL           PayloadType = 31
	PayloadType_PORTFWD_DIALACK        PayloadType = 32
	PayloadType_PORTFWD_END            PayloadType = 33
	PayloadType_PORTFWD_DATA           PayloadType = 34
	PayloadType_PORTFWD_DISABLED       PayloadType = 35
	PayloadType_WORKFLOW_EXPEDITE      PayloadType = 40
	PayloadType_WORKFLOW_SCHEDULE      PayloadType = 41
	PayloadType_WORKFLOW_RESPONSE      PayloadType = 42
	PayloadType_ALERT_EVENT            PayloadType = 50
	PayloadType_CHAT_SESSION_INIT      PayloadType = 60
	PayloadType_CHAT_SESSION_END       PayloadType = 61
	PayloadType_CHAT_SESSION_EXIT      PayloadType = 62
	PayloadType_CHAT_SESSION_INPUT     PayloadType = 63
	PayloadType_CHAT_SESSION_OUTPUT    PayloadType = 64
	PayloadType_CHAT_SESSION_DISABLED  PayloadType = 65
)

// Enum value maps for PayloadType.
var (
	PayloadType_name = map[int32]string{
		0:  "NODE_INIT",
		1:  "NODE_KEEPALIVE",
		2:  "CANCEL_SESSION",
		10: "COMMAND_SHELL_EXEC",
		11: "COMMAND_SHELL_EXIT",
		12: "COMMAND_SHELL_INPUT",
		13: "COMMAND_SHELL_OUTPUT",
		14: "COMMAND_SHELL_DISABLED",
		20: "TRANSFER_INIT",
		21: "TRANSFER_DATA",
		22: "TRANSFER_ACK",
		23: "TRANSFER_DISABLED",
		30: "PORTFWD_LISTEN",
		31: "PORTFWD_DIAL",
		32: "PORTFWD_DIALACK",
		33: "PORTFWD_END",
		34: "PORTFWD_DATA",
		35: "PORTFWD_DISABLED",
		40: "WORKFLOW_EXPEDITE",
		41: "WORKFLOW_SCHEDULE",
		42: "WORKFLOW_RESPONSE",
		50: "ALERT_EVENT",
		60: "CHAT_SESSION_INIT",
		61: "CHAT_SESSION_END",
		62: "CHAT_SESSION_EXIT",
		63: "CHAT_SESSION_INPUT",
		64: "CHAT_SESSION_OUTPUT",
		65: "CHAT_SESSION_DISABLED",
	}
	PayloadType_value = map[string]int32{
		"NODE_INIT":              0,
		"NODE_KEEPALIVE":         1,
		"CANCEL_SESSION":         2,
		"COMMAND_SHELL_EXEC":     10,
		"COMMAND_SHELL_EXIT":     11,
		"COMMAND_SHELL_INPUT":    12,
		"COMMAND_SHELL_OUTPUT":   13,
		"COMMAND_SHELL_DISABLED": 14,
		"TRANSFER_INIT":          20,
		"TRANSFER_DATA":          21,
		"TRANSFER_ACK":           22,
		"TRANSFER_DISABLED":      23,
		"PORTFWD_LISTEN":         30,
		"PORTFWD_DIAL":           31,
		"PORTFWD_DIALACK":        32,
		"PORTFWD_END":            33,
		"PORTFWD_DATA":           34,
		"PORTFWD_DISABLED":       35,
		"WORKFLOW_EXPEDITE":      40,
		"WORKFLOW_SCHEDULE":      41,
		"WORKFLOW_RESPONSE":      42,
		"ALERT_EVENT":            50,
		"CHAT_SESSION_INIT":      60,
		"CHAT_SESSION_END":       61,
		"CHAT_SESSION_EXIT":      62,
		"CHAT_SESSION_INPUT":     63,
		"CHAT_SESSION_OUTPUT":    64,
		"CHAT_SESSION_DISABLED":  65,
	}
)

func (x PayloadType) Enum() *PayloadType {
	p := new(PayloadType)
	*p = x
	return p
}

func (x PayloadType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadType) Descriptor() protoreflect.EnumDescriptor {
	return file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_enumTypes[0].Descriptor()
}

func (PayloadType) Type() protoreflect.EnumType {
	return &file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_enumTypes[0]
}

func (x PayloadType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayloadType.Descriptor instead.
func (PayloadType) EnumDescriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDescGZIP(), []int{0}
}

type Payload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SrcID           string        `protobuf:"bytes,2,opt,name=srcID,proto3" json:"srcID,omitempty"`
	DstID           string        `protobuf:"bytes,3,opt,name=dstID,proto3" json:"dstID,omitempty"`
	SrcControllerID string        `protobuf:"bytes,4,opt,name=srcControllerID,proto3" json:"srcControllerID,omitempty"`
	DstControllerID string        `protobuf:"bytes,5,opt,name=dstControllerID,proto3" json:"dstControllerID,omitempty"`
	RequesterID     string        `protobuf:"bytes,6,opt,name=requesterID,proto3" json:"requesterID,omitempty"`
	Interactive     bool          `protobuf:"varint,7,opt,name=interactive,proto3" json:"interactive,omitempty"`
	AuthKey         *auth.AuthKey `protobuf:"bytes,8,opt,name=authKey,proto3" json:"authKey,omitempty"`
	PSK             string        `protobuf:"bytes,9,opt,name=PSK,proto3" json:"PSK,omitempty"`
	SecurityToken   string        `protobuf:"bytes,10,opt,name=securityToken,proto3" json:"securityToken,omitempty"`
	// int32 payloadType = 11;
	PayloadType PayloadType `protobuf:"varint,11,opt,name=payloadType,proto3,enum=mmsp.PayloadType" json:"payloadType,omitempty"`
	// Payload types
	Node        *network.Node          `protobuf:"bytes,12,opt,name=node,proto3" json:"node,omitempty"` // required for mmpInit
	Command     *command.Command       `protobuf:"bytes,13,opt,name=command,proto3" json:"command,omitempty"`
	Transfer    *transfer.Transfer     `protobuf:"bytes,14,opt,name=transfer,proto3" json:"transfer,omitempty"`
	PortFwd     *portFwd.PortFwd       `protobuf:"bytes,15,opt,name=portFwd,proto3" json:"portFwd,omitempty"`
	Workflow    *workflow.Workflow     `protobuf:"bytes,16,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Event       *alert.EventPayload    `protobuf:"bytes,17,opt,name=event,proto3" json:"event,omitempty"`
	ChatMessage *messaging.ChatMessage `protobuf:"bytes,91,opt,name=chatMessage,proto3" json:"chatMessage,omitempty"`
}

func (x *Payload) Reset() {
	*x = Payload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payload) ProtoMessage() {}

func (x *Payload) ProtoReflect() protoreflect.Message {
	mi := &file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payload.ProtoReflect.Descriptor instead.
func (*Payload) Descriptor() ([]byte, []int) {
	return file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDescGZIP(), []int{0}
}

func (x *Payload) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Payload) GetSrcID() string {
	if x != nil {
		return x.SrcID
	}
	return ""
}

func (x *Payload) GetDstID() string {
	if x != nil {
		return x.DstID
	}
	return ""
}

func (x *Payload) GetSrcControllerID() string {
	if x != nil {
		return x.SrcControllerID
	}
	return ""
}

func (x *Payload) GetDstControllerID() string {
	if x != nil {
		return x.DstControllerID
	}
	return ""
}

func (x *Payload) GetRequesterID() string {
	if x != nil {
		return x.RequesterID
	}
	return ""
}

func (x *Payload) GetInteractive() bool {
	if x != nil {
		return x.Interactive
	}
	return false
}

func (x *Payload) GetAuthKey() *auth.AuthKey {
	if x != nil {
		return x.AuthKey
	}
	return nil
}

func (x *Payload) GetPSK() string {
	if x != nil {
		return x.PSK
	}
	return ""
}

func (x *Payload) GetSecurityToken() string {
	if x != nil {
		return x.SecurityToken
	}
	return ""
}

func (x *Payload) GetPayloadType() PayloadType {
	if x != nil {
		return x.PayloadType
	}
	return PayloadType_NODE_INIT
}

func (x *Payload) GetNode() *network.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *Payload) GetCommand() *command.Command {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *Payload) GetTransfer() *transfer.Transfer {
	if x != nil {
		return x.Transfer
	}
	return nil
}

func (x *Payload) GetPortFwd() *portFwd.PortFwd {
	if x != nil {
		return x.PortFwd
	}
	return nil
}

func (x *Payload) GetWorkflow() *workflow.Workflow {
	if x != nil {
		return x.Workflow
	}
	return nil
}

func (x *Payload) GetEvent() *alert.EventPayload {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *Payload) GetChatMessage() *messaging.ChatMessage {
	if x != nil {
		return x.ChatMessage
	}
	return nil
}

var File_mmesh_protobuf_network_v1_mmsp_mmsp_proto protoreflect.FileDescriptor

var file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDesc = []byte{
	0x0a, 0x29, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6d, 0x73, 0x70,
	0x2f, 0x6d, 0x6d, 0x73, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x6d, 0x6d, 0x73,
	0x70, 0x1a, 0x2a, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6d, 0x73,
	0x70, 0x2f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6d,
	0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6d, 0x73, 0x70, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2d, 0x6d, 0x6d, 0x65,
	0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6d, 0x73, 0x70, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x6d, 0x6d, 0x65, 0x73,
	0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x6d, 0x73, 0x70, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x77, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x37, 0x6d, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x73, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66,
	0x6c, 0x6f, 0x77, 0x2f, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x2e, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x30, 0x6d, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x05, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x72, 0x63, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f,
	0x73, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x44,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x41, 0x75, 0x74,
	0x68, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x50, 0x53, 0x4b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x50, 0x53, 0x4b, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6d, 0x6d, 0x73,
	0x70, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x6e, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x77, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x6f, 0x72,
	0x74, 0x46, 0x77, 0x64, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x77, 0x64, 0x52, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x46, 0x77, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f,
	0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x52, 0x08, 0x77, 0x6f, 0x72,
	0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x29, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x2e, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x5b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0xec, 0x04, 0x0a, 0x0b, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x4b, 0x45, 0x45, 0x50, 0x41, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x45,
	0x4c, 0x4c, 0x5f, 0x45, 0x58, 0x45, 0x43, 0x10, 0x0a, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4d,
	0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10,
	0x0b, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x45,
	0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f,
	0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f, 0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x4f, 0x55, 0x54, 0x50,
	0x55, 0x54, 0x10, 0x0d, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x53, 0x48, 0x45, 0x4c, 0x4c, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x0e,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49,
	0x54, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f,
	0x44, 0x41, 0x54, 0x41, 0x10, 0x15, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46,
	0x45, 0x52, 0x5f, 0x41, 0x43, 0x4b, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x46, 0x45, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x17, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x4f, 0x52, 0x54, 0x46, 0x57, 0x44, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x45,
	0x4e, 0x10, 0x1e, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x4f, 0x52, 0x54, 0x46, 0x57, 0x44, 0x5f, 0x44,
	0x49, 0x41, 0x4c, 0x10, 0x1f, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x4f, 0x52, 0x54, 0x46, 0x57, 0x44,
	0x5f, 0x44, 0x49, 0x41, 0x4c, 0x41, 0x43, 0x4b, 0x10, 0x20, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x4f,
	0x52, 0x54, 0x46, 0x57, 0x44, 0x5f, 0x45, 0x4e, 0x44, 0x10, 0x21, 0x12, 0x10, 0x0a, 0x0c, 0x50,
	0x4f, 0x52, 0x54, 0x46, 0x57, 0x44, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x22, 0x12, 0x14, 0x0a,
	0x10, 0x50, 0x4f, 0x52, 0x54, 0x46, 0x57, 0x44, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45,
	0x44, 0x10, 0x23, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x45, 0x58, 0x50, 0x45, 0x44, 0x49, 0x54, 0x45, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f,
	0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10,
	0x29, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x4f, 0x52, 0x4b, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x52, 0x45,
	0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x2a, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x45, 0x52,
	0x54, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x32, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41,
	0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x3c,
	0x12, 0x14, 0x0a, 0x10, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x44, 0x10, 0x3d, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53,
	0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10, 0x3e, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x10, 0x3f, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10, 0x40, 0x12, 0x19,
	0x0a, 0x15, 0x43, 0x48, 0x41, 0x54, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44,
	0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x41, 0x42, 0x26, 0x5a, 0x24, 0x6d, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x64, 0x65, 0x76, 0x2f, 0x6d, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x67, 0x6f, 0x2f,
	0x67, 0x72, 0x70, 0x63, 0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2f, 0x6d, 0x6d, 0x73,
	0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDescOnce sync.Once
	file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDescData = file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDesc
)

func file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDescGZIP() []byte {
	file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDescOnce.Do(func() {
		file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDescData = protoimpl.X.CompressGZIP(file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDescData)
	})
	return file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDescData
}

var file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_goTypes = []interface{}{
	(PayloadType)(0),              // 0: mmsp.PayloadType
	(*Payload)(nil),               // 1: mmsp.Payload
	(*auth.AuthKey)(nil),          // 2: auth.AuthKey
	(*network.Node)(nil),          // 3: network.Node
	(*command.Command)(nil),       // 4: command.Command
	(*transfer.Transfer)(nil),     // 5: transfer.Transfer
	(*portFwd.PortFwd)(nil),       // 6: portFwd.PortFwd
	(*workflow.Workflow)(nil),     // 7: workflow.Workflow
	(*alert.EventPayload)(nil),    // 8: alert.EventPayload
	(*messaging.ChatMessage)(nil), // 9: messaging.ChatMessage
}
var file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_depIdxs = []int32{
	2, // 0: mmsp.Payload.authKey:type_name -> auth.AuthKey
	0, // 1: mmsp.Payload.payloadType:type_name -> mmsp.PayloadType
	3, // 2: mmsp.Payload.node:type_name -> network.Node
	4, // 3: mmsp.Payload.command:type_name -> command.Command
	5, // 4: mmsp.Payload.transfer:type_name -> transfer.Transfer
	6, // 5: mmsp.Payload.portFwd:type_name -> portFwd.PortFwd
	7, // 6: mmsp.Payload.workflow:type_name -> workflow.Workflow
	8, // 7: mmsp.Payload.event:type_name -> alert.EventPayload
	9, // 8: mmsp.Payload.chatMessage:type_name -> messaging.ChatMessage
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_init() }
func file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_init() {
	if File_mmesh_protobuf_network_v1_mmsp_mmsp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_goTypes,
		DependencyIndexes: file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_depIdxs,
		EnumInfos:         file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_enumTypes,
		MessageInfos:      file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_msgTypes,
	}.Build()
	File_mmesh_protobuf_network_v1_mmsp_mmsp_proto = out.File
	file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_rawDesc = nil
	file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_goTypes = nil
	file_mmesh_protobuf_network_v1_mmsp_mmsp_proto_depIdxs = nil
}
