package svcs

import (
	"context"
	"time"

	"mmesh.dev/m-node/internal/app/node/metrics"
	"mmesh.dev/m-node/internal/app/node/netp2p"
	"mmesh.dev/m-api-go/grpc/resources/network"
	"mmesh.dev/m-lib/pkg/runtime"
	"x6a.dev/pkg/xlog"
)

// metricsAgent method implementation of NxNetwork gRPC Service

var updateMetrics = make(chan struct{}, 1)

func MetricsAgent(w *runtime.Wrkr) {
	xlog.Infof("Started worker %s", w.Name)
	w.Running = true

	quitMetrics := make(chan struct{}, 1)

	go func() {
		for {
			select {
			case <-updateMetrics:
				if metrics.NetworkStats == nil || metrics.HostStats == nil {
					continue
				}

				n := netp2p.GetNode()

				if n.Agent == nil {
					continue
				}

				if n.Agent.Metrics == nil {
					n.Agent.Metrics = &network.AgentMetrics{}
				}

				if n.Agent.IsRelay {
					if err := metrics.ReadNetDevStats(); err != nil {
						xlog.Errorf("Unable to read net-dev-stats: %v", err)
					} else {
						n.Agent.Metrics.NetDevStats = metrics.NetworkStats.NetDevStats
					}
				}

				n.Agent.Metrics.NetworkMetrics = metrics.NetworkStats.NetworkMetrics
				n.Agent.Metrics.NetworkTraffic = metrics.NetworkStats.NetworkTraffic
				n.Agent.Metrics.HostMetrics = metrics.HostStats.HostMetrics
				n.Agent.Metrics.RelayMetrics = metrics.RelayMetrics.GetRelayMetrics()

				_, err := w.NxNC.Metrics(context.Background(), n)
				if err != nil {
					xlog.Errorf("Unable to send metrics to mmesh controller: %v", err)
					networkErrorEventsQueue <- struct{}{}
					return
				}
				xlog.Debug("Metrics updated")

				metrics.NetworkStats.Zero()
			case <-quitMetrics:
				xlog.Debug("Closing metrics agent")
				return
			}
		}
	}()

	go hostStatsAgentCtl()

	<-w.QuitChan
	quitMetrics <- struct{}{}

	w.WG.Done()
	w.Running = false
	xlog.Infof("Stopped worker %s", w.Name)
}

var hostStatsAgentCtlRun bool

func hostStatsAgentCtl() {
	if !hostStatsAgentCtlRun {
		hostStatsAgentCtlRun = true
		go func() {
			for {
				metrics.HostStats.Update()
				time.Sleep(60 * time.Second)
			}
		}()
		go func() {
			for {
				time.Sleep(300 * time.Second)
				updateMetrics <- struct{}{}
			}
		}()
	}
}
